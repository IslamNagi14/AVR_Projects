
Switch_module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000010d8  0000114c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001800  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c99  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 38 07 	call	0xe70	; 0xe70 <main>
      7a:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	0f 92       	push	r0
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62
      8c:	81 e0       	ldi	r24, 0x01	; 1
      8e:	89 83       	std	Y+1, r24	; 0x01
      90:	ea e3       	ldi	r30, 0x3A	; 58
      92:	f0 e0       	ldi	r31, 0x00	; 0
      94:	8f ef       	ldi	r24, 0xFF	; 255
      96:	80 83       	st	Z, r24
      98:	e7 e3       	ldi	r30, 0x37	; 55
      9a:	f0 e0       	ldi	r31, 0x00	; 0
      9c:	86 eb       	ldi	r24, 0xB6	; 182
      9e:	80 83       	st	Z, r24
      a0:	e4 e3       	ldi	r30, 0x34	; 52
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	86 eb       	ldi	r24, 0xB6	; 182
      a6:	80 83       	st	Z, r24
      a8:	e1 e3       	ldi	r30, 0x31	; 49
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	86 eb       	ldi	r24, 0xB6	; 182
      ae:	80 83       	st	Z, r24
      b0:	eb e3       	ldi	r30, 0x3B	; 59
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	10 82       	st	Z, r1
      b6:	e8 e3       	ldi	r30, 0x38	; 56
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	8a e3       	ldi	r24, 0x3A	; 58
      bc:	80 83       	st	Z, r24
      be:	e5 e3       	ldi	r30, 0x35	; 53
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	8a e3       	ldi	r24, 0x3A	; 58
      c4:	80 83       	st	Z, r24
      c6:	e2 e3       	ldi	r30, 0x32	; 50
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	8a e3       	ldi	r24, 0x3A	; 58
      cc:	80 83       	st	Z, r24
      ce:	19 82       	std	Y+1, r1	; 0x01
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	0f 90       	pop	r0
      d4:	cf 91       	pop	r28
      d6:	df 91       	pop	r29
      d8:	08 95       	ret

000000da <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
      da:	df 93       	push	r29
      dc:	cf 93       	push	r28
      de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSetPortDir+0x6>
      e0:	00 d0       	rcall	.+0      	; 0xe2 <DIO_enuSetPortDir+0x8>
      e2:	0f 92       	push	r0
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	8a 83       	std	Y+2, r24	; 0x02
      ea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
      f0:	8a 81       	ldd	r24, Y+2	; 0x02
      f2:	84 30       	cpi	r24, 0x04	; 4
      f4:	a0 f5       	brcc	.+104    	; 0x15e <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	28 2f       	mov	r18, r24
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	3d 83       	std	Y+5, r19	; 0x05
      fe:	2c 83       	std	Y+4, r18	; 0x04
     100:	8c 81       	ldd	r24, Y+4	; 0x04
     102:	9d 81       	ldd	r25, Y+5	; 0x05
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	91 05       	cpc	r25, r1
     108:	d1 f0       	breq	.+52     	; 0x13e <DIO_enuSetPortDir+0x64>
     10a:	2c 81       	ldd	r18, Y+4	; 0x04
     10c:	3d 81       	ldd	r19, Y+5	; 0x05
     10e:	22 30       	cpi	r18, 0x02	; 2
     110:	31 05       	cpc	r19, r1
     112:	2c f4       	brge	.+10     	; 0x11e <DIO_enuSetPortDir+0x44>
     114:	8c 81       	ldd	r24, Y+4	; 0x04
     116:	9d 81       	ldd	r25, Y+5	; 0x05
     118:	00 97       	sbiw	r24, 0x00	; 0
     11a:	61 f0       	breq	.+24     	; 0x134 <DIO_enuSetPortDir+0x5a>
     11c:	1e c0       	rjmp	.+60     	; 0x15a <DIO_enuSetPortDir+0x80>
     11e:	2c 81       	ldd	r18, Y+4	; 0x04
     120:	3d 81       	ldd	r19, Y+5	; 0x05
     122:	22 30       	cpi	r18, 0x02	; 2
     124:	31 05       	cpc	r19, r1
     126:	81 f0       	breq	.+32     	; 0x148 <DIO_enuSetPortDir+0x6e>
     128:	8c 81       	ldd	r24, Y+4	; 0x04
     12a:	9d 81       	ldd	r25, Y+5	; 0x05
     12c:	83 30       	cpi	r24, 0x03	; 3
     12e:	91 05       	cpc	r25, r1
     130:	81 f0       	breq	.+32     	; 0x152 <DIO_enuSetPortDir+0x78>
     132:	13 c0       	rjmp	.+38     	; 0x15a <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
					DDRA = Copy_u8PortValue;break;
     134:	ea e3       	ldi	r30, 0x3A	; 58
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	8b 81       	ldd	r24, Y+3	; 0x03
     13a:	80 83       	st	Z, r24
     13c:	0e c0       	rjmp	.+28     	; 0x15a <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
					DDRB = Copy_u8PortValue;break;
     13e:	e7 e3       	ldi	r30, 0x37	; 55
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	80 83       	st	Z, r24
     146:	09 c0       	rjmp	.+18     	; 0x15a <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
					DDRC= Copy_u8PortValue;break;
     148:	e4 e3       	ldi	r30, 0x34	; 52
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	8b 81       	ldd	r24, Y+3	; 0x03
     14e:	80 83       	st	Z, r24
     150:	04 c0       	rjmp	.+8      	; 0x15a <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
					DDRD = Copy_u8PortValue;break;
     152:	e1 e3       	ldi	r30, 0x31	; 49
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	8b 81       	ldd	r24, Y+3	; 0x03
     158:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     162:	89 81       	ldd	r24, Y+1	; 0x01
}
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	cf 91       	pop	r28
     170:	df 91       	pop	r29
     172:	08 95       	ret

00000174 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	00 d0       	rcall	.+0      	; 0x17a <DIO_enuSetPortVAL+0x6>
     17a:	00 d0       	rcall	.+0      	; 0x17c <DIO_enuSetPortVAL+0x8>
     17c:	0f 92       	push	r0
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	8a 83       	std	Y+2, r24	; 0x02
     184:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	84 30       	cpi	r24, 0x04	; 4
     18e:	a0 f5       	brcc	.+104    	; 0x1f8 <DIO_enuSetPortVAL+0x84>
		{
			switch(Copy_u8PortID)
     190:	8a 81       	ldd	r24, Y+2	; 0x02
     192:	28 2f       	mov	r18, r24
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	3d 83       	std	Y+5, r19	; 0x05
     198:	2c 83       	std	Y+4, r18	; 0x04
     19a:	8c 81       	ldd	r24, Y+4	; 0x04
     19c:	9d 81       	ldd	r25, Y+5	; 0x05
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	d1 f0       	breq	.+52     	; 0x1d8 <DIO_enuSetPortVAL+0x64>
     1a4:	2c 81       	ldd	r18, Y+4	; 0x04
     1a6:	3d 81       	ldd	r19, Y+5	; 0x05
     1a8:	22 30       	cpi	r18, 0x02	; 2
     1aa:	31 05       	cpc	r19, r1
     1ac:	2c f4       	brge	.+10     	; 0x1b8 <DIO_enuSetPortVAL+0x44>
     1ae:	8c 81       	ldd	r24, Y+4	; 0x04
     1b0:	9d 81       	ldd	r25, Y+5	; 0x05
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	61 f0       	breq	.+24     	; 0x1ce <DIO_enuSetPortVAL+0x5a>
     1b6:	1e c0       	rjmp	.+60     	; 0x1f4 <DIO_enuSetPortVAL+0x80>
     1b8:	2c 81       	ldd	r18, Y+4	; 0x04
     1ba:	3d 81       	ldd	r19, Y+5	; 0x05
     1bc:	22 30       	cpi	r18, 0x02	; 2
     1be:	31 05       	cpc	r19, r1
     1c0:	81 f0       	breq	.+32     	; 0x1e2 <DIO_enuSetPortVAL+0x6e>
     1c2:	8c 81       	ldd	r24, Y+4	; 0x04
     1c4:	9d 81       	ldd	r25, Y+5	; 0x05
     1c6:	83 30       	cpi	r24, 0x03	; 3
     1c8:	91 05       	cpc	r25, r1
     1ca:	81 f0       	breq	.+32     	; 0x1ec <DIO_enuSetPortVAL+0x78>
     1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <DIO_enuSetPortVAL+0x80>
			{
			case DIO_PORTA:
						PORTA = Copy_u8PortValue;break;
     1ce:	eb e3       	ldi	r30, 0x3B	; 59
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	8b 81       	ldd	r24, Y+3	; 0x03
     1d4:	80 83       	st	Z, r24
     1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTB:
						PORTB = Copy_u8PortValue;break;
     1d8:	e8 e3       	ldi	r30, 0x38	; 56
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	80 83       	st	Z, r24
     1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTC:
						PORTC= Copy_u8PortValue;break;
     1e2:	e5 e3       	ldi	r30, 0x35	; 53
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	8b 81       	ldd	r24, Y+3	; 0x03
     1e8:	80 83       	st	Z, r24
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTD:
						PORTD = Copy_u8PortValue;break;
     1ec:	e2 e3       	ldi	r30, 0x32	; 50
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	8b 81       	ldd	r24, Y+3	; 0x03
     1f2:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     1f4:	19 82       	std	Y+1, r1	; 0x01
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_enuSetPortVAL+0x88>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
}
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	cf 91       	pop	r28
     20a:	df 91       	pop	r29
     20c:	08 95       	ret

0000020e <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	00 d0       	rcall	.+0      	; 0x214 <DIO_enuToggelPort+0x6>
     214:	00 d0       	rcall	.+0      	; 0x216 <DIO_enuToggelPort+0x8>
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     220:	8a 81       	ldd	r24, Y+2	; 0x02
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	08 f0       	brcs	.+2      	; 0x228 <DIO_enuToggelPort+0x1a>
     226:	40 c0       	rjmp	.+128    	; 0x2a8 <DIO_enuToggelPort+0x9a>
			{
				switch(Copy_u8PortID)
     228:	8a 81       	ldd	r24, Y+2	; 0x02
     22a:	28 2f       	mov	r18, r24
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	3c 83       	std	Y+4, r19	; 0x04
     230:	2b 83       	std	Y+3, r18	; 0x03
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	9c 81       	ldd	r25, Y+4	; 0x04
     236:	81 30       	cpi	r24, 0x01	; 1
     238:	91 05       	cpc	r25, r1
     23a:	e9 f0       	breq	.+58     	; 0x276 <DIO_enuToggelPort+0x68>
     23c:	2b 81       	ldd	r18, Y+3	; 0x03
     23e:	3c 81       	ldd	r19, Y+4	; 0x04
     240:	22 30       	cpi	r18, 0x02	; 2
     242:	31 05       	cpc	r19, r1
     244:	2c f4       	brge	.+10     	; 0x250 <DIO_enuToggelPort+0x42>
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	9c 81       	ldd	r25, Y+4	; 0x04
     24a:	00 97       	sbiw	r24, 0x00	; 0
     24c:	61 f0       	breq	.+24     	; 0x266 <DIO_enuToggelPort+0x58>
     24e:	2a c0       	rjmp	.+84     	; 0x2a4 <DIO_enuToggelPort+0x96>
     250:	2b 81       	ldd	r18, Y+3	; 0x03
     252:	3c 81       	ldd	r19, Y+4	; 0x04
     254:	22 30       	cpi	r18, 0x02	; 2
     256:	31 05       	cpc	r19, r1
     258:	b1 f0       	breq	.+44     	; 0x286 <DIO_enuToggelPort+0x78>
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04
     25e:	83 30       	cpi	r24, 0x03	; 3
     260:	91 05       	cpc	r25, r1
     262:	c9 f0       	breq	.+50     	; 0x296 <DIO_enuToggelPort+0x88>
     264:	1f c0       	rjmp	.+62     	; 0x2a4 <DIO_enuToggelPort+0x96>
				{
				case DIO_PORTA:
							PORTA = ~PORTA ;break;
     266:	ab e3       	ldi	r26, 0x3B	; 59
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	eb e3       	ldi	r30, 0x3B	; 59
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	80 95       	com	r24
     272:	8c 93       	st	X, r24
     274:	17 c0       	rjmp	.+46     	; 0x2a4 <DIO_enuToggelPort+0x96>
				case DIO_PORTB:
							PORTB = ~PORTB ;break;
     276:	a8 e3       	ldi	r26, 0x38	; 56
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	e8 e3       	ldi	r30, 0x38	; 56
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	80 95       	com	r24
     282:	8c 93       	st	X, r24
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <DIO_enuToggelPort+0x96>
				case DIO_PORTC:
							PORTC = ~PORTC ;break;
     286:	a5 e3       	ldi	r26, 0x35	; 53
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e5 e3       	ldi	r30, 0x35	; 53
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	80 95       	com	r24
     292:	8c 93       	st	X, r24
     294:	07 c0       	rjmp	.+14     	; 0x2a4 <DIO_enuToggelPort+0x96>
				case DIO_PORTD:
							PORTD = ~PORTD ;break;
     296:	a2 e3       	ldi	r26, 0x32	; 50
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e2 e3       	ldi	r30, 0x32	; 50
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	80 95       	com	r24
     2a2:	8c 93       	st	X, r24
				}
				Local_enuErrorStates = ES_OK;
     2a4:	19 82       	std	Y+1, r1	; 0x01
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_enuToggelPort+0x9e>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
     2a8:	83 e0       	ldi	r24, 0x03	; 3
     2aa:	89 83       	std	Y+1, r24	; 0x01
			}
	return Local_enuErrorStates;
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	cf 91       	pop	r28
     2b8:	df 91       	pop	r29
     2ba:	08 95       	ret

000002bc <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
     2bc:	df 93       	push	r29
     2be:	cf 93       	push	r28
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <DIO_enuGetPortVAL+0x6>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_enuGetPortVAL+0x8>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <DIO_enuGetPortVAL+0xa>
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	8a 83       	std	Y+2, r24	; 0x02
     2cc:	7c 83       	std	Y+4, r23	; 0x04
     2ce:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
     2d4:	8b 81       	ldd	r24, Y+3	; 0x03
     2d6:	9c 81       	ldd	r25, Y+4	; 0x04
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	09 f4       	brne	.+2      	; 0x2de <DIO_enuGetPortVAL+0x22>
     2dc:	42 c0       	rjmp	.+132    	; 0x362 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
     2de:	8a 81       	ldd	r24, Y+2	; 0x02
     2e0:	84 30       	cpi	r24, 0x04	; 4
     2e2:	e0 f5       	brcc	.+120    	; 0x35c <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	28 2f       	mov	r18, r24
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	3e 83       	std	Y+6, r19	; 0x06
     2ec:	2d 83       	std	Y+5, r18	; 0x05
     2ee:	8d 81       	ldd	r24, Y+5	; 0x05
     2f0:	9e 81       	ldd	r25, Y+6	; 0x06
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	91 05       	cpc	r25, r1
     2f6:	e1 f0       	breq	.+56     	; 0x330 <DIO_enuGetPortVAL+0x74>
     2f8:	2d 81       	ldd	r18, Y+5	; 0x05
     2fa:	3e 81       	ldd	r19, Y+6	; 0x06
     2fc:	22 30       	cpi	r18, 0x02	; 2
     2fe:	31 05       	cpc	r19, r1
     300:	2c f4       	brge	.+10     	; 0x30c <DIO_enuGetPortVAL+0x50>
     302:	8d 81       	ldd	r24, Y+5	; 0x05
     304:	9e 81       	ldd	r25, Y+6	; 0x06
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	61 f0       	breq	.+24     	; 0x322 <DIO_enuGetPortVAL+0x66>
     30a:	26 c0       	rjmp	.+76     	; 0x358 <DIO_enuGetPortVAL+0x9c>
     30c:	2d 81       	ldd	r18, Y+5	; 0x05
     30e:	3e 81       	ldd	r19, Y+6	; 0x06
     310:	22 30       	cpi	r18, 0x02	; 2
     312:	31 05       	cpc	r19, r1
     314:	a1 f0       	breq	.+40     	; 0x33e <DIO_enuGetPortVAL+0x82>
     316:	8d 81       	ldd	r24, Y+5	; 0x05
     318:	9e 81       	ldd	r25, Y+6	; 0x06
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	91 05       	cpc	r25, r1
     31e:	b1 f0       	breq	.+44     	; 0x34c <DIO_enuGetPortVAL+0x90>
     320:	1b c0       	rjmp	.+54     	; 0x358 <DIO_enuGetPortVAL+0x9c>
			{
				case DIO_PORTA:
					*Copy_Pu8Value = PINA ;break;
     322:	e9 e3       	ldi	r30, 0x39	; 57
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	eb 81       	ldd	r30, Y+3	; 0x03
     32a:	fc 81       	ldd	r31, Y+4	; 0x04
     32c:	80 83       	st	Z, r24
     32e:	14 c0       	rjmp	.+40     	; 0x358 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTB:
					*Copy_Pu8Value = PINB ;break;
     330:	e6 e3       	ldi	r30, 0x36	; 54
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	eb 81       	ldd	r30, Y+3	; 0x03
     338:	fc 81       	ldd	r31, Y+4	; 0x04
     33a:	80 83       	st	Z, r24
     33c:	0d c0       	rjmp	.+26     	; 0x358 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTC:
					*Copy_Pu8Value = PINC ;break;
     33e:	e3 e3       	ldi	r30, 0x33	; 51
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	eb 81       	ldd	r30, Y+3	; 0x03
     346:	fc 81       	ldd	r31, Y+4	; 0x04
     348:	80 83       	st	Z, r24
     34a:	06 c0       	rjmp	.+12     	; 0x358 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTD:
					*Copy_Pu8Value = PIND ;break;
     34c:	e0 e3       	ldi	r30, 0x30	; 48
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	eb 81       	ldd	r30, Y+3	; 0x03
     354:	fc 81       	ldd	r31, Y+4	; 0x04
     356:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     358:	19 82       	std	Y+1, r1	; 0x01
     35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		 Local_enuErrorStates = ES_NULLPOINTER;
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     366:	89 81       	ldd	r24, Y+1	; 0x01
}
     368:	26 96       	adiw	r28, 0x06	; 6
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	cf 91       	pop	r28
     376:	df 91       	pop	r29
     378:	08 95       	ret

0000037a <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	00 d0       	rcall	.+0      	; 0x380 <DIO_enuSetPINDir+0x6>
     380:	00 d0       	rcall	.+0      	; 0x382 <DIO_enuSetPINDir+0x8>
     382:	00 d0       	rcall	.+0      	; 0x384 <DIO_enuSetPINDir+0xa>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	8a 83       	std	Y+2, r24	; 0x02
     38a:	6b 83       	std	Y+3, r22	; 0x03
     38c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	84 30       	cpi	r24, 0x04	; 4
     396:	08 f0       	brcs	.+2      	; 0x39a <DIO_enuSetPINDir+0x20>
     398:	d0 c0       	rjmp	.+416    	; 0x53a <DIO_enuSetPINDir+0x1c0>
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	88 30       	cpi	r24, 0x08	; 8
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <DIO_enuSetPINDir+0x28>
     3a0:	cc c0       	rjmp	.+408    	; 0x53a <DIO_enuSetPINDir+0x1c0>
     3a2:	8c 81       	ldd	r24, Y+4	; 0x04
     3a4:	82 30       	cpi	r24, 0x02	; 2
     3a6:	08 f0       	brcs	.+2      	; 0x3aa <DIO_enuSetPINDir+0x30>
     3a8:	c8 c0       	rjmp	.+400    	; 0x53a <DIO_enuSetPINDir+0x1c0>
	{

			switch(Copy_u8PortID)
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	28 2f       	mov	r18, r24
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	3e 83       	std	Y+6, r19	; 0x06
     3b2:	2d 83       	std	Y+5, r18	; 0x05
     3b4:	6d 81       	ldd	r22, Y+5	; 0x05
     3b6:	7e 81       	ldd	r23, Y+6	; 0x06
     3b8:	61 30       	cpi	r22, 0x01	; 1
     3ba:	71 05       	cpc	r23, r1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <DIO_enuSetPINDir+0x46>
     3be:	41 c0       	rjmp	.+130    	; 0x442 <DIO_enuSetPINDir+0xc8>
     3c0:	8d 81       	ldd	r24, Y+5	; 0x05
     3c2:	9e 81       	ldd	r25, Y+6	; 0x06
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	91 05       	cpc	r25, r1
     3c8:	34 f4       	brge	.+12     	; 0x3d6 <DIO_enuSetPINDir+0x5c>
     3ca:	2d 81       	ldd	r18, Y+5	; 0x05
     3cc:	3e 81       	ldd	r19, Y+6	; 0x06
     3ce:	21 15       	cp	r18, r1
     3d0:	31 05       	cpc	r19, r1
     3d2:	71 f0       	breq	.+28     	; 0x3f0 <DIO_enuSetPINDir+0x76>
     3d4:	b0 c0       	rjmp	.+352    	; 0x536 <DIO_enuSetPINDir+0x1bc>
     3d6:	6d 81       	ldd	r22, Y+5	; 0x05
     3d8:	7e 81       	ldd	r23, Y+6	; 0x06
     3da:	62 30       	cpi	r22, 0x02	; 2
     3dc:	71 05       	cpc	r23, r1
     3de:	09 f4       	brne	.+2      	; 0x3e2 <DIO_enuSetPINDir+0x68>
     3e0:	59 c0       	rjmp	.+178    	; 0x494 <DIO_enuSetPINDir+0x11a>
     3e2:	8d 81       	ldd	r24, Y+5	; 0x05
     3e4:	9e 81       	ldd	r25, Y+6	; 0x06
     3e6:	83 30       	cpi	r24, 0x03	; 3
     3e8:	91 05       	cpc	r25, r1
     3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_enuSetPINDir+0x74>
     3ec:	7c c0       	rjmp	.+248    	; 0x4e6 <DIO_enuSetPINDir+0x16c>
     3ee:	a3 c0       	rjmp	.+326    	; 0x536 <DIO_enuSetPINDir+0x1bc>
			{
				case DIO_PORTA:
							DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     3f0:	aa e3       	ldi	r26, 0x3A	; 58
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	ea e3       	ldi	r30, 0x3A	; 58
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	48 2f       	mov	r20, r24
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	28 2f       	mov	r18, r24
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_enuSetPINDir+0x92>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	2a 95       	dec	r18
     40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_enuSetPINDir+0x8e>
     410:	80 95       	com	r24
     412:	84 23       	and	r24, r20
     414:	8c 93       	st	X, r24
							DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     416:	aa e3       	ldi	r26, 0x3A	; 58
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	ea e3       	ldi	r30, 0x3A	; 58
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	48 2f       	mov	r20, r24
     422:	8c 81       	ldd	r24, Y+4	; 0x04
     424:	28 2f       	mov	r18, r24
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	8b 81       	ldd	r24, Y+3	; 0x03
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	b9 01       	movw	r22, r18
     430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_enuSetPINDir+0xbc>
     432:	66 0f       	add	r22, r22
     434:	77 1f       	adc	r23, r23
     436:	8a 95       	dec	r24
     438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_enuSetPINDir+0xb8>
     43a:	cb 01       	movw	r24, r22
     43c:	84 2b       	or	r24, r20
     43e:	8c 93       	st	X, r24
     440:	7a c0       	rjmp	.+244    	; 0x536 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTB:
							DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     442:	a7 e3       	ldi	r26, 0x37	; 55
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e7 e3       	ldi	r30, 0x37	; 55
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	48 2f       	mov	r20, r24
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	28 2f       	mov	r18, r24
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_enuSetPINDir+0xe4>
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	2a 95       	dec	r18
     460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_enuSetPINDir+0xe0>
     462:	80 95       	com	r24
     464:	84 23       	and	r24, r20
     466:	8c 93       	st	X, r24
							DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     468:	a7 e3       	ldi	r26, 0x37	; 55
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	e7 e3       	ldi	r30, 0x37	; 55
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	48 2f       	mov	r20, r24
     474:	8c 81       	ldd	r24, Y+4	; 0x04
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	8b 81       	ldd	r24, Y+3	; 0x03
     47c:	88 2f       	mov	r24, r24
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	b9 01       	movw	r22, r18
     482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_enuSetPINDir+0x10e>
     484:	66 0f       	add	r22, r22
     486:	77 1f       	adc	r23, r23
     488:	8a 95       	dec	r24
     48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_enuSetPINDir+0x10a>
     48c:	cb 01       	movw	r24, r22
     48e:	84 2b       	or	r24, r20
     490:	8c 93       	st	X, r24
     492:	51 c0       	rjmp	.+162    	; 0x536 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTC:
							DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     494:	a4 e3       	ldi	r26, 0x34	; 52
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	e4 e3       	ldi	r30, 0x34	; 52
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	48 2f       	mov	r20, r24
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	28 2f       	mov	r18, r24
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_enuSetPINDir+0x136>
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	2a 95       	dec	r18
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_enuSetPINDir+0x132>
     4b4:	80 95       	com	r24
     4b6:	84 23       	and	r24, r20
     4b8:	8c 93       	st	X, r24
							DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     4ba:	a4 e3       	ldi	r26, 0x34	; 52
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e4 e3       	ldi	r30, 0x34	; 52
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	48 2f       	mov	r20, r24
     4c6:	8c 81       	ldd	r24, Y+4	; 0x04
     4c8:	28 2f       	mov	r18, r24
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	8b 81       	ldd	r24, Y+3	; 0x03
     4ce:	88 2f       	mov	r24, r24
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	b9 01       	movw	r22, r18
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_enuSetPINDir+0x160>
     4d6:	66 0f       	add	r22, r22
     4d8:	77 1f       	adc	r23, r23
     4da:	8a 95       	dec	r24
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_enuSetPINDir+0x15c>
     4de:	cb 01       	movw	r24, r22
     4e0:	84 2b       	or	r24, r20
     4e2:	8c 93       	st	X, r24
     4e4:	28 c0       	rjmp	.+80     	; 0x536 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTD:
							DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     4e6:	a1 e3       	ldi	r26, 0x31	; 49
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	e1 e3       	ldi	r30, 0x31	; 49
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	48 2f       	mov	r20, r24
     4f2:	8b 81       	ldd	r24, Y+3	; 0x03
     4f4:	28 2f       	mov	r18, r24
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_enuSetPINDir+0x188>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	2a 95       	dec	r18
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_enuSetPINDir+0x184>
     506:	80 95       	com	r24
     508:	84 23       	and	r24, r20
     50a:	8c 93       	st	X, r24
							DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     50c:	a1 e3       	ldi	r26, 0x31	; 49
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	e1 e3       	ldi	r30, 0x31	; 49
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	48 2f       	mov	r20, r24
     518:	8c 81       	ldd	r24, Y+4	; 0x04
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	b9 01       	movw	r22, r18
     526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_enuSetPINDir+0x1b2>
     528:	66 0f       	add	r22, r22
     52a:	77 1f       	adc	r23, r23
     52c:	8a 95       	dec	r24
     52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_enuSetPINDir+0x1ae>
     530:	cb 01       	movw	r24, r22
     532:	84 2b       	or	r24, r20
     534:	8c 93       	st	X, r24
							break;
			}
			Local_enuErrorStates = ES_OK;
     536:	19 82       	std	Y+1, r1	; 0x01
     538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     53e:	89 81       	ldd	r24, Y+1	; 0x01
}
     540:	26 96       	adiw	r28, 0x06	; 6
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	00 d0       	rcall	.+0      	; 0x558 <DIO_enuSetPINVAL+0x6>
     558:	00 d0       	rcall	.+0      	; 0x55a <DIO_enuSetPINVAL+0x8>
     55a:	00 d0       	rcall	.+0      	; 0x55c <DIO_enuSetPINVAL+0xa>
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	8a 83       	std	Y+2, r24	; 0x02
     562:	6b 83       	std	Y+3, r22	; 0x03
     564:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
     56a:	8a 81       	ldd	r24, Y+2	; 0x02
     56c:	84 30       	cpi	r24, 0x04	; 4
     56e:	08 f0       	brcs	.+2      	; 0x572 <DIO_enuSetPINVAL+0x20>
     570:	d0 c0       	rjmp	.+416    	; 0x712 <DIO_enuSetPINVAL+0x1c0>
     572:	8b 81       	ldd	r24, Y+3	; 0x03
     574:	88 30       	cpi	r24, 0x08	; 8
     576:	08 f0       	brcs	.+2      	; 0x57a <DIO_enuSetPINVAL+0x28>
     578:	cc c0       	rjmp	.+408    	; 0x712 <DIO_enuSetPINVAL+0x1c0>
     57a:	8c 81       	ldd	r24, Y+4	; 0x04
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_enuSetPINVAL+0x30>
     580:	c8 c0       	rjmp	.+400    	; 0x712 <DIO_enuSetPINVAL+0x1c0>
		{

				switch(Copy_u8PortID)
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	28 2f       	mov	r18, r24
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	3e 83       	std	Y+6, r19	; 0x06
     58a:	2d 83       	std	Y+5, r18	; 0x05
     58c:	6d 81       	ldd	r22, Y+5	; 0x05
     58e:	7e 81       	ldd	r23, Y+6	; 0x06
     590:	61 30       	cpi	r22, 0x01	; 1
     592:	71 05       	cpc	r23, r1
     594:	09 f4       	brne	.+2      	; 0x598 <DIO_enuSetPINVAL+0x46>
     596:	41 c0       	rjmp	.+130    	; 0x61a <DIO_enuSetPINVAL+0xc8>
     598:	8d 81       	ldd	r24, Y+5	; 0x05
     59a:	9e 81       	ldd	r25, Y+6	; 0x06
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	91 05       	cpc	r25, r1
     5a0:	34 f4       	brge	.+12     	; 0x5ae <DIO_enuSetPINVAL+0x5c>
     5a2:	2d 81       	ldd	r18, Y+5	; 0x05
     5a4:	3e 81       	ldd	r19, Y+6	; 0x06
     5a6:	21 15       	cp	r18, r1
     5a8:	31 05       	cpc	r19, r1
     5aa:	71 f0       	breq	.+28     	; 0x5c8 <DIO_enuSetPINVAL+0x76>
     5ac:	b0 c0       	rjmp	.+352    	; 0x70e <DIO_enuSetPINVAL+0x1bc>
     5ae:	6d 81       	ldd	r22, Y+5	; 0x05
     5b0:	7e 81       	ldd	r23, Y+6	; 0x06
     5b2:	62 30       	cpi	r22, 0x02	; 2
     5b4:	71 05       	cpc	r23, r1
     5b6:	09 f4       	brne	.+2      	; 0x5ba <DIO_enuSetPINVAL+0x68>
     5b8:	59 c0       	rjmp	.+178    	; 0x66c <DIO_enuSetPINVAL+0x11a>
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	9e 81       	ldd	r25, Y+6	; 0x06
     5be:	83 30       	cpi	r24, 0x03	; 3
     5c0:	91 05       	cpc	r25, r1
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <DIO_enuSetPINVAL+0x74>
     5c4:	7c c0       	rjmp	.+248    	; 0x6be <DIO_enuSetPINVAL+0x16c>
     5c6:	a3 c0       	rjmp	.+326    	; 0x70e <DIO_enuSetPINVAL+0x1bc>
				{
					case DIO_PORTA:
								PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     5c8:	ab e3       	ldi	r26, 0x3B	; 59
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	eb e3       	ldi	r30, 0x3B	; 59
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	48 2f       	mov	r20, r24
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	28 2f       	mov	r18, r24
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_enuSetPINVAL+0x92>
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	2a 95       	dec	r18
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_enuSetPINVAL+0x8e>
     5e8:	80 95       	com	r24
     5ea:	84 23       	and	r24, r20
     5ec:	8c 93       	st	X, r24
								PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     5ee:	ab e3       	ldi	r26, 0x3B	; 59
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	eb e3       	ldi	r30, 0x3B	; 59
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	48 2f       	mov	r20, r24
     5fa:	8c 81       	ldd	r24, Y+4	; 0x04
     5fc:	28 2f       	mov	r18, r24
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	b9 01       	movw	r22, r18
     608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_enuSetPINVAL+0xbc>
     60a:	66 0f       	add	r22, r22
     60c:	77 1f       	adc	r23, r23
     60e:	8a 95       	dec	r24
     610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_enuSetPINVAL+0xb8>
     612:	cb 01       	movw	r24, r22
     614:	84 2b       	or	r24, r20
     616:	8c 93       	st	X, r24
     618:	7a c0       	rjmp	.+244    	; 0x70e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTB:
								PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     61a:	a8 e3       	ldi	r26, 0x38	; 56
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	e8 e3       	ldi	r30, 0x38	; 56
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	48 2f       	mov	r20, r24
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	28 2f       	mov	r18, r24
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_enuSetPINVAL+0xe4>
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	2a 95       	dec	r18
     638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_enuSetPINVAL+0xe0>
     63a:	80 95       	com	r24
     63c:	84 23       	and	r24, r20
     63e:	8c 93       	st	X, r24
								PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     640:	a8 e3       	ldi	r26, 0x38	; 56
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	e8 e3       	ldi	r30, 0x38	; 56
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	48 2f       	mov	r20, r24
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	28 2f       	mov	r18, r24
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	88 2f       	mov	r24, r24
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	b9 01       	movw	r22, r18
     65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_enuSetPINVAL+0x10e>
     65c:	66 0f       	add	r22, r22
     65e:	77 1f       	adc	r23, r23
     660:	8a 95       	dec	r24
     662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_enuSetPINVAL+0x10a>
     664:	cb 01       	movw	r24, r22
     666:	84 2b       	or	r24, r20
     668:	8c 93       	st	X, r24
     66a:	51 c0       	rjmp	.+162    	; 0x70e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTC:
								PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     66c:	a5 e3       	ldi	r26, 0x35	; 53
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	e5 e3       	ldi	r30, 0x35	; 53
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	48 2f       	mov	r20, r24
     678:	8b 81       	ldd	r24, Y+3	; 0x03
     67a:	28 2f       	mov	r18, r24
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_enuSetPINVAL+0x136>
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	2a 95       	dec	r18
     68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_enuSetPINVAL+0x132>
     68c:	80 95       	com	r24
     68e:	84 23       	and	r24, r20
     690:	8c 93       	st	X, r24
								PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     692:	a5 e3       	ldi	r26, 0x35	; 53
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	e5 e3       	ldi	r30, 0x35	; 53
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	48 2f       	mov	r20, r24
     69e:	8c 81       	ldd	r24, Y+4	; 0x04
     6a0:	28 2f       	mov	r18, r24
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	b9 01       	movw	r22, r18
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_enuSetPINVAL+0x160>
     6ae:	66 0f       	add	r22, r22
     6b0:	77 1f       	adc	r23, r23
     6b2:	8a 95       	dec	r24
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_enuSetPINVAL+0x15c>
     6b6:	cb 01       	movw	r24, r22
     6b8:	84 2b       	or	r24, r20
     6ba:	8c 93       	st	X, r24
     6bc:	28 c0       	rjmp	.+80     	; 0x70e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTD:
								PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     6be:	a2 e3       	ldi	r26, 0x32	; 50
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	e2 e3       	ldi	r30, 0x32	; 50
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	48 2f       	mov	r20, r24
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_enuSetPINVAL+0x188>
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	2a 95       	dec	r18
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_enuSetPINVAL+0x184>
     6de:	80 95       	com	r24
     6e0:	84 23       	and	r24, r20
     6e2:	8c 93       	st	X, r24
								PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     6e4:	a2 e3       	ldi	r26, 0x32	; 50
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	e2 e3       	ldi	r30, 0x32	; 50
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	48 2f       	mov	r20, r24
     6f0:	8c 81       	ldd	r24, Y+4	; 0x04
     6f2:	28 2f       	mov	r18, r24
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	b9 01       	movw	r22, r18
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_enuSetPINVAL+0x1b2>
     700:	66 0f       	add	r22, r22
     702:	77 1f       	adc	r23, r23
     704:	8a 95       	dec	r24
     706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_enuSetPINVAL+0x1ae>
     708:	cb 01       	movw	r24, r22
     70a:	84 2b       	or	r24, r20
     70c:	8c 93       	st	X, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
     70e:	19 82       	std	Y+1, r1	; 0x01
     710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_enuSetPINVAL+0x1c4>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorStates;
     716:	89 81       	ldd	r24, Y+1	; 0x01
}
     718:	26 96       	adiw	r28, 0x06	; 6
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	cf 91       	pop	r28
     726:	df 91       	pop	r29
     728:	08 95       	ret

0000072a <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
     72a:	df 93       	push	r29
     72c:	cf 93       	push	r28
     72e:	00 d0       	rcall	.+0      	; 0x730 <DIO_enuToggelPIN+0x6>
     730:	00 d0       	rcall	.+0      	; 0x732 <DIO_enuToggelPIN+0x8>
     732:	0f 92       	push	r0
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	8a 83       	std	Y+2, r24	; 0x02
     73a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	84 30       	cpi	r24, 0x04	; 4
     744:	08 f0       	brcs	.+2      	; 0x748 <DIO_enuToggelPIN+0x1e>
     746:	74 c0       	rjmp	.+232    	; 0x830 <DIO_enuToggelPIN+0x106>
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	88 30       	cpi	r24, 0x08	; 8
     74c:	08 f0       	brcs	.+2      	; 0x750 <DIO_enuToggelPIN+0x26>
     74e:	70 c0       	rjmp	.+224    	; 0x830 <DIO_enuToggelPIN+0x106>
			{

					switch(Copy_u8PortID)
     750:	8a 81       	ldd	r24, Y+2	; 0x02
     752:	28 2f       	mov	r18, r24
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	3d 83       	std	Y+5, r19	; 0x05
     758:	2c 83       	std	Y+4, r18	; 0x04
     75a:	8c 81       	ldd	r24, Y+4	; 0x04
     75c:	9d 81       	ldd	r25, Y+5	; 0x05
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	91 05       	cpc	r25, r1
     762:	49 f1       	breq	.+82     	; 0x7b6 <DIO_enuToggelPIN+0x8c>
     764:	2c 81       	ldd	r18, Y+4	; 0x04
     766:	3d 81       	ldd	r19, Y+5	; 0x05
     768:	22 30       	cpi	r18, 0x02	; 2
     76a:	31 05       	cpc	r19, r1
     76c:	2c f4       	brge	.+10     	; 0x778 <DIO_enuToggelPIN+0x4e>
     76e:	8c 81       	ldd	r24, Y+4	; 0x04
     770:	9d 81       	ldd	r25, Y+5	; 0x05
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	61 f0       	breq	.+24     	; 0x78e <DIO_enuToggelPIN+0x64>
     776:	5a c0       	rjmp	.+180    	; 0x82c <DIO_enuToggelPIN+0x102>
     778:	2c 81       	ldd	r18, Y+4	; 0x04
     77a:	3d 81       	ldd	r19, Y+5	; 0x05
     77c:	22 30       	cpi	r18, 0x02	; 2
     77e:	31 05       	cpc	r19, r1
     780:	71 f1       	breq	.+92     	; 0x7de <DIO_enuToggelPIN+0xb4>
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	9d 81       	ldd	r25, Y+5	; 0x05
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	91 05       	cpc	r25, r1
     78a:	e9 f1       	breq	.+122    	; 0x806 <DIO_enuToggelPIN+0xdc>
     78c:	4f c0       	rjmp	.+158    	; 0x82c <DIO_enuToggelPIN+0x102>
					{
						case DIO_PORTA:
									PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
     78e:	ab e3       	ldi	r26, 0x3B	; 59
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	eb e3       	ldi	r30, 0x3B	; 59
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	48 2f       	mov	r20, r24
     79a:	8b 81       	ldd	r24, Y+3	; 0x03
     79c:	28 2f       	mov	r18, r24
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	02 2e       	mov	r0, r18
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_enuToggelPIN+0x82>
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	0a 94       	dec	r0
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_enuToggelPIN+0x7e>
     7b0:	84 27       	eor	r24, r20
     7b2:	8c 93       	st	X, r24
     7b4:	3b c0       	rjmp	.+118    	; 0x82c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTB:
									PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
     7b6:	a8 e3       	ldi	r26, 0x38	; 56
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e8 e3       	ldi	r30, 0x38	; 56
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	48 2f       	mov	r20, r24
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	28 2f       	mov	r18, r24
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	02 2e       	mov	r0, r18
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_enuToggelPIN+0xaa>
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	0a 94       	dec	r0
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_enuToggelPIN+0xa6>
     7d8:	84 27       	eor	r24, r20
     7da:	8c 93       	st	X, r24
     7dc:	27 c0       	rjmp	.+78     	; 0x82c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTC:
									PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
     7de:	a5 e3       	ldi	r26, 0x35	; 53
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
     7e2:	e5 e3       	ldi	r30, 0x35	; 53
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	48 2f       	mov	r20, r24
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	28 2f       	mov	r18, r24
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	02 2e       	mov	r0, r18
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_enuToggelPIN+0xd2>
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	0a 94       	dec	r0
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_enuToggelPIN+0xce>
     800:	84 27       	eor	r24, r20
     802:	8c 93       	st	X, r24
     804:	13 c0       	rjmp	.+38     	; 0x82c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTD:
									PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
     806:	a2 e3       	ldi	r26, 0x32	; 50
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	e2 e3       	ldi	r30, 0x32	; 50
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	48 2f       	mov	r20, r24
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	28 2f       	mov	r18, r24
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	02 2e       	mov	r0, r18
     81e:	02 c0       	rjmp	.+4      	; 0x824 <DIO_enuToggelPIN+0xfa>
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	0a 94       	dec	r0
     826:	e2 f7       	brpl	.-8      	; 0x820 <DIO_enuToggelPIN+0xf6>
     828:	84 27       	eor	r24, r20
     82a:	8c 93       	st	X, r24
									break;
					}
					Local_enuErrorStates = ES_OK;
     82c:	19 82       	std	Y+1, r1	; 0x01
     82e:	02 c0       	rjmp	.+4      	; 0x834 <DIO_enuToggelPIN+0x10a>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorStates;
     834:	89 81       	ldd	r24, Y+1	; 0x01
}
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	cf 91       	pop	r28
     842:	df 91       	pop	r29
     844:	08 95       	ret

00000846 <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	27 97       	sbiw	r28, 0x07	; 7
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	8a 83       	std	Y+2, r24	; 0x02
     85c:	6b 83       	std	Y+3, r22	; 0x03
     85e:	5d 83       	std	Y+5, r21	; 0x05
     860:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
     866:	8c 81       	ldd	r24, Y+4	; 0x04
     868:	9d 81       	ldd	r25, Y+5	; 0x05
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	09 f4       	brne	.+2      	; 0x870 <__stack+0x11>
     86e:	7d c0       	rjmp	.+250    	; 0x96a <__stack+0x10b>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
     870:	8a 81       	ldd	r24, Y+2	; 0x02
     872:	84 30       	cpi	r24, 0x04	; 4
     874:	08 f0       	brcs	.+2      	; 0x878 <__stack+0x19>
     876:	76 c0       	rjmp	.+236    	; 0x964 <__stack+0x105>
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	88 30       	cpi	r24, 0x08	; 8
     87c:	08 f0       	brcs	.+2      	; 0x880 <__stack+0x21>
     87e:	72 c0       	rjmp	.+228    	; 0x964 <__stack+0x105>
		{

				switch(Copy_u8PortID)
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	3f 83       	std	Y+7, r19	; 0x07
     888:	2e 83       	std	Y+6, r18	; 0x06
     88a:	4e 81       	ldd	r20, Y+6	; 0x06
     88c:	5f 81       	ldd	r21, Y+7	; 0x07
     88e:	41 30       	cpi	r20, 0x01	; 1
     890:	51 05       	cpc	r21, r1
     892:	59 f1       	breq	.+86     	; 0x8ea <__stack+0x8b>
     894:	8e 81       	ldd	r24, Y+6	; 0x06
     896:	9f 81       	ldd	r25, Y+7	; 0x07
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	91 05       	cpc	r25, r1
     89c:	34 f4       	brge	.+12     	; 0x8aa <__stack+0x4b>
     89e:	2e 81       	ldd	r18, Y+6	; 0x06
     8a0:	3f 81       	ldd	r19, Y+7	; 0x07
     8a2:	21 15       	cp	r18, r1
     8a4:	31 05       	cpc	r19, r1
     8a6:	69 f0       	breq	.+26     	; 0x8c2 <__stack+0x63>
     8a8:	5b c0       	rjmp	.+182    	; 0x960 <__stack+0x101>
     8aa:	4e 81       	ldd	r20, Y+6	; 0x06
     8ac:	5f 81       	ldd	r21, Y+7	; 0x07
     8ae:	42 30       	cpi	r20, 0x02	; 2
     8b0:	51 05       	cpc	r21, r1
     8b2:	79 f1       	breq	.+94     	; 0x912 <__stack+0xb3>
     8b4:	8e 81       	ldd	r24, Y+6	; 0x06
     8b6:	9f 81       	ldd	r25, Y+7	; 0x07
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	91 05       	cpc	r25, r1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__stack+0x61>
     8be:	3d c0       	rjmp	.+122    	; 0x93a <__stack+0xdb>
     8c0:	4f c0       	rjmp	.+158    	; 0x960 <__stack+0x101>
				{
					case DIO_PORTA:
						*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
     8c2:	e9 e3       	ldi	r30, 0x39	; 57
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	28 2f       	mov	r18, r24
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	a9 01       	movw	r20, r18
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
     8d6:	55 95       	asr	r21
     8d8:	47 95       	ror	r20
     8da:	8a 95       	dec	r24
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
     8de:	ca 01       	movw	r24, r20
     8e0:	81 70       	andi	r24, 0x01	; 1
     8e2:	ec 81       	ldd	r30, Y+4	; 0x04
     8e4:	fd 81       	ldd	r31, Y+5	; 0x05
     8e6:	80 83       	st	Z, r24
     8e8:	3b c0       	rjmp	.+118    	; 0x960 <__stack+0x101>
								break;
					case DIO_PORTB:
						*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
     8ea:	e6 e3       	ldi	r30, 0x36	; 54
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	28 2f       	mov	r18, r24
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	88 2f       	mov	r24, r24
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	a9 01       	movw	r20, r18
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
     8fe:	55 95       	asr	r21
     900:	47 95       	ror	r20
     902:	8a 95       	dec	r24
     904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
     906:	ca 01       	movw	r24, r20
     908:	81 70       	andi	r24, 0x01	; 1
     90a:	ec 81       	ldd	r30, Y+4	; 0x04
     90c:	fd 81       	ldd	r31, Y+5	; 0x05
     90e:	80 83       	st	Z, r24
     910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x101>
								break;
					case DIO_PORTC:
						*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
     912:	e3 e3       	ldi	r30, 0x33	; 51
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a9 01       	movw	r20, r18
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0xcb>
     926:	55 95       	asr	r21
     928:	47 95       	ror	r20
     92a:	8a 95       	dec	r24
     92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0xc7>
     92e:	ca 01       	movw	r24, r20
     930:	81 70       	andi	r24, 0x01	; 1
     932:	ec 81       	ldd	r30, Y+4	; 0x04
     934:	fd 81       	ldd	r31, Y+5	; 0x05
     936:	80 83       	st	Z, r24
     938:	13 c0       	rjmp	.+38     	; 0x960 <__stack+0x101>
								break;
					case DIO_PORTD:
						*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
     93a:	e0 e3       	ldi	r30, 0x30	; 48
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	28 2f       	mov	r18, r24
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	88 2f       	mov	r24, r24
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a9 01       	movw	r20, r18
     94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0xf3>
     94e:	55 95       	asr	r21
     950:	47 95       	ror	r20
     952:	8a 95       	dec	r24
     954:	e2 f7       	brpl	.-8      	; 0x94e <__stack+0xef>
     956:	ca 01       	movw	r24, r20
     958:	81 70       	andi	r24, 0x01	; 1
     95a:	ec 81       	ldd	r30, Y+4	; 0x04
     95c:	fd 81       	ldd	r31, Y+5	; 0x05
     95e:	80 83       	st	Z, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
     960:	19 82       	std	Y+1, r1	; 0x01
     962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x10f>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     964:	83 e0       	ldi	r24, 0x03	; 3
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x10f>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     96e:	89 81       	ldd	r24, Y+1	; 0x01
}
     970:	27 96       	adiw	r28, 0x07	; 7
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	08 95       	ret

00000982 <LED_enuINIT>:
#include "errorStatuse.h"
#include"DIO_int.h"
#include "LED_config.h"
#include"LED_private.h"
ES_t LED_enuINIT(LED_t *Copy_AStr_LEDs)
{
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	27 97       	sbiw	r28, 0x07	; 7
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	9c 83       	std	Y+4, r25	; 0x04
     998:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_AStr_LEDs)
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	9c 81       	ldd	r25, Y+4	; 0x04
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <LED_enuINIT+0x26>
     9a6:	b7 c0       	rjmp	.+366    	; 0xb16 <LED_enuINIT+0x194>
	{
		u8 Local_u8Irerator ;
		for(Local_u8Irerator = 0;Local_u8Irerator<LED_NUMBER;Local_u8Irerator++)
     9a8:	19 82       	std	Y+1, r1	; 0x01
     9aa:	b0 c0       	rjmp	.+352    	; 0xb0c <LED_enuINIT+0x18a>
		{
			Local_enuErrorState = DIO_enuSetPINDir(Copy_AStr_LEDs[Local_u8Irerator].LED_u8PortID,Copy_AStr_LEDs[Local_u8Irerator].LED_u8PinID,DIO_OUTPUT);
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	88 2f       	mov	r24, r24
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	9c 01       	movw	r18, r24
     9b4:	22 0f       	add	r18, r18
     9b6:	33 1f       	adc	r19, r19
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	9c 81       	ldd	r25, Y+4	; 0x04
     9c0:	fc 01       	movw	r30, r24
     9c2:	e2 0f       	add	r30, r18
     9c4:	f3 1f       	adc	r31, r19
     9c6:	40 81       	ld	r20, Z
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	9c 01       	movw	r18, r24
     9d0:	22 0f       	add	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	22 0f       	add	r18, r18
     9d6:	33 1f       	adc	r19, r19
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	fc 01       	movw	r30, r24
     9de:	e2 0f       	add	r30, r18
     9e0:	f3 1f       	adc	r31, r19
     9e2:	91 81       	ldd	r25, Z+1	; 0x01
     9e4:	84 2f       	mov	r24, r20
     9e6:	69 2f       	mov	r22, r25
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPINDir>
     9ee:	8a 83       	std	Y+2, r24	; 0x02
			if(Copy_AStr_LEDs[Local_u8Irerator].LED_u8Connection == SINK)
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	88 2f       	mov	r24, r24
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	9c 01       	movw	r18, r24
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	8b 81       	ldd	r24, Y+3	; 0x03
     a02:	9c 81       	ldd	r25, Y+4	; 0x04
     a04:	fc 01       	movw	r30, r24
     a06:	e2 0f       	add	r30, r18
     a08:	f3 1f       	adc	r31, r19
     a0a:	82 81       	ldd	r24, Z+2	; 0x02
     a0c:	88 23       	and	r24, r24
     a0e:	c1 f5       	brne	.+112    	; 0xa80 <LED_enuINIT+0xfe>
			{
			Local_enuErrorState = DIO_enuSetPINVAL(Copy_AStr_LEDs[Local_u8Irerator].LED_u8PortID,Copy_AStr_LEDs[Local_u8Irerator].LED_u8PinID,!Copy_AStr_LEDs[Local_u8Irerator].LED_u8Val);
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9c 01       	movw	r18, r24
     a18:	22 0f       	add	r18, r18
     a1a:	33 1f       	adc	r19, r19
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	fc 01       	movw	r30, r24
     a26:	e2 0f       	add	r30, r18
     a28:	f3 1f       	adc	r31, r19
     a2a:	80 81       	ld	r24, Z
     a2c:	8f 83       	std	Y+7, r24	; 0x07
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	9c 01       	movw	r18, r24
     a36:	22 0f       	add	r18, r18
     a38:	33 1f       	adc	r19, r19
     a3a:	22 0f       	add	r18, r18
     a3c:	33 1f       	adc	r19, r19
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	9c 81       	ldd	r25, Y+4	; 0x04
     a42:	fc 01       	movw	r30, r24
     a44:	e2 0f       	add	r30, r18
     a46:	f3 1f       	adc	r31, r19
     a48:	81 81       	ldd	r24, Z+1	; 0x01
     a4a:	8e 83       	std	Y+6, r24	; 0x06
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	88 2f       	mov	r24, r24
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	9c 01       	movw	r18, r24
     a54:	22 0f       	add	r18, r18
     a56:	33 1f       	adc	r19, r19
     a58:	22 0f       	add	r18, r18
     a5a:	33 1f       	adc	r19, r19
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	fc 01       	movw	r30, r24
     a62:	e2 0f       	add	r30, r18
     a64:	f3 1f       	adc	r31, r19
     a66:	83 81       	ldd	r24, Z+3	; 0x03
     a68:	1d 82       	std	Y+5, r1	; 0x05
     a6a:	88 23       	and	r24, r24
     a6c:	11 f4       	brne	.+4      	; 0xa72 <LED_enuINIT+0xf0>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	8d 83       	std	Y+5, r24	; 0x05
     a72:	8f 81       	ldd	r24, Y+7	; 0x07
     a74:	6e 81       	ldd	r22, Y+6	; 0x06
     a76:	4d 81       	ldd	r20, Y+5	; 0x05
     a78:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
     a7c:	8a 83       	std	Y+2, r24	; 0x02
     a7e:	43 c0       	rjmp	.+134    	; 0xb06 <LED_enuINIT+0x184>
			}
			else if(Copy_AStr_LEDs[Local_u8Irerator].LED_u8Connection == SOURCE)
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	88 2f       	mov	r24, r24
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	9c 01       	movw	r18, r24
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
     a94:	fc 01       	movw	r30, r24
     a96:	e2 0f       	add	r30, r18
     a98:	f3 1f       	adc	r31, r19
     a9a:	82 81       	ldd	r24, Z+2	; 0x02
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	89 f5       	brne	.+98     	; 0xb02 <LED_enuINIT+0x180>
			{
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_AStr_LEDs[Local_u8Irerator].LED_u8PortID,Copy_AStr_LEDs[Local_u8Irerator].LED_u8PinID,Copy_AStr_LEDs[Local_u8Irerator].LED_u8Val);
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	9c 01       	movw	r18, r24
     aa8:	22 0f       	add	r18, r18
     aaa:	33 1f       	adc	r19, r19
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	fc 01       	movw	r30, r24
     ab6:	e2 0f       	add	r30, r18
     ab8:	f3 1f       	adc	r31, r19
     aba:	50 81       	ld	r21, Z
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	9c 01       	movw	r18, r24
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	9c 81       	ldd	r25, Y+4	; 0x04
     ad0:	fc 01       	movw	r30, r24
     ad2:	e2 0f       	add	r30, r18
     ad4:	f3 1f       	adc	r31, r19
     ad6:	41 81       	ldd	r20, Z+1	; 0x01
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	88 2f       	mov	r24, r24
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	9c 01       	movw	r18, r24
     ae0:	22 0f       	add	r18, r18
     ae2:	33 1f       	adc	r19, r19
     ae4:	22 0f       	add	r18, r18
     ae6:	33 1f       	adc	r19, r19
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	fc 01       	movw	r30, r24
     aee:	e2 0f       	add	r30, r18
     af0:	f3 1f       	adc	r31, r19
     af2:	93 81       	ldd	r25, Z+3	; 0x03
     af4:	85 2f       	mov	r24, r21
     af6:	64 2f       	mov	r22, r20
     af8:	49 2f       	mov	r20, r25
     afa:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
     afe:	8a 83       	std	Y+2, r24	; 0x02
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <LED_enuINIT+0x184>
			}
			else
			{
				Local_enuErrorState = ES_Out_Of_Range;
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_AStr_LEDs)
	{
		u8 Local_u8Irerator ;
		for(Local_u8Irerator = 0;Local_u8Irerator<LED_NUMBER;Local_u8Irerator++)
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	8f 5f       	subi	r24, 0xFF	; 255
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	83 30       	cpi	r24, 0x03	; 3
     b10:	08 f4       	brcc	.+2      	; 0xb14 <LED_enuINIT+0x192>
     b12:	4c cf       	rjmp	.-360    	; 0x9ac <LED_enuINIT+0x2a>
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <LED_enuINIT+0x198>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b1c:	27 96       	adiw	r28, 0x07	; 7
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	de bf       	out	0x3e, r29	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	cf 91       	pop	r28
     b2a:	df 91       	pop	r29
     b2c:	08 95       	ret

00000b2e <LED_enuSetState>:
ES_t LED_enuSetState(LED_t *Copy_A_LED,u8 Copy_u8Led_SVal)
{
     b2e:	df 93       	push	r29
     b30:	cf 93       	push	r28
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	27 97       	sbiw	r28, 0x07	; 7
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	9b 83       	std	Y+3, r25	; 0x03
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_A_LED)
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
     b4e:	9b 81       	ldd	r25, Y+3	; 0x03
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	71 f1       	breq	.+92     	; 0xbb0 <LED_enuSetState+0x82>
		{
			if(Copy_A_LED->LED_u8Connection == SINK)
     b54:	ea 81       	ldd	r30, Y+2	; 0x02
     b56:	fb 81       	ldd	r31, Y+3	; 0x03
     b58:	82 81       	ldd	r24, Z+2	; 0x02
     b5a:	88 23       	and	r24, r24
     b5c:	a9 f4       	brne	.+42     	; 0xb88 <LED_enuSetState+0x5a>
				{
					Local_enuErrorState = DIO_enuSetPINVAL(Copy_A_LED->LED_u8PortID,Copy_A_LED->LED_u8PinID,!Copy_u8Led_SVal);
     b5e:	ea 81       	ldd	r30, Y+2	; 0x02
     b60:	fb 81       	ldd	r31, Y+3	; 0x03
     b62:	80 81       	ld	r24, Z
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	ea 81       	ldd	r30, Y+2	; 0x02
     b68:	fb 81       	ldd	r31, Y+3	; 0x03
     b6a:	81 81       	ldd	r24, Z+1	; 0x01
     b6c:	8e 83       	std	Y+6, r24	; 0x06
     b6e:	1d 82       	std	Y+5, r1	; 0x05
     b70:	8c 81       	ldd	r24, Y+4	; 0x04
     b72:	88 23       	and	r24, r24
     b74:	11 f4       	brne	.+4      	; 0xb7a <LED_enuSetState+0x4c>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	8d 83       	std	Y+5, r24	; 0x05
     b7a:	8f 81       	ldd	r24, Y+7	; 0x07
     b7c:	6e 81       	ldd	r22, Y+6	; 0x06
     b7e:	4d 81       	ldd	r20, Y+5	; 0x05
     b80:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
     b84:	89 83       	std	Y+1, r24	; 0x01
     b86:	16 c0       	rjmp	.+44     	; 0xbb4 <LED_enuSetState+0x86>
				}
				else if(Copy_A_LED->LED_u8Connection == SOURCE)
     b88:	ea 81       	ldd	r30, Y+2	; 0x02
     b8a:	fb 81       	ldd	r31, Y+3	; 0x03
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	61 f4       	brne	.+24     	; 0xbaa <LED_enuSetState+0x7c>
				{
					Local_enuErrorState = DIO_enuSetPINVAL(Copy_A_LED->LED_u8PortID,Copy_A_LED->LED_u8PinID,Copy_u8Led_SVal);
     b92:	ea 81       	ldd	r30, Y+2	; 0x02
     b94:	fb 81       	ldd	r31, Y+3	; 0x03
     b96:	80 81       	ld	r24, Z
     b98:	ea 81       	ldd	r30, Y+2	; 0x02
     b9a:	fb 81       	ldd	r31, Y+3	; 0x03
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	69 2f       	mov	r22, r25
     ba0:	4c 81       	ldd	r20, Y+4	; 0x04
     ba2:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <LED_enuSetState+0x86>
				}
				else
				{
					Local_enuErrorState = ES_Out_Of_Range;
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <LED_enuSetState+0x86>
				}

		}
		else
		{
			Local_enuErrorState = ES_NULLPOINTER;
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     bb6:	27 96       	adiw	r28, 0x07	; 7
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <LED_enuSETUP>:


ES_t LED_enuSETUP(LED_t *Copy_StrLED,LED_t Copy_StrINFO)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	27 97       	sbiw	r28, 0x07	; 7
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	9b 83       	std	Y+3, r25	; 0x03
     bde:	8a 83       	std	Y+2, r24	; 0x02
     be0:	4c 83       	std	Y+4, r20	; 0x04
     be2:	5d 83       	std	Y+5, r21	; 0x05
     be4:	6e 83       	std	Y+6, r22	; 0x06
     be6:	7f 83       	std	Y+7, r23	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_StrLED)
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	9b 81       	ldd	r25, Y+3	; 0x03
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a9 f1       	breq	.+106    	; 0xc5e <LED_enuSETUP+0x96>
			{
				if(Copy_StrLED->LED_u8PortID <= DIO_u8PORTD &&
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	80 81       	ld	r24, Z
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	68 f5       	brcc	.+90     	; 0xc58 <LED_enuSETUP+0x90>
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	84 30       	cpi	r24, 0x04	; 4
     c02:	50 f5       	brcc	.+84     	; 0xc58 <LED_enuSETUP+0x90>
     c04:	ea 81       	ldd	r30, Y+2	; 0x02
     c06:	fb 81       	ldd	r31, Y+3	; 0x03
     c08:	81 81       	ldd	r24, Z+1	; 0x01
     c0a:	88 30       	cpi	r24, 0x08	; 8
     c0c:	28 f5       	brcc	.+74     	; 0xc58 <LED_enuSETUP+0x90>
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	88 30       	cpi	r24, 0x08	; 8
     c12:	10 f5       	brcc	.+68     	; 0xc58 <LED_enuSETUP+0x90>
     c14:	8e 81       	ldd	r24, Y+6	; 0x06
     c16:	88 23       	and	r24, r24
     c18:	19 f0       	breq	.+6      	; 0xc20 <LED_enuSETUP+0x58>
     c1a:	8e 81       	ldd	r24, Y+6	; 0x06
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	e1 f4       	brne	.+56     	; 0xc58 <LED_enuSETUP+0x90>
				   Copy_StrINFO.LED_u8PortID <= DIO_u8PORTD &&
				   Copy_StrLED->LED_u8PinID <= DIO_u8PIN7 &&
				   Copy_StrINFO.LED_u8PinID<= DIO_u8PIN7 &&
				   (Copy_StrINFO.LED_u8Connection == SINK || Copy_StrINFO.LED_u8Connection == SOURCE))
				{
					Local_enuErrorState = DIO_enuSetPINDir(Copy_StrINFO.LED_u8PortID,Copy_StrINFO.LED_u8PinID,DIO_OUTPUT);
     c20:	8c 81       	ldd	r24, Y+4	; 0x04
     c22:	9d 81       	ldd	r25, Y+5	; 0x05
     c24:	69 2f       	mov	r22, r25
     c26:	41 e0       	ldi	r20, 0x01	; 1
     c28:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPINDir>
     c2c:	89 83       	std	Y+1, r24	; 0x01
				Copy_StrLED->LED_u8PortID = Copy_StrINFO.LED_u8PortID;
     c2e:	8c 81       	ldd	r24, Y+4	; 0x04
     c30:	ea 81       	ldd	r30, Y+2	; 0x02
     c32:	fb 81       	ldd	r31, Y+3	; 0x03
     c34:	80 83       	st	Z, r24
				Copy_StrLED->LED_u8PinID = Copy_StrINFO.LED_u8PinID;
     c36:	8d 81       	ldd	r24, Y+5	; 0x05
     c38:	ea 81       	ldd	r30, Y+2	; 0x02
     c3a:	fb 81       	ldd	r31, Y+3	; 0x03
     c3c:	81 83       	std	Z+1, r24	; 0x01
				Copy_StrLED->LED_u8Connection = Copy_StrINFO.LED_u8Connection;
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	ea 81       	ldd	r30, Y+2	; 0x02
     c42:	fb 81       	ldd	r31, Y+3	; 0x03
     c44:	82 83       	std	Z+2, r24	; 0x02
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_StrINFO.LED_u8PortID,Copy_StrINFO.LED_u8PinID,Copy_StrINFO.LED_u8Val);
     c46:	8c 81       	ldd	r24, Y+4	; 0x04
     c48:	9d 81       	ldd	r25, Y+5	; 0x05
     c4a:	2f 81       	ldd	r18, Y+7	; 0x07
     c4c:	69 2f       	mov	r22, r25
     c4e:	42 2f       	mov	r20, r18
     c50:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <LED_enuSETUP+0x9a>

				}
				else
				{
					Local_enuErrorState = ES_Out_Of_Range;
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <LED_enuSETUP+0x9a>
				}

			}
			else
			{
				Local_enuErrorState = ES_NULLPOINTER;
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	89 83       	std	Y+1, r24	; 0x01
			}



			return Local_enuErrorState;
     c62:	89 81       	ldd	r24, Y+1	; 0x01
}
     c64:	27 96       	adiw	r28, 0x07	; 7
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <SW_enuINIT>:
#include"errorStatuse.h"
#include"DIO_int.h"
#include"SW_Config.h"
#include"SW_Private.h"
ES_t SW_enuINIT(SW_t * Copy_enuSWITCHs)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <SW_enuINIT+0x6>
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <SW_enuINIT+0x8>
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	9c 83       	std	Y+4, r25	; 0x04
     c84:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_enuSWITCHs)
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	9c 81       	ldd	r25, Y+4	; 0x04
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	09 f4       	brne	.+2      	; 0xc94 <SW_enuINIT+0x1e>
     c92:	5d c0       	rjmp	.+186    	; 0xd4e <SW_enuINIT+0xd8>
	{
		u8 iterator = 0;
     c94:	19 82       	std	Y+1, r1	; 0x01
		for(iterator = 0;iterator <= SW_u8SwNUMS;iterator++)
     c96:	19 82       	std	Y+1, r1	; 0x01
     c98:	55 c0       	rjmp	.+170    	; 0xd44 <SW_enuINIT+0xce>
		{
		Local_enuErrorState = DIO_enuSetPINDir(Copy_enuSWITCHs[iterator].SW_u8PortID,Copy_enuSWITCHs[iterator].SW_u8PinID,DIO_INPUT);
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	c9 01       	movw	r24, r18
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	28 0f       	add	r18, r24
     ca8:	39 1f       	adc	r19, r25
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	fc 01       	movw	r30, r24
     cb0:	e2 0f       	add	r30, r18
     cb2:	f3 1f       	adc	r31, r19
     cb4:	40 81       	ld	r20, Z
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	c9 01       	movw	r24, r18
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	28 0f       	add	r18, r24
     cc4:	39 1f       	adc	r19, r25
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	fc 01       	movw	r30, r24
     ccc:	e2 0f       	add	r30, r18
     cce:	f3 1f       	adc	r31, r19
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	84 2f       	mov	r24, r20
     cd4:	69 2f       	mov	r22, r25
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPINDir>
     cdc:	8a 83       	std	Y+2, r24	; 0x02
		Local_enuErrorState = DIO_enuSetPINVAL(Copy_enuSWITCHs[iterator].SW_u8PortID,Copy_enuSWITCHs[iterator].SW_u8PinID,Copy_enuSWITCHs[iterator].SW_u8SWconnection);
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	c9 01       	movw	r24, r18
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	28 0f       	add	r18, r24
     cec:	39 1f       	adc	r19, r25
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	fc 01       	movw	r30, r24
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	50 81       	ld	r21, Z
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	c9 01       	movw	r24, r18
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	28 0f       	add	r18, r24
     d08:	39 1f       	adc	r19, r25
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	fc 01       	movw	r30, r24
     d10:	e2 0f       	add	r30, r18
     d12:	f3 1f       	adc	r31, r19
     d14:	41 81       	ldd	r20, Z+1	; 0x01
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	c9 01       	movw	r24, r18
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	28 0f       	add	r18, r24
     d24:	39 1f       	adc	r19, r25
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	92 81       	ldd	r25, Z+2	; 0x02
     d32:	85 2f       	mov	r24, r21
     d34:	64 2f       	mov	r22, r20
     d36:	49 2f       	mov	r20, r25
     d38:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
     d3c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_enuSWITCHs)
	{
		u8 iterator = 0;
		for(iterator = 0;iterator <= SW_u8SwNUMS;iterator++)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	84 30       	cpi	r24, 0x04	; 4
     d48:	08 f4       	brcc	.+2      	; 0xd4c <SW_enuINIT+0xd6>
     d4a:	a7 cf       	rjmp	.-178    	; 0xc9a <SW_enuINIT+0x24>
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <SW_enuINIT+0xdc>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	8a 83       	std	Y+2, r24	; 0x02
	}



	return Local_enuErrorState;
     d52:	8a 81       	ldd	r24, Y+2	; 0x02

}
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <SW_enuSETUP>:
ES_t SW_enuSETUP(SW_t  *Copy_StrSWITCH,SW_t Copy_StrINFO)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <SW_enuSETUP+0x6>
     d68:	00 d0       	rcall	.+0      	; 0xd6a <SW_enuSETUP+0x8>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <SW_enuSETUP+0xa>
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	9b 83       	std	Y+3, r25	; 0x03
     d72:	8a 83       	std	Y+2, r24	; 0x02
     d74:	4c 83       	std	Y+4, r20	; 0x04
     d76:	5d 83       	std	Y+5, r21	; 0x05
     d78:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_StrSWITCH)
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	69 f1       	breq	.+90     	; 0xde0 <SW_enuSETUP+0x7e>
		{
			if(Copy_StrSWITCH->SW_u8PortID <= DIO_u8PORTD &&
     d86:	ea 81       	ldd	r30, Y+2	; 0x02
     d88:	fb 81       	ldd	r31, Y+3	; 0x03
     d8a:	80 81       	ld	r24, Z
     d8c:	84 30       	cpi	r24, 0x04	; 4
     d8e:	28 f5       	brcc	.+74     	; 0xdda <SW_enuSETUP+0x78>
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	84 30       	cpi	r24, 0x04	; 4
     d94:	10 f5       	brcc	.+68     	; 0xdda <SW_enuSETUP+0x78>
     d96:	ea 81       	ldd	r30, Y+2	; 0x02
     d98:	fb 81       	ldd	r31, Y+3	; 0x03
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	88 30       	cpi	r24, 0x08	; 8
     d9e:	e8 f4       	brcc	.+58     	; 0xdda <SW_enuSETUP+0x78>
     da0:	8d 81       	ldd	r24, Y+5	; 0x05
     da2:	88 30       	cpi	r24, 0x08	; 8
     da4:	d0 f4       	brcc	.+52     	; 0xdda <SW_enuSETUP+0x78>
     da6:	8e 81       	ldd	r24, Y+6	; 0x06
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	19 f0       	breq	.+6      	; 0xdb2 <SW_enuSETUP+0x50>
     dac:	8e 81       	ldd	r24, Y+6	; 0x06
     dae:	88 23       	and	r24, r24
     db0:	a1 f4       	brne	.+40     	; 0xdda <SW_enuSETUP+0x78>
			   Copy_StrINFO.SW_u8PortID <= DIO_u8PORTD &&
			   Copy_StrSWITCH->SW_u8PinID <= DIO_u8PIN7 &&
			   Copy_StrINFO.SW_u8PinID<= DIO_u8PIN7 &&
			   (Copy_StrINFO.SW_u8SWconnection == DIO_PULLUP || Copy_StrINFO.SW_u8SWconnection == DIO_FLOAT))
			{
				Local_enuErrorState = DIO_enuSetPINDir(Copy_StrINFO.SW_u8PortID,Copy_StrINFO.SW_u8PinID,DIO_INPUT);
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	69 2f       	mov	r22, r25
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPINDir>
     dbe:	89 83       	std	Y+1, r24	; 0x01

			Copy_StrSWITCH->SW_u8PortID = Copy_StrINFO.SW_u8PortID;
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	ea 81       	ldd	r30, Y+2	; 0x02
     dc4:	fb 81       	ldd	r31, Y+3	; 0x03
     dc6:	80 83       	st	Z, r24
			Copy_StrSWITCH->SW_u8PinID = Copy_StrINFO.SW_u8PinID;
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	ea 81       	ldd	r30, Y+2	; 0x02
     dcc:	fb 81       	ldd	r31, Y+3	; 0x03
     dce:	81 83       	std	Z+1, r24	; 0x01
			Copy_StrSWITCH->SW_u8SWconnection = Copy_StrINFO.SW_u8SWconnection;
     dd0:	8e 81       	ldd	r24, Y+6	; 0x06
     dd2:	ea 81       	ldd	r30, Y+2	; 0x02
     dd4:	fb 81       	ldd	r31, Y+3	; 0x03
     dd6:	82 83       	std	Z+2, r24	; 0x02
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <SW_enuSETUP+0x82>

			}
			else
			{
				Local_enuErrorState = ES_Out_Of_Range;
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <SW_enuSETUP+0x82>
			}

		}
		else
		{
			Local_enuErrorState = ES_NULLPOINTER;
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	89 83       	std	Y+1, r24	; 0x01
		}



		return Local_enuErrorState;
     de4:	89 81       	ldd	r24, Y+1	; 0x01
}
     de6:	26 96       	adiw	r28, 0x06	; 6
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <SW_enuGetState>:
ES_t SW_enuGetState(SW_t  *Copy_StrSWITCH,u8 *Copy_u8SWVal)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <SW_enuGetState+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <SW_enuGetState+0x8>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <SW_enuGetState+0xa>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	9b 83       	std	Y+3, r25	; 0x03
     e08:	8a 83       	std	Y+2, r24	; 0x02
     e0a:	7d 83       	std	Y+5, r23	; 0x05
     e0c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_StrSWITCH)
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	9b 81       	ldd	r25, Y+3	; 0x03
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	f9 f0       	breq	.+62     	; 0xe58 <SW_enuGetState+0x60>
			{
				Local_enuErrorState = DIO_enuGetPINVAL(Copy_StrSWITCH->SW_u8PortID,Copy_StrSWITCH->SW_u8PinID,Copy_u8SWVal);
     e1a:	ea 81       	ldd	r30, Y+2	; 0x02
     e1c:	fb 81       	ldd	r31, Y+3	; 0x03
     e1e:	80 81       	ld	r24, Z
     e20:	ea 81       	ldd	r30, Y+2	; 0x02
     e22:	fb 81       	ldd	r31, Y+3	; 0x03
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	2c 81       	ldd	r18, Y+4	; 0x04
     e28:	3d 81       	ldd	r19, Y+5	; 0x05
     e2a:	69 2f       	mov	r22, r25
     e2c:	a9 01       	movw	r20, r18
     e2e:	0e 94 23 04 	call	0x846	; 0x846 <DIO_enuGetPINVAL>
     e32:	89 83       	std	Y+1, r24	; 0x01
				if(Copy_StrSWITCH->SW_u8SWconnection == DIO_FLOAT)
     e34:	ea 81       	ldd	r30, Y+2	; 0x02
     e36:	fb 81       	ldd	r31, Y+3	; 0x03
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	88 23       	and	r24, r24
     e3c:	79 f4       	brne	.+30     	; 0xe5c <SW_enuGetState+0x64>
					*Copy_u8SWVal = ! *Copy_u8SWVal;
     e3e:	ec 81       	ldd	r30, Y+4	; 0x04
     e40:	fd 81       	ldd	r31, Y+5	; 0x05
     e42:	80 81       	ld	r24, Z
     e44:	1e 82       	std	Y+6, r1	; 0x06
     e46:	88 23       	and	r24, r24
     e48:	11 f4       	brne	.+4      	; 0xe4e <SW_enuGetState+0x56>
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8e 83       	std	Y+6, r24	; 0x06
     e4e:	ec 81       	ldd	r30, Y+4	; 0x04
     e50:	fd 81       	ldd	r31, Y+5	; 0x05
     e52:	8e 81       	ldd	r24, Y+6	; 0x06
     e54:	80 83       	st	Z, r24
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <SW_enuGetState+0x64>


			}
			else
			{
				Local_enuErrorState = ES_NULLPOINTER;
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	89 83       	std	Y+1, r24	; 0x01
			}



			return Local_enuErrorState;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5e:	26 96       	adiw	r28, 0x06	; 6
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <main>:
#include<util/delay.h>
extern SW_t Switches[SW_u8SwNUMS] ;
extern LED_t LEDsARR[LED_NUMBER] ;

int main()
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	ad 97       	sbiw	r28, 0x2d	; 45
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61

	SW_t SWitCH_0 = {DIO_u8PORTD,DIO_u8PIN0,DIO_PULLUP};
     e84:	9e 01       	movw	r18, r28
     e86:	2f 5f       	subi	r18, 0xFF	; 255
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	38 a3       	std	Y+32, r19	; 0x20
     e8c:	2f 8f       	std	Y+31, r18	; 0x1f
     e8e:	8b e7       	ldi	r24, 0x7B	; 123
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9a a3       	std	Y+34, r25	; 0x22
     e94:	89 a3       	std	Y+33, r24	; 0x21
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	9b a3       	std	Y+35, r25	; 0x23
     e9a:	e9 a1       	ldd	r30, Y+33	; 0x21
     e9c:	fa a1       	ldd	r31, Y+34	; 0x22
     e9e:	00 80       	ld	r0, Z
     ea0:	29 a1       	ldd	r18, Y+33	; 0x21
     ea2:	3a a1       	ldd	r19, Y+34	; 0x22
     ea4:	2f 5f       	subi	r18, 0xFF	; 255
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
     ea8:	3a a3       	std	Y+34, r19	; 0x22
     eaa:	29 a3       	std	Y+33, r18	; 0x21
     eac:	ef 8d       	ldd	r30, Y+31	; 0x1f
     eae:	f8 a1       	ldd	r31, Y+32	; 0x20
     eb0:	00 82       	st	Z, r0
     eb2:	2f 8d       	ldd	r18, Y+31	; 0x1f
     eb4:	38 a1       	ldd	r19, Y+32	; 0x20
     eb6:	2f 5f       	subi	r18, 0xFF	; 255
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	38 a3       	std	Y+32, r19	; 0x20
     ebc:	2f 8f       	std	Y+31, r18	; 0x1f
     ebe:	3b a1       	ldd	r19, Y+35	; 0x23
     ec0:	31 50       	subi	r19, 0x01	; 1
     ec2:	3b a3       	std	Y+35, r19	; 0x23
     ec4:	8b a1       	ldd	r24, Y+35	; 0x23
     ec6:	88 23       	and	r24, r24
     ec8:	41 f7       	brne	.-48     	; 0xe9a <main+0x2a>
	SW_t SWitCH_1 = {DIO_u8PORTC,DIO_u8PIN7,DIO_FLOAT};
     eca:	fe 01       	movw	r30, r28
     ecc:	34 96       	adiw	r30, 0x04	; 4
     ece:	fd a3       	std	Y+37, r31	; 0x25
     ed0:	ec a3       	std	Y+36, r30	; 0x24
     ed2:	28 e7       	ldi	r18, 0x78	; 120
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3f a3       	std	Y+39, r19	; 0x27
     ed8:	2e a3       	std	Y+38, r18	; 0x26
     eda:	33 e0       	ldi	r19, 0x03	; 3
     edc:	38 a7       	std	Y+40, r19	; 0x28
     ede:	ee a1       	ldd	r30, Y+38	; 0x26
     ee0:	ff a1       	ldd	r31, Y+39	; 0x27
     ee2:	00 80       	ld	r0, Z
     ee4:	2e a1       	ldd	r18, Y+38	; 0x26
     ee6:	3f a1       	ldd	r19, Y+39	; 0x27
     ee8:	2f 5f       	subi	r18, 0xFF	; 255
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	3f a3       	std	Y+39, r19	; 0x27
     eee:	2e a3       	std	Y+38, r18	; 0x26
     ef0:	ec a1       	ldd	r30, Y+36	; 0x24
     ef2:	fd a1       	ldd	r31, Y+37	; 0x25
     ef4:	00 82       	st	Z, r0
     ef6:	2c a1       	ldd	r18, Y+36	; 0x24
     ef8:	3d a1       	ldd	r19, Y+37	; 0x25
     efa:	2f 5f       	subi	r18, 0xFF	; 255
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	3d a3       	std	Y+37, r19	; 0x25
     f00:	2c a3       	std	Y+36, r18	; 0x24
     f02:	38 a5       	ldd	r19, Y+40	; 0x28
     f04:	31 50       	subi	r19, 0x01	; 1
     f06:	38 a7       	std	Y+40, r19	; 0x28
     f08:	88 a5       	ldd	r24, Y+40	; 0x28
     f0a:	88 23       	and	r24, r24
     f0c:	41 f7       	brne	.-48     	; 0xede <main+0x6e>
	SW_t SWitCH_2 = {DIO_u8PORTB,DIO_u8PIN4,DIO_PULLUP};
     f0e:	fe 01       	movw	r30, r28
     f10:	37 96       	adiw	r30, 0x07	; 7
     f12:	fa a7       	std	Y+42, r31	; 0x2a
     f14:	e9 a7       	std	Y+41, r30	; 0x29
     f16:	25 e7       	ldi	r18, 0x75	; 117
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3c a7       	std	Y+44, r19	; 0x2c
     f1c:	2b a7       	std	Y+43, r18	; 0x2b
     f1e:	33 e0       	ldi	r19, 0x03	; 3
     f20:	3d a7       	std	Y+45, r19	; 0x2d
     f22:	eb a5       	ldd	r30, Y+43	; 0x2b
     f24:	fc a5       	ldd	r31, Y+44	; 0x2c
     f26:	00 80       	ld	r0, Z
     f28:	2b a5       	ldd	r18, Y+43	; 0x2b
     f2a:	3c a5       	ldd	r19, Y+44	; 0x2c
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	3c a7       	std	Y+44, r19	; 0x2c
     f32:	2b a7       	std	Y+43, r18	; 0x2b
     f34:	e9 a5       	ldd	r30, Y+41	; 0x29
     f36:	fa a5       	ldd	r31, Y+42	; 0x2a
     f38:	00 82       	st	Z, r0
     f3a:	29 a5       	ldd	r18, Y+41	; 0x29
     f3c:	3a a5       	ldd	r19, Y+42	; 0x2a
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	3a a7       	std	Y+42, r19	; 0x2a
     f44:	29 a7       	std	Y+41, r18	; 0x29
     f46:	3d a5       	ldd	r19, Y+45	; 0x2d
     f48:	31 50       	subi	r19, 0x01	; 1
     f4a:	3d a7       	std	Y+45, r19	; 0x2d
     f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f4e:	88 23       	and	r24, r24
     f50:	41 f7       	brne	.-48     	; 0xf22 <main+0xb2>
	LED_t LED_0   = {DIO_u8PORTA,DIO_u8PIN3,LED_u8SINK,LED_u8ON};
     f52:	1a 86       	std	Y+10, r1	; 0x0a
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	8b 87       	std	Y+11, r24	; 0x0b
     f58:	1c 86       	std	Y+12, r1	; 0x0c
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	8d 87       	std	Y+13, r24	; 0x0d
	LED_t LED_1   = {DIO_u8PORTB,DIO_u8PIN1,LED_u8SOURCE,LED_u8OFF};
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	8e 87       	std	Y+14, r24	; 0x0e
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	8f 87       	std	Y+15, r24	; 0x0f
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	88 8b       	std	Y+16, r24	; 0x10
     f6a:	19 8a       	std	Y+17, r1	; 0x11
	LED_t LED_2   = {DIO_u8PORTC,DIO_u8PIN1,LED_u8SOURCE,LED_u8OFF};
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	8a 8b       	std	Y+18, r24	; 0x12
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	8b 8b       	std	Y+19, r24	; 0x13
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	8c 8b       	std	Y+20, r24	; 0x14
     f78:	1d 8a       	std	Y+21, r1	; 0x15
	DIO_enuInit();
     f7a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	SW_enuINIT(Switches);
     f7e:	8c e6       	ldi	r24, 0x6C	; 108
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 3b 06 	call	0xc76	; 0xc76 <SW_enuINIT>
	LED_enuINIT(LEDsARR);
     f86:	80 e6       	ldi	r24, 0x60	; 96
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 c1 04 	call	0x982	; 0x982 <LED_enuINIT>
	SW_enuSETUP(&Switches[0],SWitCH_0);
     f8e:	8c e6       	ldi	r24, 0x6C	; 108
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	49 81       	ldd	r20, Y+1	; 0x01
     f94:	5a 81       	ldd	r21, Y+2	; 0x02
     f96:	6b 81       	ldd	r22, Y+3	; 0x03
     f98:	0e 94 b1 06 	call	0xd62	; 0xd62 <SW_enuSETUP>
	SW_enuSETUP(&Switches[1],SWitCH_1);
     f9c:	8f e6       	ldi	r24, 0x6F	; 111
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	4c 81       	ldd	r20, Y+4	; 0x04
     fa2:	5d 81       	ldd	r21, Y+5	; 0x05
     fa4:	6e 81       	ldd	r22, Y+6	; 0x06
     fa6:	0e 94 b1 06 	call	0xd62	; 0xd62 <SW_enuSETUP>
	SW_enuSETUP(&Switches[2],SWitCH_2);
     faa:	82 e7       	ldi	r24, 0x72	; 114
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	4f 81       	ldd	r20, Y+7	; 0x07
     fb0:	58 85       	ldd	r21, Y+8	; 0x08
     fb2:	69 85       	ldd	r22, Y+9	; 0x09
     fb4:	0e 94 b1 06 	call	0xd62	; 0xd62 <SW_enuSETUP>
	LED_enuSETUP(&LEDsARR[0],LED_0);
     fb8:	80 e6       	ldi	r24, 0x60	; 96
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	2a 85       	ldd	r18, Y+10	; 0x0a
     fbe:	3b 85       	ldd	r19, Y+11	; 0x0b
     fc0:	4c 85       	ldd	r20, Y+12	; 0x0c
     fc2:	5d 85       	ldd	r21, Y+13	; 0x0d
     fc4:	ba 01       	movw	r22, r20
     fc6:	a9 01       	movw	r20, r18
     fc8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LED_enuSETUP>
	LED_enuSETUP(&LEDsARR[1],LED_1);
     fcc:	84 e6       	ldi	r24, 0x64	; 100
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	2e 85       	ldd	r18, Y+14	; 0x0e
     fd2:	3f 85       	ldd	r19, Y+15	; 0x0f
     fd4:	48 89       	ldd	r20, Y+16	; 0x10
     fd6:	59 89       	ldd	r21, Y+17	; 0x11
     fd8:	ba 01       	movw	r22, r20
     fda:	a9 01       	movw	r20, r18
     fdc:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LED_enuSETUP>
	LED_enuSETUP(&LEDsARR[2],LED_2);
     fe0:	88 e6       	ldi	r24, 0x68	; 104
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	2a 89       	ldd	r18, Y+18	; 0x12
     fe6:	3b 89       	ldd	r19, Y+19	; 0x13
     fe8:	4c 89       	ldd	r20, Y+20	; 0x14
     fea:	5d 89       	ldd	r21, Y+21	; 0x15
     fec:	ba 01       	movw	r22, r20
     fee:	a9 01       	movw	r20, r18
     ff0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LED_enuSETUP>

	u8 PressedKey_0 = SW_u8SwNPressed;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	8e 8b       	std	Y+22, r24	; 0x16
	u8 PressedKey_1 = SW_u8SwNPressed;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	8f 8b       	std	Y+23, r24	; 0x17
	u8 PressedKey_2 = SW_u8SwNPressed;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	88 8f       	std	Y+24, r24	; 0x18

	while(1)
	{

		SW_enuGetState(&Switches[0],&PressedKey_0);
    1000:	8c e6       	ldi	r24, 0x6C	; 108
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9e 01       	movw	r18, r28
    1006:	2a 5e       	subi	r18, 0xEA	; 234
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	b9 01       	movw	r22, r18
    100c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <SW_enuGetState>
		switch(PressedKey_0)
    1010:	8e 89       	ldd	r24, Y+22	; 0x16
    1012:	e8 2f       	mov	r30, r24
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	fe 8f       	std	Y+30, r31	; 0x1e
    1018:	ed 8f       	std	Y+29, r30	; 0x1d
    101a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    101c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    101e:	21 15       	cp	r18, r1
    1020:	31 05       	cpc	r19, r1
    1022:	31 f0       	breq	.+12     	; 0x1030 <main+0x1c0>
    1024:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1026:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	39 f0       	breq	.+14     	; 0x103c <main+0x1cc>
    102e:	0b c0       	rjmp	.+22     	; 0x1046 <main+0x1d6>
		{
		case SW_u8SwPressed:
			LED_enuSetState(&LEDsARR[0],LED_u8OFF);break;
    1030:	80 e6       	ldi	r24, 0x60	; 96
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	0e 94 97 05 	call	0xb2e	; 0xb2e <LED_enuSetState>
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <main+0x1d6>
		case SW_u8SwNPressed:
			LED_enuSetState(&LEDsARR[0],LED_u8ON);break;
    103c:	80 e6       	ldi	r24, 0x60	; 96
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	0e 94 97 05 	call	0xb2e	; 0xb2e <LED_enuSetState>
		}

		SW_enuGetState(&Switches[1],&PressedKey_1);
    1046:	8f e6       	ldi	r24, 0x6F	; 111
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9e 01       	movw	r18, r28
    104c:	29 5e       	subi	r18, 0xE9	; 233
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	b9 01       	movw	r22, r18
    1052:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <SW_enuGetState>
		switch(PressedKey_1)
    1056:	8f 89       	ldd	r24, Y+23	; 0x17
    1058:	e8 2f       	mov	r30, r24
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	fc 8f       	std	Y+28, r31	; 0x1c
    105e:	eb 8f       	std	Y+27, r30	; 0x1b
    1060:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1062:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1064:	21 15       	cp	r18, r1
    1066:	31 05       	cpc	r19, r1
    1068:	31 f0       	breq	.+12     	; 0x1076 <main+0x206>
    106a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	39 f0       	breq	.+14     	; 0x1082 <main+0x212>
    1074:	0b c0       	rjmp	.+22     	; 0x108c <main+0x21c>
		{
		case SW_u8SwPressed:
			LED_enuSetState(&LEDsARR[1],LED_u8ON);break;
    1076:	84 e6       	ldi	r24, 0x64	; 100
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	0e 94 97 05 	call	0xb2e	; 0xb2e <LED_enuSetState>
    1080:	05 c0       	rjmp	.+10     	; 0x108c <main+0x21c>
		case SW_u8SwNPressed:
			LED_enuSetState(&LEDsARR[1],LED_u8OFF);break;
    1082:	84 e6       	ldi	r24, 0x64	; 100
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	0e 94 97 05 	call	0xb2e	; 0xb2e <LED_enuSetState>
		}

		SW_enuGetState(&Switches[2],&PressedKey_2);
    108c:	82 e7       	ldi	r24, 0x72	; 114
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9e 01       	movw	r18, r28
    1092:	28 5e       	subi	r18, 0xE8	; 232
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	b9 01       	movw	r22, r18
    1098:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <SW_enuGetState>
		switch(PressedKey_2)
    109c:	88 8d       	ldd	r24, Y+24	; 0x18
    109e:	e8 2f       	mov	r30, r24
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	fa 8f       	std	Y+26, r31	; 0x1a
    10a4:	e9 8f       	std	Y+25, r30	; 0x19
    10a6:	29 8d       	ldd	r18, Y+25	; 0x19
    10a8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    10aa:	21 15       	cp	r18, r1
    10ac:	31 05       	cpc	r19, r1
    10ae:	31 f0       	breq	.+12     	; 0x10bc <main+0x24c>
    10b0:	89 8d       	ldd	r24, Y+25	; 0x19
    10b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	39 f0       	breq	.+14     	; 0x10c8 <main+0x258>
    10ba:	a2 cf       	rjmp	.-188    	; 0x1000 <main+0x190>
		{
		case SW_u8SwPressed:
			LED_enuSetState(&LEDsARR[2],LED_u8ON);break;
    10bc:	88 e6       	ldi	r24, 0x68	; 104
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	0e 94 97 05 	call	0xb2e	; 0xb2e <LED_enuSetState>
    10c6:	9c cf       	rjmp	.-200    	; 0x1000 <main+0x190>
		case SW_u8SwNPressed:
			LED_enuSetState(&LEDsARR[2],LED_u8OFF);break;
    10c8:	88 e6       	ldi	r24, 0x68	; 104
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	0e 94 97 05 	call	0xb2e	; 0xb2e <LED_enuSetState>
    10d2:	96 cf       	rjmp	.-212    	; 0x1000 <main+0x190>

000010d4 <_exit>:
    10d4:	f8 94       	cli

000010d6 <__stop_program>:
    10d6:	ff cf       	rjmp	.-2      	; 0x10d6 <__stop_program>
