
7Segment_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  000021b6  0000222a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bcc  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e02  00000000  00000000  00003e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000087d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009393  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <main>
      7a:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 be 10 	jmp	0x217c	; 0x217c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 be 10 	jmp	0x217c	; 0x217c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_enuInit>:
#include "DIO_Private.h"
#include "../LIB/StdTypes.h"
#include "../LIB/errorStatuse.h"

ES_t DIO_enuInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     b44:	ea e3       	ldi	r30, 0x3A	; 58
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	80 83       	st	Z, r24

	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     b4c:	e7 e3       	ldi	r30, 0x37	; 55
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	86 eb       	ldi	r24, 0xB6	; 182
     b52:	80 83       	st	Z, r24

	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     b54:	e4 e3       	ldi	r30, 0x34	; 52
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	86 eb       	ldi	r24, 0xB6	; 182
     b5a:	80 83       	st	Z, r24

	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     b5c:	e1 e3       	ldi	r30, 0x31	; 49
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	86 eb       	ldi	r24, 0xB6	; 182
     b62:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
     b64:	eb e3       	ldi	r30, 0x3B	; 59
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1

	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
     b6a:	e8 e3       	ldi	r30, 0x38	; 56
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8a e3       	ldi	r24, 0x3A	; 58
     b70:	80 83       	st	Z, r24

	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
     b72:	e5 e3       	ldi	r30, 0x35	; 53
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	8a e3       	ldi	r24, 0x3A	; 58
     b78:	80 83       	st	Z, r24

	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
     b7a:	e2 e3       	ldi	r30, 0x32	; 50
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	8a e3       	ldi	r24, 0x3A	; 58
     b80:	80 83       	st	Z, r24

	Local_enuErrorStates = ES_OK;
     b82:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorStates;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
}
     b86:	0f 90       	pop	r0
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <DIO_enuSetPortDir+0x6>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <DIO_enuSetPortDir+0x8>
     b96:	0f 92       	push	r0
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	8a 83       	std	Y+2, r24	; 0x02
     b9e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	84 30       	cpi	r24, 0x04	; 4
     ba8:	a0 f5       	brcc	.+104    	; 0xc12 <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	3d 83       	std	Y+5, r19	; 0x05
     bb2:	2c 83       	std	Y+4, r18	; 0x04
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	9d 81       	ldd	r25, Y+5	; 0x05
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 05       	cpc	r25, r1
     bbc:	d1 f0       	breq	.+52     	; 0xbf2 <DIO_enuSetPortDir+0x64>
     bbe:	2c 81       	ldd	r18, Y+4	; 0x04
     bc0:	3d 81       	ldd	r19, Y+5	; 0x05
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <DIO_enuSetPortDir+0x44>
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	9d 81       	ldd	r25, Y+5	; 0x05
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	61 f0       	breq	.+24     	; 0xbe8 <DIO_enuSetPortDir+0x5a>
     bd0:	1e c0       	rjmp	.+60     	; 0xc0e <DIO_enuSetPortDir+0x80>
     bd2:	2c 81       	ldd	r18, Y+4	; 0x04
     bd4:	3d 81       	ldd	r19, Y+5	; 0x05
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	81 f0       	breq	.+32     	; 0xbfc <DIO_enuSetPortDir+0x6e>
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	91 05       	cpc	r25, r1
     be4:	81 f0       	breq	.+32     	; 0xc06 <DIO_enuSetPortDir+0x78>
     be6:	13 c0       	rjmp	.+38     	; 0xc0e <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
			DDRA = Copy_u8PortValue;break;
     be8:	ea e3       	ldi	r30, 0x3A	; 58
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	80 83       	st	Z, r24
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
			DDRB = Copy_u8PortValue;break;
     bf2:	e7 e3       	ldi	r30, 0x37	; 55
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	80 83       	st	Z, r24
     bfa:	09 c0       	rjmp	.+18     	; 0xc0e <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
			DDRC= Copy_u8PortValue;break;
     bfc:	e4 e3       	ldi	r30, 0x34	; 52
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	80 83       	st	Z, r24
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
			DDRD = Copy_u8PortValue;break;
     c06:	e1 e3       	ldi	r30, 0x31	; 49
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
     c0e:	19 82       	std	Y+1, r1	; 0x01
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     c16:	89 81       	ldd	r24, Y+1	; 0x01
}
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <DIO_enuSetPortVAL+0x6>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <DIO_enuSetPortVAL+0x8>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	8a 83       	std	Y+2, r24	; 0x02
     c38:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	84 30       	cpi	r24, 0x04	; 4
     c42:	a0 f5       	brcc	.+104    	; 0xcac <DIO_enuSetPortVAL+0x84>
	{
		switch(Copy_u8PortID)
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	3d 83       	std	Y+5, r19	; 0x05
     c4c:	2c 83       	std	Y+4, r18	; 0x04
     c4e:	8c 81       	ldd	r24, Y+4	; 0x04
     c50:	9d 81       	ldd	r25, Y+5	; 0x05
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	91 05       	cpc	r25, r1
     c56:	d1 f0       	breq	.+52     	; 0xc8c <DIO_enuSetPortVAL+0x64>
     c58:	2c 81       	ldd	r18, Y+4	; 0x04
     c5a:	3d 81       	ldd	r19, Y+5	; 0x05
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	31 05       	cpc	r19, r1
     c60:	2c f4       	brge	.+10     	; 0xc6c <DIO_enuSetPortVAL+0x44>
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	9d 81       	ldd	r25, Y+5	; 0x05
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	61 f0       	breq	.+24     	; 0xc82 <DIO_enuSetPortVAL+0x5a>
     c6a:	1e c0       	rjmp	.+60     	; 0xca8 <DIO_enuSetPortVAL+0x80>
     c6c:	2c 81       	ldd	r18, Y+4	; 0x04
     c6e:	3d 81       	ldd	r19, Y+5	; 0x05
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	81 f0       	breq	.+32     	; 0xc96 <DIO_enuSetPortVAL+0x6e>
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	83 30       	cpi	r24, 0x03	; 3
     c7c:	91 05       	cpc	r25, r1
     c7e:	81 f0       	breq	.+32     	; 0xca0 <DIO_enuSetPortVAL+0x78>
     c80:	13 c0       	rjmp	.+38     	; 0xca8 <DIO_enuSetPortVAL+0x80>
		{
		case DIO_PORTA:
			PORTA = Copy_u8PortValue;break;
     c82:	eb e3       	ldi	r30, 0x3B	; 59
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	80 83       	st	Z, r24
     c8a:	0e c0       	rjmp	.+28     	; 0xca8 <DIO_enuSetPortVAL+0x80>
		case DIO_PORTB:
			PORTB = Copy_u8PortValue;break;
     c8c:	e8 e3       	ldi	r30, 0x38	; 56
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	80 83       	st	Z, r24
     c94:	09 c0       	rjmp	.+18     	; 0xca8 <DIO_enuSetPortVAL+0x80>
		case DIO_PORTC:
			PORTC= Copy_u8PortValue;break;
     c96:	e5 e3       	ldi	r30, 0x35	; 53
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	80 83       	st	Z, r24
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <DIO_enuSetPortVAL+0x80>
		case DIO_PORTD:
			PORTD = Copy_u8PortValue;break;
     ca0:	e2 e3       	ldi	r30, 0x32	; 50
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
     ca8:	19 82       	std	Y+1, r1	; 0x01
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_enuSetPortVAL+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <DIO_enuToggelPort+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <DIO_enuToggelPort+0x8>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <DIO_enuToggelPort+0x1a>
     cda:	40 c0       	rjmp	.+128    	; 0xd5c <DIO_enuToggelPort+0x9a>
	{
		switch(Copy_u8PortID)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	3c 83       	std	Y+4, r19	; 0x04
     ce4:	2b 83       	std	Y+3, r18	; 0x03
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	91 05       	cpc	r25, r1
     cee:	e9 f0       	breq	.+58     	; 0xd2a <DIO_enuToggelPort+0x68>
     cf0:	2b 81       	ldd	r18, Y+3	; 0x03
     cf2:	3c 81       	ldd	r19, Y+4	; 0x04
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	2c f4       	brge	.+10     	; 0xd04 <DIO_enuToggelPort+0x42>
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	61 f0       	breq	.+24     	; 0xd1a <DIO_enuToggelPort+0x58>
     d02:	2a c0       	rjmp	.+84     	; 0xd58 <DIO_enuToggelPort+0x96>
     d04:	2b 81       	ldd	r18, Y+3	; 0x03
     d06:	3c 81       	ldd	r19, Y+4	; 0x04
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	b1 f0       	breq	.+44     	; 0xd3a <DIO_enuToggelPort+0x78>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	83 30       	cpi	r24, 0x03	; 3
     d14:	91 05       	cpc	r25, r1
     d16:	c9 f0       	breq	.+50     	; 0xd4a <DIO_enuToggelPort+0x88>
     d18:	1f c0       	rjmp	.+62     	; 0xd58 <DIO_enuToggelPort+0x96>
		{
		case DIO_PORTA:
			PORTA = ~PORTA ;break;
     d1a:	ab e3       	ldi	r26, 0x3B	; 59
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	eb e3       	ldi	r30, 0x3B	; 59
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 95       	com	r24
     d26:	8c 93       	st	X, r24
     d28:	17 c0       	rjmp	.+46     	; 0xd58 <DIO_enuToggelPort+0x96>
		case DIO_PORTB:
			PORTB = ~PORTB ;break;
     d2a:	a8 e3       	ldi	r26, 0x38	; 56
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 e3       	ldi	r30, 0x38	; 56
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 95       	com	r24
     d36:	8c 93       	st	X, r24
     d38:	0f c0       	rjmp	.+30     	; 0xd58 <DIO_enuToggelPort+0x96>
		case DIO_PORTC:
			PORTC = ~PORTC ;break;
     d3a:	a5 e3       	ldi	r26, 0x35	; 53
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e5 e3       	ldi	r30, 0x35	; 53
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 95       	com	r24
     d46:	8c 93       	st	X, r24
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <DIO_enuToggelPort+0x96>
		case DIO_PORTD:
			PORTD = ~PORTD ;break;
     d4a:	a2 e3       	ldi	r26, 0x32	; 50
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e2 e3       	ldi	r30, 0x32	; 50
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 95       	com	r24
     d56:	8c 93       	st	X, r24
		}
		Local_enuErrorStates = ES_OK;
     d58:	19 82       	std	Y+1, r1	; 0x01
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_enuToggelPort+0x9e>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
     d60:	89 81       	ldd	r24, Y+1	; 0x01
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <DIO_enuGetPortVAL+0x6>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <DIO_enuGetPortVAL+0x8>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <DIO_enuGetPortVAL+0xa>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	7c 83       	std	Y+4, r23	; 0x04
     d82:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	09 f4       	brne	.+2      	; 0xd92 <DIO_enuGetPortVAL+0x22>
     d90:	42 c0       	rjmp	.+132    	; 0xe16 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	e0 f5       	brcc	.+120    	; 0xe10 <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3e 83       	std	Y+6, r19	; 0x06
     da0:	2d 83       	std	Y+5, r18	; 0x05
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	e1 f0       	breq	.+56     	; 0xde4 <DIO_enuGetPortVAL+0x74>
     dac:	2d 81       	ldd	r18, Y+5	; 0x05
     dae:	3e 81       	ldd	r19, Y+6	; 0x06
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	2c f4       	brge	.+10     	; 0xdc0 <DIO_enuGetPortVAL+0x50>
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	61 f0       	breq	.+24     	; 0xdd6 <DIO_enuGetPortVAL+0x66>
     dbe:	26 c0       	rjmp	.+76     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
     dc0:	2d 81       	ldd	r18, Y+5	; 0x05
     dc2:	3e 81       	ldd	r19, Y+6	; 0x06
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	a1 f0       	breq	.+40     	; 0xdf2 <DIO_enuGetPortVAL+0x82>
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	9e 81       	ldd	r25, Y+6	; 0x06
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	91 05       	cpc	r25, r1
     dd2:	b1 f0       	breq	.+44     	; 0xe00 <DIO_enuGetPortVAL+0x90>
     dd4:	1b c0       	rjmp	.+54     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
			{
			case DIO_PORTA:
				*Copy_Pu8Value = PINA ;break;
     dd6:	e9 e3       	ldi	r30, 0x39	; 57
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	eb 81       	ldd	r30, Y+3	; 0x03
     dde:	fc 81       	ldd	r31, Y+4	; 0x04
     de0:	80 83       	st	Z, r24
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
			case DIO_PORTB:
				*Copy_Pu8Value = PINB ;break;
     de4:	e6 e3       	ldi	r30, 0x36	; 54
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	eb 81       	ldd	r30, Y+3	; 0x03
     dec:	fc 81       	ldd	r31, Y+4	; 0x04
     dee:	80 83       	st	Z, r24
     df0:	0d c0       	rjmp	.+26     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
			case DIO_PORTC:
				*Copy_Pu8Value = PINC ;break;
     df2:	e3 e3       	ldi	r30, 0x33	; 51
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	80 83       	st	Z, r24
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
			case DIO_PORTD:
				*Copy_Pu8Value = PIND ;break;
     e00:	e0 e3       	ldi	r30, 0x30	; 48
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	eb 81       	ldd	r30, Y+3	; 0x03
     e08:	fc 81       	ldd	r31, Y+4	; 0x04
     e0a:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     e0c:	19 82       	std	Y+1, r1	; 0x01
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1c:	26 96       	adiw	r28, 0x06	; 6
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_enuSetPINDir+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_enuSetPINDir+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <DIO_enuSetPINDir+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	6b 83       	std	Y+3, r22	; 0x03
     e40:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	84 30       	cpi	r24, 0x04	; 4
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <DIO_enuSetPINDir+0x20>
     e4c:	d0 c0       	rjmp	.+416    	; 0xfee <DIO_enuSetPINDir+0x1c0>
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	08 f0       	brcs	.+2      	; 0xe56 <DIO_enuSetPINDir+0x28>
     e54:	cc c0       	rjmp	.+408    	; 0xfee <DIO_enuSetPINDir+0x1c0>
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	82 30       	cpi	r24, 0x02	; 2
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <DIO_enuSetPINDir+0x30>
     e5c:	c8 c0       	rjmp	.+400    	; 0xfee <DIO_enuSetPINDir+0x1c0>
	{

		switch(Copy_u8PortID)
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3e 83       	std	Y+6, r19	; 0x06
     e66:	2d 83       	std	Y+5, r18	; 0x05
     e68:	6d 81       	ldd	r22, Y+5	; 0x05
     e6a:	7e 81       	ldd	r23, Y+6	; 0x06
     e6c:	61 30       	cpi	r22, 0x01	; 1
     e6e:	71 05       	cpc	r23, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <DIO_enuSetPINDir+0x46>
     e72:	41 c0       	rjmp	.+130    	; 0xef6 <DIO_enuSetPINDir+0xc8>
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	91 05       	cpc	r25, r1
     e7c:	34 f4       	brge	.+12     	; 0xe8a <DIO_enuSetPINDir+0x5c>
     e7e:	2d 81       	ldd	r18, Y+5	; 0x05
     e80:	3e 81       	ldd	r19, Y+6	; 0x06
     e82:	21 15       	cp	r18, r1
     e84:	31 05       	cpc	r19, r1
     e86:	71 f0       	breq	.+28     	; 0xea4 <DIO_enuSetPINDir+0x76>
     e88:	b0 c0       	rjmp	.+352    	; 0xfea <DIO_enuSetPINDir+0x1bc>
     e8a:	6d 81       	ldd	r22, Y+5	; 0x05
     e8c:	7e 81       	ldd	r23, Y+6	; 0x06
     e8e:	62 30       	cpi	r22, 0x02	; 2
     e90:	71 05       	cpc	r23, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <DIO_enuSetPINDir+0x68>
     e94:	59 c0       	rjmp	.+178    	; 0xf48 <DIO_enuSetPINDir+0x11a>
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <DIO_enuSetPINDir+0x74>
     ea0:	7c c0       	rjmp	.+248    	; 0xf9a <DIO_enuSetPINDir+0x16c>
     ea2:	a3 c0       	rjmp	.+326    	; 0xfea <DIO_enuSetPINDir+0x1bc>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     ea4:	aa e3       	ldi	r26, 0x3A	; 58
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ea e3       	ldi	r30, 0x3A	; 58
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_enuSetPINDir+0x92>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	2a 95       	dec	r18
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_enuSetPINDir+0x8e>
     ec4:	80 95       	com	r24
     ec6:	84 23       	and	r24, r20
     ec8:	8c 93       	st	X, r24
			DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     eca:	aa e3       	ldi	r26, 0x3A	; 58
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ea e3       	ldi	r30, 0x3A	; 58
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	b9 01       	movw	r22, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_enuSetPINDir+0xbc>
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	8a 95       	dec	r24
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_enuSetPINDir+0xb8>
     eee:	cb 01       	movw	r24, r22
     ef0:	84 2b       	or	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	7a c0       	rjmp	.+244    	; 0xfea <DIO_enuSetPINDir+0x1bc>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     ef6:	a7 e3       	ldi	r26, 0x37	; 55
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e7 e3       	ldi	r30, 0x37	; 55
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_enuSetPINDir+0xe4>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	2a 95       	dec	r18
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_enuSetPINDir+0xe0>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
			DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     f1c:	a7 e3       	ldi	r26, 0x37	; 55
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e3       	ldi	r30, 0x37	; 55
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	b9 01       	movw	r22, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_enuSetPINDir+0x10e>
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	8a 95       	dec	r24
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_enuSetPINDir+0x10a>
     f40:	cb 01       	movw	r24, r22
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	51 c0       	rjmp	.+162    	; 0xfea <DIO_enuSetPINDir+0x1bc>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     f48:	a4 e3       	ldi	r26, 0x34	; 52
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e4 e3       	ldi	r30, 0x34	; 52
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_enuSetPINDir+0x136>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	2a 95       	dec	r18
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_enuSetPINDir+0x132>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
			DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     f6e:	a4 e3       	ldi	r26, 0x34	; 52
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e4 e3       	ldi	r30, 0x34	; 52
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	b9 01       	movw	r22, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_enuSetPINDir+0x160>
     f8a:	66 0f       	add	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	8a 95       	dec	r24
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_enuSetPINDir+0x15c>
     f92:	cb 01       	movw	r24, r22
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	28 c0       	rjmp	.+80     	; 0xfea <DIO_enuSetPINDir+0x1bc>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     f9a:	a1 e3       	ldi	r26, 0x31	; 49
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e1 e3       	ldi	r30, 0x31	; 49
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_enuSetPINDir+0x188>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	2a 95       	dec	r18
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_enuSetPINDir+0x184>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
			DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     fc0:	a1 e3       	ldi	r26, 0x31	; 49
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e3       	ldi	r30, 0x31	; 49
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	b9 01       	movw	r22, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_enuSetPINDir+0x1b2>
     fdc:	66 0f       	add	r22, r22
     fde:	77 1f       	adc	r23, r23
     fe0:	8a 95       	dec	r24
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_enuSetPINDir+0x1ae>
     fe4:	cb 01       	movw	r24, r22
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorStates = ES_OK;
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff4:	26 96       	adiw	r28, 0x06	; 6
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <DIO_enuSetPINVAL+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_enuSetPINVAL+0x8>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <DIO_enuSetPINVAL+0xa>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	6b 83       	std	Y+3, r22	; 0x03
    1018:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	08 f0       	brcs	.+2      	; 0x1026 <DIO_enuSetPINVAL+0x20>
    1024:	d0 c0       	rjmp	.+416    	; 0x11c6 <DIO_enuSetPINVAL+0x1c0>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	08 f0       	brcs	.+2      	; 0x102e <DIO_enuSetPINVAL+0x28>
    102c:	cc c0       	rjmp	.+408    	; 0x11c6 <DIO_enuSetPINVAL+0x1c0>
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	08 f0       	brcs	.+2      	; 0x1036 <DIO_enuSetPINVAL+0x30>
    1034:	c8 c0       	rjmp	.+400    	; 0x11c6 <DIO_enuSetPINVAL+0x1c0>
	{

		switch(Copy_u8PortID)
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3e 83       	std	Y+6, r19	; 0x06
    103e:	2d 83       	std	Y+5, r18	; 0x05
    1040:	6d 81       	ldd	r22, Y+5	; 0x05
    1042:	7e 81       	ldd	r23, Y+6	; 0x06
    1044:	61 30       	cpi	r22, 0x01	; 1
    1046:	71 05       	cpc	r23, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <DIO_enuSetPINVAL+0x46>
    104a:	41 c0       	rjmp	.+130    	; 0x10ce <DIO_enuSetPINVAL+0xc8>
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	91 05       	cpc	r25, r1
    1054:	34 f4       	brge	.+12     	; 0x1062 <DIO_enuSetPINVAL+0x5c>
    1056:	2d 81       	ldd	r18, Y+5	; 0x05
    1058:	3e 81       	ldd	r19, Y+6	; 0x06
    105a:	21 15       	cp	r18, r1
    105c:	31 05       	cpc	r19, r1
    105e:	71 f0       	breq	.+28     	; 0x107c <DIO_enuSetPINVAL+0x76>
    1060:	b0 c0       	rjmp	.+352    	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
    1062:	6d 81       	ldd	r22, Y+5	; 0x05
    1064:	7e 81       	ldd	r23, Y+6	; 0x06
    1066:	62 30       	cpi	r22, 0x02	; 2
    1068:	71 05       	cpc	r23, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <DIO_enuSetPINVAL+0x68>
    106c:	59 c0       	rjmp	.+178    	; 0x1120 <DIO_enuSetPINVAL+0x11a>
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <DIO_enuSetPINVAL+0x74>
    1078:	7c c0       	rjmp	.+248    	; 0x1172 <DIO_enuSetPINVAL+0x16c>
    107a:	a3 c0       	rjmp	.+326    	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_enuSetPINVAL+0x92>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	2a 95       	dec	r18
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_enuSetPINVAL+0x8e>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
			PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    10a2:	ab e3       	ldi	r26, 0x3B	; 59
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e3       	ldi	r30, 0x3B	; 59
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	b9 01       	movw	r22, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_enuSetPINVAL+0xbc>
    10be:	66 0f       	add	r22, r22
    10c0:	77 1f       	adc	r23, r23
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_enuSetPINVAL+0xb8>
    10c6:	cb 01       	movw	r24, r22
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	7a c0       	rjmp	.+244    	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    10ce:	a8 e3       	ldi	r26, 0x38	; 56
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e8 e3       	ldi	r30, 0x38	; 56
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enuSetPINVAL+0xe4>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	2a 95       	dec	r18
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_enuSetPINVAL+0xe0>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
			PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    10f4:	a8 e3       	ldi	r26, 0x38	; 56
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	b9 01       	movw	r22, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_enuSetPINVAL+0x10e>
    1110:	66 0f       	add	r22, r22
    1112:	77 1f       	adc	r23, r23
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_enuSetPINVAL+0x10a>
    1118:	cb 01       	movw	r24, r22
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	51 c0       	rjmp	.+162    	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1120:	a5 e3       	ldi	r26, 0x35	; 53
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e3       	ldi	r30, 0x35	; 53
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_enuSetPINVAL+0x136>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	2a 95       	dec	r18
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_enuSetPINVAL+0x132>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
			PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1146:	a5 e3       	ldi	r26, 0x35	; 53
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	b9 01       	movw	r22, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_enuSetPINVAL+0x160>
    1162:	66 0f       	add	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_enuSetPINVAL+0x15c>
    116a:	cb 01       	movw	r24, r22
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	28 c0       	rjmp	.+80     	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1172:	a2 e3       	ldi	r26, 0x32	; 50
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e2 e3       	ldi	r30, 0x32	; 50
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_enuSetPINVAL+0x188>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	2a 95       	dec	r18
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_enuSetPINVAL+0x184>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
			PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1198:	a2 e3       	ldi	r26, 0x32	; 50
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e2 e3       	ldi	r30, 0x32	; 50
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	b9 01       	movw	r22, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_enuSetPINVAL+0x1b2>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_enuSetPINVAL+0x1ae>
    11bc:	cb 01       	movw	r24, r22
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorStates = ES_OK;
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_enuSetPINVAL+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	26 96       	adiw	r28, 0x06	; 6
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_enuToggelPIN+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_enuToggelPIN+0x8>
    11e6:	0f 92       	push	r0
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <DIO_enuToggelPIN+0x1e>
    11fa:	74 c0       	rjmp	.+232    	; 0x12e4 <DIO_enuToggelPIN+0x106>
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	08 f0       	brcs	.+2      	; 0x1204 <DIO_enuToggelPIN+0x26>
    1202:	70 c0       	rjmp	.+224    	; 0x12e4 <DIO_enuToggelPIN+0x106>
	{

		switch(Copy_u8PortID)
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3d 83       	std	Y+5, r19	; 0x05
    120c:	2c 83       	std	Y+4, r18	; 0x04
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	49 f1       	breq	.+82     	; 0x126a <DIO_enuToggelPIN+0x8c>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	2c f4       	brge	.+10     	; 0x122c <DIO_enuToggelPIN+0x4e>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	61 f0       	breq	.+24     	; 0x1242 <DIO_enuToggelPIN+0x64>
    122a:	5a c0       	rjmp	.+180    	; 0x12e0 <DIO_enuToggelPIN+0x102>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	71 f1       	breq	.+92     	; 0x1292 <DIO_enuToggelPIN+0xb4>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	91 05       	cpc	r25, r1
    123e:	e9 f1       	breq	.+122    	; 0x12ba <DIO_enuToggelPIN+0xdc>
    1240:	4f c0       	rjmp	.+158    	; 0x12e0 <DIO_enuToggelPIN+0x102>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
    1242:	ab e3       	ldi	r26, 0x3B	; 59
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e3       	ldi	r30, 0x3B	; 59
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_enuToggelPIN+0x82>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_enuToggelPIN+0x7e>
    1264:	84 27       	eor	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	3b c0       	rjmp	.+118    	; 0x12e0 <DIO_enuToggelPIN+0x102>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
    126a:	a8 e3       	ldi	r26, 0x38	; 56
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e8 e3       	ldi	r30, 0x38	; 56
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_enuToggelPIN+0xaa>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_enuToggelPIN+0xa6>
    128c:	84 27       	eor	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	27 c0       	rjmp	.+78     	; 0x12e0 <DIO_enuToggelPIN+0x102>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
    1292:	a5 e3       	ldi	r26, 0x35	; 53
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_enuToggelPIN+0xd2>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_enuToggelPIN+0xce>
    12b4:	84 27       	eor	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	13 c0       	rjmp	.+38     	; 0x12e0 <DIO_enuToggelPIN+0x102>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
    12ba:	a2 e3       	ldi	r26, 0x32	; 50
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enuToggelPIN+0xfa>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_enuToggelPIN+0xf6>
    12dc:	84 27       	eor	r24, r20
    12de:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorStates = ES_OK;
    12e0:	19 82       	std	Y+1, r1	; 0x01
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_enuToggelPIN+0x10a>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	27 97       	sbiw	r28, 0x07	; 7
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	6b 83       	std	Y+3, r22	; 0x03
    1312:	5d 83       	std	Y+5, r21	; 0x05
    1314:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	09 f4       	brne	.+2      	; 0x1324 <DIO_enuGetPINVAL+0x2a>
    1322:	7d c0       	rjmp	.+250    	; 0x141e <DIO_enuGetPINVAL+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	08 f0       	brcs	.+2      	; 0x132c <DIO_enuGetPINVAL+0x32>
    132a:	76 c0       	rjmp	.+236    	; 0x1418 <DIO_enuGetPINVAL+0x11e>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 30       	cpi	r24, 0x08	; 8
    1330:	08 f0       	brcs	.+2      	; 0x1334 <DIO_enuGetPINVAL+0x3a>
    1332:	72 c0       	rjmp	.+228    	; 0x1418 <DIO_enuGetPINVAL+0x11e>
		{

			switch(Copy_u8PortID)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3f 83       	std	Y+7, r19	; 0x07
    133c:	2e 83       	std	Y+6, r18	; 0x06
    133e:	4e 81       	ldd	r20, Y+6	; 0x06
    1340:	5f 81       	ldd	r21, Y+7	; 0x07
    1342:	41 30       	cpi	r20, 0x01	; 1
    1344:	51 05       	cpc	r21, r1
    1346:	59 f1       	breq	.+86     	; 0x139e <DIO_enuGetPINVAL+0xa4>
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	91 05       	cpc	r25, r1
    1350:	34 f4       	brge	.+12     	; 0x135e <DIO_enuGetPINVAL+0x64>
    1352:	2e 81       	ldd	r18, Y+6	; 0x06
    1354:	3f 81       	ldd	r19, Y+7	; 0x07
    1356:	21 15       	cp	r18, r1
    1358:	31 05       	cpc	r19, r1
    135a:	69 f0       	breq	.+26     	; 0x1376 <DIO_enuGetPINVAL+0x7c>
    135c:	5b c0       	rjmp	.+182    	; 0x1414 <DIO_enuGetPINVAL+0x11a>
    135e:	4e 81       	ldd	r20, Y+6	; 0x06
    1360:	5f 81       	ldd	r21, Y+7	; 0x07
    1362:	42 30       	cpi	r20, 0x02	; 2
    1364:	51 05       	cpc	r21, r1
    1366:	79 f1       	breq	.+94     	; 0x13c6 <DIO_enuGetPINVAL+0xcc>
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <DIO_enuGetPINVAL+0x7a>
    1372:	3d c0       	rjmp	.+122    	; 0x13ee <DIO_enuGetPINVAL+0xf4>
    1374:	4f c0       	rjmp	.+158    	; 0x1414 <DIO_enuGetPINVAL+0x11a>
			{
			case DIO_PORTA:
				*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
    1376:	e9 e3       	ldi	r30, 0x39	; 57
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_enuGetPINVAL+0x94>
    138a:	55 95       	asr	r21
    138c:	47 95       	ror	r20
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_enuGetPINVAL+0x90>
    1392:	ca 01       	movw	r24, r20
    1394:	81 70       	andi	r24, 0x01	; 1
    1396:	ec 81       	ldd	r30, Y+4	; 0x04
    1398:	fd 81       	ldd	r31, Y+5	; 0x05
    139a:	80 83       	st	Z, r24
    139c:	3b c0       	rjmp	.+118    	; 0x1414 <DIO_enuGetPINVAL+0x11a>
				break;
			case DIO_PORTB:
				*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
    139e:	e6 e3       	ldi	r30, 0x36	; 54
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a9 01       	movw	r20, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_enuGetPINVAL+0xbc>
    13b2:	55 95       	asr	r21
    13b4:	47 95       	ror	r20
    13b6:	8a 95       	dec	r24
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_enuGetPINVAL+0xb8>
    13ba:	ca 01       	movw	r24, r20
    13bc:	81 70       	andi	r24, 0x01	; 1
    13be:	ec 81       	ldd	r30, Y+4	; 0x04
    13c0:	fd 81       	ldd	r31, Y+5	; 0x05
    13c2:	80 83       	st	Z, r24
    13c4:	27 c0       	rjmp	.+78     	; 0x1414 <DIO_enuGetPINVAL+0x11a>
				break;
			case DIO_PORTC:
				*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
    13c6:	e3 e3       	ldi	r30, 0x33	; 51
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a9 01       	movw	r20, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_enuGetPINVAL+0xe4>
    13da:	55 95       	asr	r21
    13dc:	47 95       	ror	r20
    13de:	8a 95       	dec	r24
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_enuGetPINVAL+0xe0>
    13e2:	ca 01       	movw	r24, r20
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	ec 81       	ldd	r30, Y+4	; 0x04
    13e8:	fd 81       	ldd	r31, Y+5	; 0x05
    13ea:	80 83       	st	Z, r24
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <DIO_enuGetPINVAL+0x11a>
				break;
			case DIO_PORTD:
				*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
    13ee:	e0 e3       	ldi	r30, 0x30	; 48
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a9 01       	movw	r20, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_enuGetPINVAL+0x10c>
    1402:	55 95       	asr	r21
    1404:	47 95       	ror	r20
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_enuGetPINVAL+0x108>
    140a:	ca 01       	movw	r24, r20
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	ec 81       	ldd	r30, Y+4	; 0x04
    1410:	fd 81       	ldd	r31, Y+5	; 0x05
    1412:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorStates = ES_OK;
    1414:	19 82       	std	Y+1, r1	; 0x01
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <DIO_enuGetPINVAL+0x128>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_enuGetPINVAL+0x128>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    1422:	89 81       	ldd	r24, Y+1	; 0x01
}
    1424:	27 96       	adiw	r28, 0x07	; 7
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <SE7SEG_enuINIT>:

#include"SE7SEG_Private.h"
#include"SE7SEG_Config.h"

ES_t SE7SEG_enuINIT(SE7SEG_t *Copy_AStr_SE7SEG)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <SE7SEG_enuINIT+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <SE7SEG_enuINIT+0x8>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	9d 83       	std	Y+5, r25	; 0x05
    1446:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_AStr_SE7SEG)
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	09 f4       	brne	.+2      	; 0x1456 <SE7SEG_enuINIT+0x20>
    1454:	03 c1       	rjmp	.+518    	; 0x165c <SE7SEG_enuINIT+0x226>
	{
		for(u8 Local_u8Striterate = 0;Local_u8Striterate<SE7SEG_u8NUMBER;Local_u8Striterate++)
    1456:	1a 82       	std	Y+2, r1	; 0x02
    1458:	fc c0       	rjmp	.+504    	; 0x1652 <SE7SEG_enuINIT+0x21c>
		{
			for(u8 Local_u8Piniterate = 0;Local_u8Piniterate<SE7Pin_NUMBER;Local_u8Piniterate++)
    145a:	19 82       	std	Y+1, r1	; 0x01
    145c:	f3 c0       	rjmp	.+486    	; 0x1644 <SE7SEG_enuINIT+0x20e>
			{
				DIO_enuSetPINDir(Copy_AStr_SE7SEG[Local_u8Striterate].SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PortID,Copy_AStr_SE7SEG[Local_u8Striterate].SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PinID,DIO_OUTPUT);
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	c9 01       	movw	r24, r18
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	82 0f       	add	r24, r18
    146c:	93 1f       	adc	r25, r19
    146e:	9c 01       	movw	r18, r24
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	28 0f       	add	r18, r24
    147a:	39 1f       	adc	r19, r25
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	28 0f       	add	r18, r24
    1482:	39 1f       	adc	r19, r25
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	f9 01       	movw	r30, r18
    1490:	e8 0f       	add	r30, r24
    1492:	f9 1f       	adc	r31, r25
    1494:	40 81       	ld	r20, Z
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	c9 01       	movw	r24, r18
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	9c 01       	movw	r18, r24
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	28 0f       	add	r18, r24
    14b2:	39 1f       	adc	r19, r25
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	28 0f       	add	r18, r24
    14ba:	39 1f       	adc	r19, r25
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	82 0f       	add	r24, r18
    14c8:	93 1f       	adc	r25, r19
    14ca:	fc 01       	movw	r30, r24
    14cc:	31 96       	adiw	r30, 0x01	; 1
    14ce:	90 81       	ld	r25, Z
    14d0:	84 2f       	mov	r24, r20
    14d2:	69 2f       	mov	r22, r25
    14d4:	41 e0       	ldi	r20, 0x01	; 1
    14d6:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
				if(Copy_AStr_SE7SEG[Local_u8Striterate].SE7SEG_u8Connection == SE7SEG_Ccath)
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	c9 01       	movw	r24, r18
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	82 0f       	add	r24, r18
    14e8:	93 1f       	adc	r25, r19
    14ea:	9c 01       	movw	r18, r24
    14ec:	22 0f       	add	r18, r18
    14ee:	33 1f       	adc	r19, r19
    14f0:	22 0f       	add	r18, r18
    14f2:	33 1f       	adc	r19, r19
    14f4:	28 0f       	add	r18, r24
    14f6:	39 1f       	adc	r19, r25
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	fc 01       	movw	r30, r24
    14fe:	e2 0f       	add	r30, r18
    1500:	f3 1f       	adc	r31, r19
    1502:	86 85       	ldd	r24, Z+14	; 0x0e
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	09 f0       	breq	.+2      	; 0x150a <SE7SEG_enuINIT+0xd4>
    1508:	40 c0       	rjmp	.+128    	; 0x158a <SE7SEG_enuINIT+0x154>
					Local_enuErrorState = DIO_enuSetPINVAL(Copy_AStr_SE7SEG[Local_u8Striterate].SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PortID,Copy_AStr_SE7SEG[Local_u8Striterate].SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PinID,DIO_LOW);
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	c9 01       	movw	r24, r18
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	82 0f       	add	r24, r18
    1518:	93 1f       	adc	r25, r19
    151a:	9c 01       	movw	r18, r24
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	28 0f       	add	r18, r24
    1526:	39 1f       	adc	r19, r25
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	9d 81       	ldd	r25, Y+5	; 0x05
    152c:	28 0f       	add	r18, r24
    152e:	39 1f       	adc	r19, r25
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	f9 01       	movw	r30, r18
    153c:	e8 0f       	add	r30, r24
    153e:	f9 1f       	adc	r31, r25
    1540:	40 81       	ld	r20, Z
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	c9 01       	movw	r24, r18
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	82 0f       	add	r24, r18
    1550:	93 1f       	adc	r25, r19
    1552:	9c 01       	movw	r18, r24
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	22 0f       	add	r18, r18
    155a:	33 1f       	adc	r19, r19
    155c:	28 0f       	add	r18, r24
    155e:	39 1f       	adc	r19, r25
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	28 0f       	add	r18, r24
    1566:	39 1f       	adc	r19, r25
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	82 0f       	add	r24, r18
    1574:	93 1f       	adc	r25, r19
    1576:	fc 01       	movw	r30, r24
    1578:	31 96       	adiw	r30, 0x01	; 1
    157a:	90 81       	ld	r25, Z
    157c:	84 2f       	mov	r24, r20
    157e:	69 2f       	mov	r22, r25
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	5a c0       	rjmp	.+180    	; 0x163e <SE7SEG_enuINIT+0x208>
				else if(Copy_AStr_SE7SEG[Local_u8Striterate].SE7SEG_u8Connection == SE7SEG_CAnod)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	c9 01       	movw	r24, r18
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	82 0f       	add	r24, r18
    1598:	93 1f       	adc	r25, r19
    159a:	9c 01       	movw	r18, r24
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	28 0f       	add	r18, r24
    15a6:	39 1f       	adc	r19, r25
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	fc 01       	movw	r30, r24
    15ae:	e2 0f       	add	r30, r18
    15b0:	f3 1f       	adc	r31, r19
    15b2:	86 85       	ldd	r24, Z+14	; 0x0e
    15b4:	88 23       	and	r24, r24
    15b6:	09 f0       	breq	.+2      	; 0x15ba <SE7SEG_enuINIT+0x184>
    15b8:	40 c0       	rjmp	.+128    	; 0x163a <SE7SEG_enuINIT+0x204>
					Local_enuErrorState = DIO_enuSetPINVAL(Copy_AStr_SE7SEG[Local_u8Striterate].SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PortID,Copy_AStr_SE7SEG[Local_u8Striterate].SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PinID,DIO_HIGH);
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	c9 01       	movw	r24, r18
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	82 0f       	add	r24, r18
    15c8:	93 1f       	adc	r25, r19
    15ca:	9c 01       	movw	r18, r24
    15cc:	22 0f       	add	r18, r18
    15ce:	33 1f       	adc	r19, r19
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	28 0f       	add	r18, r24
    15d6:	39 1f       	adc	r19, r25
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	28 0f       	add	r18, r24
    15de:	39 1f       	adc	r19, r25
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	f9 01       	movw	r30, r18
    15ec:	e8 0f       	add	r30, r24
    15ee:	f9 1f       	adc	r31, r25
    15f0:	40 81       	ld	r20, Z
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	c9 01       	movw	r24, r18
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	82 0f       	add	r24, r18
    1600:	93 1f       	adc	r25, r19
    1602:	9c 01       	movw	r18, r24
    1604:	22 0f       	add	r18, r18
    1606:	33 1f       	adc	r19, r19
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	28 0f       	add	r18, r24
    160e:	39 1f       	adc	r19, r25
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	28 0f       	add	r18, r24
    1616:	39 1f       	adc	r19, r25
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	fc 01       	movw	r30, r24
    1628:	31 96       	adiw	r30, 0x01	; 1
    162a:	90 81       	ld	r25, Z
    162c:	84 2f       	mov	r24, r20
    162e:	69 2f       	mov	r22, r25
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1636:	8b 83       	std	Y+3, r24	; 0x03
    1638:	02 c0       	rjmp	.+4      	; 0x163e <SE7SEG_enuINIT+0x208>
				else
					Local_enuErrorState = ES_Out_Of_Range;
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_AStr_SE7SEG)
	{
		for(u8 Local_u8Striterate = 0;Local_u8Striterate<SE7SEG_u8NUMBER;Local_u8Striterate++)
		{
			for(u8 Local_u8Piniterate = 0;Local_u8Piniterate<SE7Pin_NUMBER;Local_u8Piniterate++)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	8f 5f       	subi	r24, 0xFF	; 255
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	87 30       	cpi	r24, 0x07	; 7
    1648:	08 f4       	brcc	.+2      	; 0x164c <SE7SEG_enuINIT+0x216>
    164a:	09 cf       	rjmp	.-494    	; 0x145e <SE7SEG_enuINIT+0x28>
{
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_AStr_SE7SEG)
	{
		for(u8 Local_u8Striterate = 0;Local_u8Striterate<SE7SEG_u8NUMBER;Local_u8Striterate++)
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	8f 5f       	subi	r24, 0xFF	; 255
    1650:	8a 83       	std	Y+2, r24	; 0x02
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	08 f4       	brcc	.+2      	; 0x165a <SE7SEG_enuINIT+0x224>
    1658:	00 cf       	rjmp	.-512    	; 0x145a <SE7SEG_enuINIT+0x24>
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <SE7SEG_enuINIT+0x22a>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	8b 83       	std	Y+3, r24	; 0x03
	}

	return  Local_enuErrorState;
    1660:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <SE7SEG_enuSetSE7SegVal>:
ES_t SE7SEG_enuSetSE7SegVal(SE7SEG_t *Copy_SE7SEG,u8 Copy_u8ValSE7)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	28 97       	sbiw	r28, 0x08	; 8
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
    168a:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_SE7SEG)
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	09 f4       	brne	.+2      	; 0x169a <SE7SEG_enuSetSE7SegVal+0x28>
    1698:	84 c0       	rjmp	.+264    	; 0x17a2 <SE7SEG_enuSetSE7SegVal+0x130>
	{
		u8 Local_u8Piniterate = 0;
    169a:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Piniterate = 0;Local_u8Piniterate<SE7Pin_NUMBER;Local_u8Piniterate++)
    169c:	19 82       	std	Y+1, r1	; 0x01
    169e:	7c c0       	rjmp	.+248    	; 0x1798 <SE7SEG_enuSetSE7SegVal+0x126>
		{
			if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_Ccath)
    16a0:	eb 81       	ldd	r30, Y+3	; 0x03
    16a2:	fc 81       	ldd	r31, Y+4	; 0x04
    16a4:	86 85       	ldd	r24, Z+14	; 0x0e
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	99 f5       	brne	.+102    	; 0x1710 <SE7SEG_enuSetSE7SegVal+0x9e>
			{

				Local_enuErrorState = DIO_enuSetPINVAL(Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PortID,Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PinID,((SE7SEG_u8NUMs[Copy_u8ValSE7]>>Local_u8Piniterate)&1));
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	2b 81       	ldd	r18, Y+3	; 0x03
    16b2:	3c 81       	ldd	r19, Y+4	; 0x04
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	f9 01       	movw	r30, r18
    16ba:	e8 0f       	add	r30, r24
    16bc:	f9 1f       	adc	r31, r25
    16be:	40 81       	ld	r20, Z
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	2b 81       	ldd	r18, Y+3	; 0x03
    16c8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	82 0f       	add	r24, r18
    16d0:	93 1f       	adc	r25, r19
    16d2:	fc 01       	movw	r30, r24
    16d4:	31 96       	adiw	r30, 0x01	; 1
    16d6:	50 81       	ld	r21, Z
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	88 2f       	mov	r24, r24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	fc 01       	movw	r30, r24
    16e0:	ea 57       	subi	r30, 0x7A	; 122
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	b9 01       	movw	r22, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <SE7SEG_enuSetSE7SegVal+0x86>
    16f4:	75 95       	asr	r23
    16f6:	67 95       	ror	r22
    16f8:	8a 95       	dec	r24
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <SE7SEG_enuSetSE7SegVal+0x82>
    16fc:	cb 01       	movw	r24, r22
    16fe:	98 2f       	mov	r25, r24
    1700:	91 70       	andi	r25, 0x01	; 1
    1702:	84 2f       	mov	r24, r20
    1704:	65 2f       	mov	r22, r21
    1706:	49 2f       	mov	r20, r25
    1708:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	41 c0       	rjmp	.+130    	; 0x1792 <SE7SEG_enuSetSE7SegVal+0x120>
			}
			else if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_CAnod)
    1710:	eb 81       	ldd	r30, Y+3	; 0x03
    1712:	fc 81       	ldd	r31, Y+4	; 0x04
    1714:	86 85       	ldd	r24, Z+14	; 0x0e
    1716:	88 23       	and	r24, r24
    1718:	d1 f5       	brne	.+116    	; 0x178e <SE7SEG_enuSetSE7SegVal+0x11c>
			{
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PortID,Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PinID,!((SE7SEG_u8NUMs[Copy_u8ValSE7]>>Local_u8Piniterate)&1));
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	2b 81       	ldd	r18, Y+3	; 0x03
    1722:	3c 81       	ldd	r19, Y+4	; 0x04
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	f9 01       	movw	r30, r18
    172a:	e8 0f       	add	r30, r24
    172c:	f9 1f       	adc	r31, r25
    172e:	70 81       	ld	r23, Z
    1730:	78 87       	std	Y+8, r23	; 0x08
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	2b 81       	ldd	r18, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	82 0f       	add	r24, r18
    1742:	93 1f       	adc	r25, r19
    1744:	fc 01       	movw	r30, r24
    1746:	31 96       	adiw	r30, 0x01	; 1
    1748:	80 81       	ld	r24, Z
    174a:	8f 83       	std	Y+7, r24	; 0x07
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	fc 01       	movw	r30, r24
    1754:	ea 57       	subi	r30, 0x7A	; 122
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 81       	ld	r24, Z
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a9 01       	movw	r20, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <SE7SEG_enuSetSE7SegVal+0xfa>
    1768:	55 95       	asr	r21
    176a:	47 95       	ror	r20
    176c:	8a 95       	dec	r24
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <SE7SEG_enuSetSE7SegVal+0xf6>
    1770:	ca 01       	movw	r24, r20
    1772:	81 70       	andi	r24, 0x01	; 1
    1774:	90 70       	andi	r25, 0x00	; 0
    1776:	1e 82       	std	Y+6, r1	; 0x06
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	11 f4       	brne	.+4      	; 0x1780 <SE7SEG_enuSetSE7SegVal+0x10e>
    177c:	51 e0       	ldi	r21, 0x01	; 1
    177e:	5e 83       	std	Y+6, r21	; 0x06
    1780:	88 85       	ldd	r24, Y+8	; 0x08
    1782:	6f 81       	ldd	r22, Y+7	; 0x07
    1784:	4e 81       	ldd	r20, Y+6	; 0x06
    1786:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <SE7SEG_enuSetSE7SegVal+0x120>
			}
			else
				Local_enuErrorState = ES_Out_Of_Range;
    178e:	83 e0       	ldi	r24, 0x03	; 3
    1790:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_SE7SEG)
	{
		u8 Local_u8Piniterate = 0;
		for(Local_u8Piniterate = 0;Local_u8Piniterate<SE7Pin_NUMBER;Local_u8Piniterate++)
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	87 30       	cpi	r24, 0x07	; 7
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <SE7SEG_enuSetSE7SegVal+0x12e>
    179e:	80 cf       	rjmp	.-256    	; 0x16a0 <SE7SEG_enuSetSE7SegVal+0x2e>
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <SE7SEG_enuSetSE7SegVal+0x134>
				Local_enuErrorState = ES_Out_Of_Range;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	8a 83       	std	Y+2, r24	; 0x02
	}

	return  Local_enuErrorState;
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17a8:	28 96       	adiw	r28, 0x08	; 8
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <SE7SEG_enuSetUPSE7Seg>:



ES_t SE7SEG_enuSetUPSE7Seg(SE7SEG_t *Copy_SE7SEG,SETUP_t * SegSetUP,u8 Copy_u8CONECTSE7)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	27 97       	sbiw	r28, 0x07	; 7
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    17d2:	7e 83       	std	Y+6, r23	; 0x06
    17d4:	6d 83       	std	Y+5, r22	; 0x05
    17d6:	4f 83       	std	Y+7, r20	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_SE7SEG && SegSetUP)
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <SE7SEG_enuSetUPSE7Seg+0x2c>
    17e4:	62 c0       	rjmp	.+196    	; 0x18aa <SE7SEG_enuSetUPSE7Seg+0xf0>
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <SE7SEG_enuSetUPSE7Seg+0x36>
    17ee:	5d c0       	rjmp	.+186    	; 0x18aa <SE7SEG_enuSetUPSE7Seg+0xf0>
	{
		u8 Local_u8iterator = 0;
    17f0:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8iterator = 0;Local_u8iterator<SE7Pin_NUMBER;Local_u8iterator++)
    17f2:	19 82       	std	Y+1, r1	; 0x01
    17f4:	51 c0       	rjmp	.+162    	; 0x1898 <SE7SEG_enuSetUPSE7Seg+0xde>
		{
			DIO_enuSetPINDir(SegSetUP[Local_u8iterator].SE7SEG_u8PortID,SegSetUP[Local_u8iterator].SE7SEG_u8PinID,DIO_OUTPUT);
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 01       	movw	r18, r24
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	fc 01       	movw	r30, r24
    1808:	e2 0f       	add	r30, r18
    180a:	f3 1f       	adc	r31, r19
    180c:	40 81       	ld	r20, Z
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9c 01       	movw	r18, r24
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	fc 01       	movw	r30, r24
    1820:	e2 0f       	add	r30, r18
    1822:	f3 1f       	adc	r31, r19
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	84 2f       	mov	r24, r20
    1828:	69 2f       	mov	r22, r25
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
			Copy_SE7SEG->SE7SEG_A[Local_u8iterator].SE7SEG_u8PortID = SegSetUP[Local_u8iterator].SE7SEG_u8PortID;
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	48 2f       	mov	r20, r24
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 01       	movw	r18, r24
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	fc 01       	movw	r30, r24
    1848:	e2 0f       	add	r30, r18
    184a:	f3 1f       	adc	r31, r19
    184c:	60 81       	ld	r22, Z
    184e:	2b 81       	ldd	r18, Y+3	; 0x03
    1850:	3c 81       	ldd	r19, Y+4	; 0x04
    1852:	ca 01       	movw	r24, r20
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	f9 01       	movw	r30, r18
    185a:	e8 0f       	add	r30, r24
    185c:	f9 1f       	adc	r31, r25
    185e:	60 83       	st	Z, r22
			Copy_SE7SEG->SE7SEG_A[Local_u8iterator].SE7SEG_u8PinID = SegSetUP[Local_u8iterator].SE7SEG_u8PinID;
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	48 2f       	mov	r20, r24
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 01       	movw	r18, r24
    186e:	22 0f       	add	r18, r18
    1870:	33 1f       	adc	r19, r19
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	fc 01       	movw	r30, r24
    1878:	e2 0f       	add	r30, r18
    187a:	f3 1f       	adc	r31, r19
    187c:	61 81       	ldd	r22, Z+1	; 0x01
    187e:	2b 81       	ldd	r18, Y+3	; 0x03
    1880:	3c 81       	ldd	r19, Y+4	; 0x04
    1882:	ca 01       	movw	r24, r20
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	82 0f       	add	r24, r18
    188a:	93 1f       	adc	r25, r19
    188c:	fc 01       	movw	r30, r24
    188e:	31 96       	adiw	r30, 0x01	; 1
    1890:	60 83       	st	Z, r22
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_SE7SEG && SegSetUP)
	{
		u8 Local_u8iterator = 0;
		for(Local_u8iterator = 0;Local_u8iterator<SE7Pin_NUMBER;Local_u8iterator++)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	87 30       	cpi	r24, 0x07	; 7
    189c:	08 f4       	brcc	.+2      	; 0x18a0 <SE7SEG_enuSetUPSE7Seg+0xe6>
    189e:	ab cf       	rjmp	.-170    	; 0x17f6 <SE7SEG_enuSetUPSE7Seg+0x3c>
		{
			DIO_enuSetPINDir(SegSetUP[Local_u8iterator].SE7SEG_u8PortID,SegSetUP[Local_u8iterator].SE7SEG_u8PinID,DIO_OUTPUT);
			Copy_SE7SEG->SE7SEG_A[Local_u8iterator].SE7SEG_u8PortID = SegSetUP[Local_u8iterator].SE7SEG_u8PortID;
			Copy_SE7SEG->SE7SEG_A[Local_u8iterator].SE7SEG_u8PinID = SegSetUP[Local_u8iterator].SE7SEG_u8PinID;
		}
		Copy_SE7SEG->SE7SEG_u8Connection = Copy_u8CONECTSE7;
    18a0:	eb 81       	ldd	r30, Y+3	; 0x03
    18a2:	fc 81       	ldd	r31, Y+4	; 0x04
    18a4:	8f 81       	ldd	r24, Y+7	; 0x07
    18a6:	86 87       	std	Z+14, r24	; 0x0e
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <SE7SEG_enuSetUPSE7Seg+0xf4>
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	8a 83       	std	Y+2, r24	; 0x02
	}
	return  Local_enuErrorState;
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02

}
    18b0:	27 96       	adiw	r28, 0x07	; 7
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <SE7SEG_enuEnableSE7Seg>:

ES_t SE7SEG_enuEnableSE7Seg(SE7SEG_t *Copy_SE7SEG,SETUP_t  Copy_pstr_EnPIN)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <SE7SEG_enuEnableSE7Seg+0x6>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <SE7SEG_enuEnableSE7Seg+0x8>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	9b 83       	std	Y+3, r25	; 0x03
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	7d 83       	std	Y+5, r23	; 0x05
    18d6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_SE7SEG)
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	49 f1       	breq	.+82     	; 0x1936 <SE7SEG_enuEnableSE7Seg+0x74>
	{
		if(Copy_pstr_EnPIN.SE7SEG_u8PortID<=DIO_u8PORTD && Copy_pstr_EnPIN.SE7SEG_u8PinID<=DIO_u8PIN7)
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	84 30       	cpi	r24, 0x04	; 4
    18e8:	18 f5       	brcc	.+70     	; 0x1930 <SE7SEG_enuEnableSE7Seg+0x6e>
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	88 30       	cpi	r24, 0x08	; 8
    18ee:	00 f5       	brcc	.+64     	; 0x1930 <SE7SEG_enuEnableSE7Seg+0x6e>
		{
			DIO_enuSetPINDir(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_OUTPUT);
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	69 2f       	mov	r22, r25
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
			if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_CAnod)
    18fc:	ea 81       	ldd	r30, Y+2	; 0x02
    18fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1900:	86 85       	ldd	r24, Z+14	; 0x0e
    1902:	88 23       	and	r24, r24
    1904:	41 f4       	brne	.+16     	; 0x1916 <SE7SEG_enuEnableSE7Seg+0x54>
			{
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_HIGH);
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	69 2f       	mov	r22, r25
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	12 c0       	rjmp	.+36     	; 0x193a <SE7SEG_enuEnableSE7Seg+0x78>
			}
			else if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_Ccath)
    1916:	ea 81       	ldd	r30, Y+2	; 0x02
    1918:	fb 81       	ldd	r31, Y+3	; 0x03
    191a:	86 85       	ldd	r24, Z+14	; 0x0e
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	69 f4       	brne	.+26     	; 0x193a <SE7SEG_enuEnableSE7Seg+0x78>
			{
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_LOW);
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	69 2f       	mov	r22, r25
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	05 c0       	rjmp	.+10     	; 0x193a <SE7SEG_enuEnableSE7Seg+0x78>
			}

		}
		else
		{
			Local_enuErrorState = ES_Out_Of_Range;
    1930:	83 e0       	ldi	r24, 0x03	; 3
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	02 c0       	rjmp	.+4      	; 0x193a <SE7SEG_enuEnableSE7Seg+0x78>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <SE7SEG_enuDisableSE7Seg>:

ES_t SE7SEG_enuDisableSE7Seg(SE7SEG_t *Copy_SE7SEG,SETUP_t  Copy_pstr_EnPIN)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <SE7SEG_enuDisableSE7Seg+0x6>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <SE7SEG_enuDisableSE7Seg+0x8>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	9b 83       	std	Y+3, r25	; 0x03
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	7d 83       	std	Y+5, r23	; 0x05
    1960:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_SE7SEG)
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	9b 81       	ldd	r25, Y+3	; 0x03
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	49 f1       	breq	.+82     	; 0x19c0 <SE7SEG_enuDisableSE7Seg+0x74>
	{
		if(Copy_pstr_EnPIN.SE7SEG_u8PortID<=DIO_u8PORTD && Copy_pstr_EnPIN.SE7SEG_u8PinID<=DIO_u8PIN7)
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	84 30       	cpi	r24, 0x04	; 4
    1972:	18 f5       	brcc	.+70     	; 0x19ba <SE7SEG_enuDisableSE7Seg+0x6e>
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	88 30       	cpi	r24, 0x08	; 8
    1978:	00 f5       	brcc	.+64     	; 0x19ba <SE7SEG_enuDisableSE7Seg+0x6e>
		{
			DIO_enuSetPINDir(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_OUTPUT);
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	69 2f       	mov	r22, r25
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
			if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_CAnod)
    1986:	ea 81       	ldd	r30, Y+2	; 0x02
    1988:	fb 81       	ldd	r31, Y+3	; 0x03
    198a:	86 85       	ldd	r24, Z+14	; 0x0e
    198c:	88 23       	and	r24, r24
    198e:	41 f4       	brne	.+16     	; 0x19a0 <SE7SEG_enuDisableSE7Seg+0x54>
			{
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_LOW);
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	69 2f       	mov	r22, r25
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	12 c0       	rjmp	.+36     	; 0x19c4 <SE7SEG_enuDisableSE7Seg+0x78>
			}
			else if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_Ccath)
    19a0:	ea 81       	ldd	r30, Y+2	; 0x02
    19a2:	fb 81       	ldd	r31, Y+3	; 0x03
    19a4:	86 85       	ldd	r24, Z+14	; 0x0e
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	69 f4       	brne	.+26     	; 0x19c4 <SE7SEG_enuDisableSE7Seg+0x78>
			{
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_HIGH);
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	69 2f       	mov	r22, r25
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <SE7SEG_enuDisableSE7Seg+0x78>
			}
		}
		else
		{
			Local_enuErrorState = ES_Out_Of_Range;
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <SE7SEG_enuDisableSE7Seg+0x78>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01

}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <SE7SEG_enuSetDOTSE7Seg>:


ES_t SE7SEG_enuSetDOTSE7Seg(SE7SEG_t *Copy_SE7SEG,SETUP_t  Copy_pstr_EnPIN,u8 Copy_u8STATESE7)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	00 d0       	rcall	.+0      	; 0x19dc <SE7SEG_enuSetDOTSE7Seg+0x6>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <SE7SEG_enuSetDOTSE7Seg+0x8>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <SE7SEG_enuSetDOTSE7Seg+0xa>
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	9b 83       	std	Y+3, r25	; 0x03
    19e6:	8a 83       	std	Y+2, r24	; 0x02
    19e8:	7d 83       	std	Y+5, r23	; 0x05
    19ea:	6c 83       	std	Y+4, r22	; 0x04
    19ec:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_SE7SEG)
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	09 f4       	brne	.+2      	; 0x19fc <SE7SEG_enuSetDOTSE7Seg+0x26>
    19fa:	4d c0       	rjmp	.+154    	; 0x1a96 <SE7SEG_enuSetDOTSE7Seg+0xc0>
		{
			if(Copy_pstr_EnPIN.SE7SEG_u8PortID<=DIO_u8PORTD && Copy_pstr_EnPIN.SE7SEG_u8PinID<=DIO_u8PIN7)
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	84 30       	cpi	r24, 0x04	; 4
    1a00:	08 f0       	brcs	.+2      	; 0x1a04 <SE7SEG_enuSetDOTSE7Seg+0x2e>
    1a02:	46 c0       	rjmp	.+140    	; 0x1a90 <SE7SEG_enuSetDOTSE7Seg+0xba>
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	88 30       	cpi	r24, 0x08	; 8
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <SE7SEG_enuSetDOTSE7Seg+0x36>
    1a0a:	42 c0       	rjmp	.+132    	; 0x1a90 <SE7SEG_enuSetDOTSE7Seg+0xba>
			{
				DIO_enuSetPINDir(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_OUTPUT);
    1a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a10:	69 2f       	mov	r22, r25
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
				if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_CAnod)
    1a18:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1c:	86 85       	ldd	r24, Z+14	; 0x0e
    1a1e:	88 23       	and	r24, r24
    1a20:	c9 f4       	brne	.+50     	; 0x1a54 <SE7SEG_enuSetDOTSE7Seg+0x7e>
				{
					if(Copy_u8STATESE7 == SE7SEG_TurnOn)
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	41 f4       	brne	.+16     	; 0x1a38 <SE7SEG_enuSetDOTSE7Seg+0x62>
						Local_enuErrorState = DIO_enuSetPINVAL(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_LOW);
    1a28:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2c:	69 2f       	mov	r22, r25
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	31 c0       	rjmp	.+98     	; 0x1a9a <SE7SEG_enuSetDOTSE7Seg+0xc4>
					else if(Copy_u8STATESE7 == SE7SEG_TurnOff)
    1a38:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3a:	88 23       	and	r24, r24
    1a3c:	41 f4       	brne	.+16     	; 0x1a4e <SE7SEG_enuSetDOTSE7Seg+0x78>
						Local_enuErrorState = DIO_enuSetPINVAL(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_HIGH);
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	9d 81       	ldd	r25, Y+5	; 0x05
    1a42:	69 2f       	mov	r22, r25
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	26 c0       	rjmp	.+76     	; 0x1a9a <SE7SEG_enuSetDOTSE7Seg+0xc4>
					else
						Local_enuErrorState = ES_Out_Of_Range;
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	23 c0       	rjmp	.+70     	; 0x1a9a <SE7SEG_enuSetDOTSE7Seg+0xc4>

				}
				else if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_Ccath)
    1a54:	ea 81       	ldd	r30, Y+2	; 0x02
    1a56:	fb 81       	ldd	r31, Y+3	; 0x03
    1a58:	86 85       	ldd	r24, Z+14	; 0x0e
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	f1 f4       	brne	.+60     	; 0x1a9a <SE7SEG_enuSetDOTSE7Seg+0xc4>
				{
					if(Copy_u8STATESE7 == SE7SEG_TurnOn)
    1a5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	41 f4       	brne	.+16     	; 0x1a74 <SE7SEG_enuSetDOTSE7Seg+0x9e>
						Local_enuErrorState = DIO_enuSetPINVAL(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_HIGH);
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	69 2f       	mov	r22, r25
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	13 c0       	rjmp	.+38     	; 0x1a9a <SE7SEG_enuSetDOTSE7Seg+0xc4>
					else if(Copy_u8STATESE7 == SE7SEG_TurnOff)
    1a74:	8e 81       	ldd	r24, Y+6	; 0x06
    1a76:	88 23       	and	r24, r24
    1a78:	41 f4       	brne	.+16     	; 0x1a8a <SE7SEG_enuSetDOTSE7Seg+0xb4>
						Local_enuErrorState = DIO_enuSetPINVAL(Copy_pstr_EnPIN.SE7SEG_u8PortID,Copy_pstr_EnPIN.SE7SEG_u8PinID,DIO_LOW);
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7e:	69 2f       	mov	r22, r25
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	08 c0       	rjmp	.+16     	; 0x1a9a <SE7SEG_enuSetDOTSE7Seg+0xc4>
					else
						Local_enuErrorState = ES_Out_Of_Range;
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	05 c0       	rjmp	.+10     	; 0x1a9a <SE7SEG_enuSetDOTSE7Seg+0xc4>
				}

			}
			else
			{
				Local_enuErrorState = ES_Out_Of_Range;
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <SE7SEG_enuSetDOTSE7Seg+0xc4>
			}
		}
		else
		{
			Local_enuErrorState = ES_NULLPOINTER;
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	89 83       	std	Y+1, r24	; 0x01
		}


		return Local_enuErrorState;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01



}
    1a9c:	26 96       	adiw	r28, 0x06	; 6
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <SE7SEG_enuClearSE7Seg>:


ES_t SE7SEG_enuClearSE7Seg(SE7SEG_t *Copy_SE7SEG)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <SE7SEG_enuClearSE7Seg+0x6>
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <SE7SEG_enuClearSE7Seg+0x8>
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	8a 83       	std	Y+2, r24	; 0x02

		if(Copy_SE7SEG)
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <SE7SEG_enuClearSE7Seg+0x1e>
    1aca:	6e c0       	rjmp	.+220    	; 0x1ba8 <SE7SEG_enuClearSE7Seg+0xfa>
		{

				for(u8 Local_u8Piniterate = 0;Local_u8Piniterate<SE7Pin_NUMBER;Local_u8Piniterate++)
    1acc:	19 82       	std	Y+1, r1	; 0x01
    1ace:	67 c0       	rjmp	.+206    	; 0x1b9e <SE7SEG_enuClearSE7Seg+0xf0>
				{
					DIO_enuSetPINDir(Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PortID,Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PinID,DIO_OUTPUT);
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	88 2f       	mov	r24, r24
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	f9 01       	movw	r30, r18
    1ae0:	e8 0f       	add	r30, r24
    1ae2:	f9 1f       	adc	r31, r25
    1ae4:	40 81       	ld	r20, Z
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	82 0f       	add	r24, r18
    1af6:	93 1f       	adc	r25, r19
    1af8:	fc 01       	movw	r30, r24
    1afa:	31 96       	adiw	r30, 0x01	; 1
    1afc:	90 81       	ld	r25, Z
    1afe:	84 2f       	mov	r24, r20
    1b00:	69 2f       	mov	r22, r25
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
					if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_Ccath)
    1b08:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0c:	86 85       	ldd	r24, Z+14	; 0x0e
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	f1 f4       	brne	.+60     	; 0x1b4e <SE7SEG_enuClearSE7Seg+0xa0>
						Local_enuErrorState = DIO_enuSetPINVAL(Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PortID,Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PinID,DIO_LOW);
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	f9 01       	movw	r30, r18
    1b22:	e8 0f       	add	r30, r24
    1b24:	f9 1f       	adc	r31, r25
    1b26:	40 81       	ld	r20, Z
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	82 0f       	add	r24, r18
    1b38:	93 1f       	adc	r25, r19
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	31 96       	adiw	r30, 0x01	; 1
    1b3e:	90 81       	ld	r25, Z
    1b40:	84 2f       	mov	r24, r20
    1b42:	69 2f       	mov	r22, r25
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1b4a:	8a 83       	std	Y+2, r24	; 0x02
    1b4c:	25 c0       	rjmp	.+74     	; 0x1b98 <SE7SEG_enuClearSE7Seg+0xea>
					else if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_CAnod)
    1b4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b50:	fc 81       	ldd	r31, Y+4	; 0x04
    1b52:	86 85       	ldd	r24, Z+14	; 0x0e
    1b54:	88 23       	and	r24, r24
    1b56:	f1 f4       	brne	.+60     	; 0x1b94 <SE7SEG_enuClearSE7Seg+0xe6>
						Local_enuErrorState = DIO_enuSetPINVAL(Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PortID,Copy_SE7SEG->SE7SEG_A[Local_u8Piniterate].SE7SEG_u8PinID,DIO_HIGH);
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	f9 01       	movw	r30, r18
    1b68:	e8 0f       	add	r30, r24
    1b6a:	f9 1f       	adc	r31, r25
    1b6c:	40 81       	ld	r20, Z
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	2b 81       	ldd	r18, Y+3	; 0x03
    1b76:	3c 81       	ldd	r19, Y+4	; 0x04
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	82 0f       	add	r24, r18
    1b7e:	93 1f       	adc	r25, r19
    1b80:	fc 01       	movw	r30, r24
    1b82:	31 96       	adiw	r30, 0x01	; 1
    1b84:	90 81       	ld	r25, Z
    1b86:	84 2f       	mov	r24, r20
    1b88:	69 2f       	mov	r22, r25
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <SE7SEG_enuClearSE7Seg+0xea>
					else
						Local_enuErrorState = ES_Out_Of_Range;
    1b94:	83 e0       	ldi	r24, 0x03	; 3
    1b96:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

		if(Copy_SE7SEG)
		{

				for(u8 Local_u8Piniterate = 0;Local_u8Piniterate<SE7Pin_NUMBER;Local_u8Piniterate++)
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	8f 5f       	subi	r24, 0xFF	; 255
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	87 30       	cpi	r24, 0x07	; 7
    1ba2:	08 f4       	brcc	.+2      	; 0x1ba6 <SE7SEG_enuClearSE7Seg+0xf8>
    1ba4:	95 cf       	rjmp	.-214    	; 0x1ad0 <SE7SEG_enuClearSE7Seg+0x22>
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <SE7SEG_enuClearSE7Seg+0xfe>


		}
		else
		{
			Local_enuErrorState = ES_NULLPOINTER;
    1ba8:	82 e0       	ldi	r24, 0x02	; 2
    1baa:	8a 83       	std	Y+2, r24	; 0x02
		}

		return  Local_enuErrorState;
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02



}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <SE7SEG_enuSetPin>:


ES_t SE7SEG_enuSetPin(SE7SEG_t *Copy_SE7SEG,u8 Copy_u8PortSE7,u8 Copy_u8PinSE7,u8 Copy_u8STATESE7)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <SE7SEG_enuSetPin+0x6>
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <SE7SEG_enuSetPin+0x8>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <SE7SEG_enuSetPin+0xa>
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	9b 83       	std	Y+3, r25	; 0x03
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
    1bce:	6c 83       	std	Y+4, r22	; 0x04
    1bd0:	4d 83       	std	Y+5, r20	; 0x05
    1bd2:	2e 83       	std	Y+6, r18	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_SE7SEG)
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <SE7SEG_enuSetPin+0x26>
    1be0:	71 c0       	rjmp	.+226    	; 0x1cc4 <SE7SEG_enuSetPin+0x108>
	{

		if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_Ccath)
    1be2:	ea 81       	ldd	r30, Y+2	; 0x02
    1be4:	fb 81       	ldd	r31, Y+3	; 0x03
    1be6:	86 85       	ldd	r24, Z+14	; 0x0e
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	f1 f4       	brne	.+60     	; 0x1c28 <SE7SEG_enuSetPin+0x6c>
		{
			Local_enuErrorState = DIO_enuSetPINVAL(Copy_SE7SEG->SE7SEG_A[Copy_u8PinSE7].SE7SEG_u8PortID,Copy_SE7SEG->SE7SEG_A[Copy_u8PinSE7].SE7SEG_u8PinID,Copy_u8STATESE7);
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bf4:	3b 81       	ldd	r19, Y+3	; 0x03
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	f9 01       	movw	r30, r18
    1bfc:	e8 0f       	add	r30, r24
    1bfe:	f9 1f       	adc	r31, r25
    1c00:	40 81       	ld	r20, Z
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	2a 81       	ldd	r18, Y+2	; 0x02
    1c0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	82 0f       	add	r24, r18
    1c12:	93 1f       	adc	r25, r19
    1c14:	fc 01       	movw	r30, r24
    1c16:	31 96       	adiw	r30, 0x01	; 1
    1c18:	90 81       	ld	r25, Z
    1c1a:	84 2f       	mov	r24, r20
    1c1c:	69 2f       	mov	r22, r25
    1c1e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c20:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	50 c0       	rjmp	.+160    	; 0x1cc8 <SE7SEG_enuSetPin+0x10c>
		}
		else if(Copy_SE7SEG->SE7SEG_u8Connection == SE7SEG_CAnod)
    1c28:	ea 81       	ldd	r30, Y+2	; 0x02
    1c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2c:	86 85       	ldd	r24, Z+14	; 0x0e
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <SE7SEG_enuSetPin+0x78>
    1c32:	45 c0       	rjmp	.+138    	; 0x1cbe <SE7SEG_enuSetPin+0x102>
		{
			if(Copy_u8STATESE7 == DIO_HIGH)
    1c34:	8e 81       	ldd	r24, Y+6	; 0x06
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	f1 f4       	brne	.+60     	; 0x1c76 <SE7SEG_enuSetPin+0xba>
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_SE7SEG->SE7SEG_A[Copy_u8PinSE7].SE7SEG_u8PortID,Copy_SE7SEG->SE7SEG_A[Copy_u8PinSE7].SE7SEG_u8PinID,DIO_LOW);
    1c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	2a 81       	ldd	r18, Y+2	; 0x02
    1c42:	3b 81       	ldd	r19, Y+3	; 0x03
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	f9 01       	movw	r30, r18
    1c4a:	e8 0f       	add	r30, r24
    1c4c:	f9 1f       	adc	r31, r25
    1c4e:	40 81       	ld	r20, Z
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	2a 81       	ldd	r18, Y+2	; 0x02
    1c58:	3b 81       	ldd	r19, Y+3	; 0x03
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	fc 01       	movw	r30, r24
    1c64:	31 96       	adiw	r30, 0x01	; 1
    1c66:	90 81       	ld	r25, Z
    1c68:	84 2f       	mov	r24, r20
    1c6a:	69 2f       	mov	r22, r25
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	29 c0       	rjmp	.+82     	; 0x1cc8 <SE7SEG_enuSetPin+0x10c>
			else if(Copy_u8STATESE7 == DIO_LOW)
    1c76:	8e 81       	ldd	r24, Y+6	; 0x06
    1c78:	88 23       	and	r24, r24
    1c7a:	f1 f4       	brne	.+60     	; 0x1cb8 <SE7SEG_enuSetPin+0xfc>
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_SE7SEG->SE7SEG_A[Copy_u8PinSE7].SE7SEG_u8PortID,Copy_SE7SEG->SE7SEG_A[Copy_u8PinSE7].SE7SEG_u8PinID,DIO_HIGH);
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	2a 81       	ldd	r18, Y+2	; 0x02
    1c84:	3b 81       	ldd	r19, Y+3	; 0x03
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	f9 01       	movw	r30, r18
    1c8c:	e8 0f       	add	r30, r24
    1c8e:	f9 1f       	adc	r31, r25
    1c90:	40 81       	ld	r20, Z
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	2a 81       	ldd	r18, Y+2	; 0x02
    1c9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	82 0f       	add	r24, r18
    1ca2:	93 1f       	adc	r25, r19
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	31 96       	adiw	r30, 0x01	; 1
    1ca8:	90 81       	ld	r25, Z
    1caa:	84 2f       	mov	r24, r20
    1cac:	69 2f       	mov	r22, r25
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	08 c0       	rjmp	.+16     	; 0x1cc8 <SE7SEG_enuSetPin+0x10c>
			else
				Local_enuErrorState = ES_Out_Of_Range;
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	05 c0       	rjmp	.+10     	; 0x1cc8 <SE7SEG_enuSetPin+0x10c>
		}
		else
			Local_enuErrorState = ES_Out_Of_Range;
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <SE7SEG_enuSetPin+0x10c>

	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01

}
    1cca:	26 96       	adiw	r28, 0x06	; 6
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <main>:
#include"../HAL/SE7SEG_Config.h"
#include"../HAL/SE7SEG_int.h"
#include<util/delay.h>

int main()
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	c4 55       	subi	r28, 0x54	; 84
    1ce6:	d0 40       	sbci	r29, 0x00	; 0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
			{DIO_u8PORTA,DIO_u8PIN2},
			{DIO_u8PORTA,DIO_u8PIN3},
			{DIO_u8PORTA,DIO_u8PIN4},
			{DIO_u8PORTA,DIO_u8PIN5},
			{DIO_u8PORTA,DIO_u8PIN6}
	};
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	8b 96       	adiw	r24, 0x2b	; 43
    1cf6:	2d 96       	adiw	r28, 0x0d	; 13
    1cf8:	9f af       	std	Y+63, r25	; 0x3f
    1cfa:	8e af       	std	Y+62, r24	; 0x3e
    1cfc:	2d 97       	sbiw	r28, 0x0d	; 13
    1cfe:	ee e9       	ldi	r30, 0x9E	; 158
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	2f 96       	adiw	r28, 0x0f	; 15
    1d04:	ff af       	std	Y+63, r31	; 0x3f
    1d06:	ee af       	std	Y+62, r30	; 0x3e
    1d08:	2f 97       	sbiw	r28, 0x0f	; 15
    1d0a:	fe e0       	ldi	r31, 0x0E	; 14
    1d0c:	60 96       	adiw	r28, 0x10	; 16
    1d0e:	ff af       	std	Y+63, r31	; 0x3f
    1d10:	60 97       	sbiw	r28, 0x10	; 16
    1d12:	2f 96       	adiw	r28, 0x0f	; 15
    1d14:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d16:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d18:	2f 97       	sbiw	r28, 0x0f	; 15
    1d1a:	00 80       	ld	r0, Z
    1d1c:	2f 96       	adiw	r28, 0x0f	; 15
    1d1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d20:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d22:	2f 97       	sbiw	r28, 0x0f	; 15
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	2f 96       	adiw	r28, 0x0f	; 15
    1d28:	9f af       	std	Y+63, r25	; 0x3f
    1d2a:	8e af       	std	Y+62, r24	; 0x3e
    1d2c:	2f 97       	sbiw	r28, 0x0f	; 15
    1d2e:	2d 96       	adiw	r28, 0x0d	; 13
    1d30:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d32:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d34:	2d 97       	sbiw	r28, 0x0d	; 13
    1d36:	00 82       	st	Z, r0
    1d38:	2d 96       	adiw	r28, 0x0d	; 13
    1d3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d3e:	2d 97       	sbiw	r28, 0x0d	; 13
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	2d 96       	adiw	r28, 0x0d	; 13
    1d44:	9f af       	std	Y+63, r25	; 0x3f
    1d46:	8e af       	std	Y+62, r24	; 0x3e
    1d48:	2d 97       	sbiw	r28, 0x0d	; 13
    1d4a:	60 96       	adiw	r28, 0x10	; 16
    1d4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d4e:	60 97       	sbiw	r28, 0x10	; 16
    1d50:	91 50       	subi	r25, 0x01	; 1
    1d52:	60 96       	adiw	r28, 0x10	; 16
    1d54:	9f af       	std	Y+63, r25	; 0x3f
    1d56:	60 97       	sbiw	r28, 0x10	; 16
    1d58:	60 96       	adiw	r28, 0x10	; 16
    1d5a:	ef ad       	ldd	r30, Y+63	; 0x3f
    1d5c:	60 97       	sbiw	r28, 0x10	; 16
    1d5e:	ee 23       	and	r30, r30
    1d60:	c1 f6       	brne	.-80     	; 0x1d12 <main+0x36>
				{DIO_u8PORTA,DIO_u8PIN2},
				{DIO_u8PORTA,DIO_u8PIN3},
				{DIO_u8PORTA,DIO_u8PIN4},
				{DIO_u8PORTA,DIO_u8PIN5},
				{DIO_u8PORTA,DIO_u8PIN6}
		};
    1d62:	ce 01       	movw	r24, r28
    1d64:	c9 96       	adiw	r24, 0x39	; 57
    1d66:	62 96       	adiw	r28, 0x12	; 18
    1d68:	9f af       	std	Y+63, r25	; 0x3f
    1d6a:	8e af       	std	Y+62, r24	; 0x3e
    1d6c:	62 97       	sbiw	r28, 0x12	; 18
    1d6e:	e0 e9       	ldi	r30, 0x90	; 144
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	64 96       	adiw	r28, 0x14	; 20
    1d74:	ff af       	std	Y+63, r31	; 0x3f
    1d76:	ee af       	std	Y+62, r30	; 0x3e
    1d78:	64 97       	sbiw	r28, 0x14	; 20
    1d7a:	fe e0       	ldi	r31, 0x0E	; 14
    1d7c:	65 96       	adiw	r28, 0x15	; 21
    1d7e:	ff af       	std	Y+63, r31	; 0x3f
    1d80:	65 97       	sbiw	r28, 0x15	; 21
    1d82:	64 96       	adiw	r28, 0x14	; 20
    1d84:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d86:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d88:	64 97       	sbiw	r28, 0x14	; 20
    1d8a:	00 80       	ld	r0, Z
    1d8c:	64 96       	adiw	r28, 0x14	; 20
    1d8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d90:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d92:	64 97       	sbiw	r28, 0x14	; 20
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	64 96       	adiw	r28, 0x14	; 20
    1d98:	9f af       	std	Y+63, r25	; 0x3f
    1d9a:	8e af       	std	Y+62, r24	; 0x3e
    1d9c:	64 97       	sbiw	r28, 0x14	; 20
    1d9e:	62 96       	adiw	r28, 0x12	; 18
    1da0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1da2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1da4:	62 97       	sbiw	r28, 0x12	; 18
    1da6:	00 82       	st	Z, r0
    1da8:	62 96       	adiw	r28, 0x12	; 18
    1daa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dae:	62 97       	sbiw	r28, 0x12	; 18
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	62 96       	adiw	r28, 0x12	; 18
    1db4:	9f af       	std	Y+63, r25	; 0x3f
    1db6:	8e af       	std	Y+62, r24	; 0x3e
    1db8:	62 97       	sbiw	r28, 0x12	; 18
    1dba:	65 96       	adiw	r28, 0x15	; 21
    1dbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dbe:	65 97       	sbiw	r28, 0x15	; 21
    1dc0:	91 50       	subi	r25, 0x01	; 1
    1dc2:	65 96       	adiw	r28, 0x15	; 21
    1dc4:	9f af       	std	Y+63, r25	; 0x3f
    1dc6:	65 97       	sbiw	r28, 0x15	; 21
    1dc8:	65 96       	adiw	r28, 0x15	; 21
    1dca:	ef ad       	ldd	r30, Y+63	; 0x3f
    1dcc:	65 97       	sbiw	r28, 0x15	; 21
    1dce:	ee 23       	and	r30, r30
    1dd0:	c1 f6       	brne	.-80     	; 0x1d82 <main+0xa6>

	SETUP_t SE7Seg_Epin_0 = {DIO_u8PORTA,DIO_u8PIN7};
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e9 5b       	subi	r30, 0xB9	; 185
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	10 82       	st	Z, r1
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e9 5b       	subi	r30, 0xB9	; 185
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	87 e0       	ldi	r24, 0x07	; 7
    1de2:	81 83       	std	Z+1, r24	; 0x01
	SETUP_t SE7Seg_DOT0 = {DIO_u8PORTB,DIO_u8PIN0};
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 5b       	subi	r30, 0xB7	; 183
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 83       	st	Z, r24
    1dee:	fe 01       	movw	r30, r28
    1df0:	e7 5b       	subi	r30, 0xB7	; 183
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	11 82       	std	Z+1, r1	; 0x01
	DIO_enuInit();
    1df6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuInit>
	SE7SEG_enuINIT(AStr_SE7SEG);
    1dfa:	88 e6       	ldi	r24, 0x68	; 104
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0e 94 1b 0a 	call	0x1436	; 0x1436 <SE7SEG_enuINIT>
	SE7SEG_enuSetUPSE7Seg(&AStr_SE7SEG[0],SE7Seg_0,SE7SEG_u8CAnod);
    1e02:	88 e6       	ldi	r24, 0x68	; 104
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e 01       	movw	r18, r28
    1e08:	25 5d       	subi	r18, 0xD5	; 213
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	b9 01       	movw	r22, r18
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SE7SEG_enuSetUPSE7Seg>
	SE7SEG_enuSetUPSE7Seg(&AStr_SE7SEG[1],SE7Seg_1,SE7SEG_u8Ccath);
    1e14:	87 e7       	ldi	r24, 0x77	; 119
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9e 01       	movw	r18, r28
    1e1a:	27 5c       	subi	r18, 0xC7	; 199
    1e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1e:	b9 01       	movw	r22, r18
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <SE7SEG_enuSetUPSE7Seg>

	SE7SEG_enuDisableSE7Seg(&AStr_SE7SEG[0],SE7Seg_Epin_0);
    1e26:	88 e6       	ldi	r24, 0x68	; 104
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e9 5b       	subi	r30, 0xB9	; 185
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	20 81       	ld	r18, Z
    1e32:	31 81       	ldd	r19, Z+1	; 0x01
    1e34:	b9 01       	movw	r22, r18
    1e36:	0e 94 a6 0c 	call	0x194c	; 0x194c <SE7SEG_enuDisableSE7Seg>
	//SE7SEG_enuDisableSE7Seg(&AStr_SE7SEG[1],SE7Seg_Epin_1);
	while(1)
	{

				SE7SEG_enuSetSE7SegVal(&AStr_SE7SEG[0],5+2);
    1e3a:	88 e6       	ldi	r24, 0x68	; 104
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	67 e0       	ldi	r22, 0x07	; 7
    1e40:	0e 94 39 0b 	call	0x1672	; 0x1672 <SE7SEG_enuSetSE7SegVal>
				SE7SEG_enuEnableSE7Seg(&AStr_SE7SEG[0],SE7Seg_Epin_0);
    1e44:	88 e6       	ldi	r24, 0x68	; 104
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e9 5b       	subi	r30, 0xB9	; 185
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	20 81       	ld	r18, Z
    1e50:	31 81       	ldd	r19, Z+1	; 0x01
    1e52:	b9 01       	movw	r22, r18
    1e54:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <SE7SEG_enuEnableSE7Seg>
				SE7SEG_enuSetDOTSE7Seg(&AStr_SE7SEG[0],SE7Seg_DOT0,SE7SEG_u8TurnOn);
    1e58:	88 e6       	ldi	r24, 0x68	; 104
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e7 5b       	subi	r30, 0xB7	; 183
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	20 81       	ld	r18, Z
    1e64:	31 81       	ldd	r19, Z+1	; 0x01
    1e66:	b9 01       	movw	r22, r18
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <SE7SEG_enuSetDOTSE7Seg>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	aa e7       	ldi	r26, 0x7A	; 122
    1e74:	b4 e4       	ldi	r27, 0x44	; 68
    1e76:	8f a3       	std	Y+39, r24	; 0x27
    1e78:	98 a7       	std	Y+40, r25	; 0x28
    1e7a:	a9 a7       	std	Y+41, r26	; 0x29
    1e7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e80:	78 a5       	ldd	r23, Y+40	; 0x28
    1e82:	89 a5       	ldd	r24, Y+41	; 0x29
    1e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a e7       	ldi	r20, 0x7A	; 122
    1e8c:	53 e4       	ldi	r21, 0x43	; 67
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8b a3       	std	Y+35, r24	; 0x23
    1e98:	9c a3       	std	Y+36, r25	; 0x24
    1e9a:	ad a3       	std	Y+37, r26	; 0x25
    1e9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <main+0x1e4>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9a a3       	std	Y+34, r25	; 0x22
    1ebc:	89 a3       	std	Y+33, r24	; 0x21
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <main+0x262>
	else if (__tmp > 65535)
    1ec0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <main+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eda:	78 a5       	ldd	r23, Y+40	; 0x28
    1edc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ede:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <main+0x244>
    1f02:	89 e1       	ldi	r24, 0x19	; 25
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	98 a3       	std	Y+32, r25	; 0x20
    1f08:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f0c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <main+0x232>
    1f12:	98 a3       	std	Y+32, r25	; 0x20
    1f14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	89 a1       	ldd	r24, Y+33	; 0x21
    1f18:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9a a3       	std	Y+34, r25	; 0x22
    1f1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	89 a1       	ldd	r24, Y+33	; 0x21
    1f22:	9a a1       	ldd	r25, Y+34	; 0x22
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <main+0x226>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <main+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f30:	9e a1       	ldd	r25, Y+38	; 0x26
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9a a3       	std	Y+34, r25	; 0x22
    1f3c:	89 a3       	std	Y+33, r24	; 0x21
    1f3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f40:	9a a1       	ldd	r25, Y+34	; 0x22
    1f42:	9e 8f       	std	Y+30, r25	; 0x1e
    1f44:	8d 8f       	std	Y+29, r24	; 0x1d
    1f46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <main+0x26e>
    1f4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f50:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				SE7SEG_enuClearSE7Seg(&AStr_SE7SEG[0]);
    1f52:	88 e6       	ldi	r24, 0x68	; 104
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 57 0d 	call	0x1aae	; 0x1aae <SE7SEG_enuClearSE7Seg>
				SE7SEG_enuSetDOTSE7Seg(&AStr_SE7SEG[0],SE7Seg_DOT0,SE7SEG_u8TurnOff);
    1f5a:	88 e6       	ldi	r24, 0x68	; 104
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e7 5b       	subi	r30, 0xB7	; 183
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	20 81       	ld	r18, Z
    1f66:	31 81       	ldd	r19, Z+1	; 0x01
    1f68:	b9 01       	movw	r22, r18
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <SE7SEG_enuSetDOTSE7Seg>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	aa ef       	ldi	r26, 0xFA	; 250
    1f76:	b3 e4       	ldi	r27, 0x43	; 67
    1f78:	89 8f       	std	Y+25, r24	; 0x19
    1f7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	69 8d       	ldd	r22, Y+25	; 0x19
    1f82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a e7       	ldi	r20, 0x7A	; 122
    1f8e:	53 e4       	ldi	r21, 0x43	; 67
    1f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8d 8b       	std	Y+21, r24	; 0x15
    1f9a:	9e 8b       	std	Y+22, r25	; 0x16
    1f9c:	af 8b       	std	Y+23, r26	; 0x17
    1f9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <main+0x2e6>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 8b       	std	Y+20, r25	; 0x14
    1fbe:	8b 8b       	std	Y+19, r24	; 0x13
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <main+0x364>
	else if (__tmp > 65535)
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <main+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	69 8d       	ldd	r22, Y+25	; 0x19
    1fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <main+0x346>
    2004:	89 e1       	ldi	r24, 0x19	; 25
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9a 8b       	std	Y+18, r25	; 0x12
    200a:	89 8b       	std	Y+17, r24	; 0x11
    200c:	89 89       	ldd	r24, Y+17	; 0x11
    200e:	9a 89       	ldd	r25, Y+18	; 0x12
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <main+0x334>
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8b 89       	ldd	r24, Y+19	; 0x13
    201a:	9c 89       	ldd	r25, Y+20	; 0x14
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <main+0x328>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <main+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	6d 89       	ldd	r22, Y+21	; 0x15
    202e:	7e 89       	ldd	r23, Y+22	; 0x16
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	98 8b       	std	Y+16, r25	; 0x10
    2046:	8f 87       	std	Y+15, r24	; 0x0f
    2048:	8f 85       	ldd	r24, Y+15	; 0x0f
    204a:	98 89       	ldd	r25, Y+16	; 0x10
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <main+0x370>
    2050:	98 8b       	std	Y+16, r25	; 0x10
    2052:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				SE7SEG_enuSetSE7SegVal(&AStr_SE7SEG[0],14-11);
    2054:	88 e6       	ldi	r24, 0x68	; 104
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	63 e0       	ldi	r22, 0x03	; 3
    205a:	0e 94 39 0b 	call	0x1672	; 0x1672 <SE7SEG_enuSetSE7SegVal>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	aa e7       	ldi	r26, 0x7A	; 122
    2064:	b4 e4       	ldi	r27, 0x44	; 68
    2066:	8b 87       	std	Y+11, r24	; 0x0b
    2068:	9c 87       	std	Y+12, r25	; 0x0c
    206a:	ad 87       	std	Y+13, r26	; 0x0d
    206c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2070:	7c 85       	ldd	r23, Y+12	; 0x0c
    2072:	8d 85       	ldd	r24, Y+13	; 0x0d
    2074:	9e 85       	ldd	r25, Y+14	; 0x0e
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a e7       	ldi	r20, 0x7A	; 122
    207c:	53 e4       	ldi	r21, 0x43	; 67
    207e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8f 83       	std	Y+7, r24	; 0x07
    2088:	98 87       	std	Y+8, r25	; 0x08
    208a:	a9 87       	std	Y+9, r26	; 0x09
    208c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    208e:	6f 81       	ldd	r22, Y+7	; 0x07
    2090:	78 85       	ldd	r23, Y+8	; 0x08
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <main+0x3d4>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <main+0x452>
	else if (__tmp > 65535)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <main+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <main+0x434>
    20f2:	89 e1       	ldi	r24, 0x19	; 25
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <main+0x422>
    2102:	9c 83       	std	Y+4, r25	; 0x04
    2104:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <main+0x416>
    2118:	90 ce       	rjmp	.-736    	; 0x1e3a <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <main+0x45e>
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	7b ce       	rjmp	.-778    	; 0x1e3a <main+0x15e>

00002144 <__prologue_saves__>:
    2144:	2f 92       	push	r2
    2146:	3f 92       	push	r3
    2148:	4f 92       	push	r4
    214a:	5f 92       	push	r5
    214c:	6f 92       	push	r6
    214e:	7f 92       	push	r7
    2150:	8f 92       	push	r8
    2152:	9f 92       	push	r9
    2154:	af 92       	push	r10
    2156:	bf 92       	push	r11
    2158:	cf 92       	push	r12
    215a:	df 92       	push	r13
    215c:	ef 92       	push	r14
    215e:	ff 92       	push	r15
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	ca 1b       	sub	r28, r26
    216e:	db 0b       	sbc	r29, r27
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	09 94       	ijmp

0000217c <__epilogue_restores__>:
    217c:	2a 88       	ldd	r2, Y+18	; 0x12
    217e:	39 88       	ldd	r3, Y+17	; 0x11
    2180:	48 88       	ldd	r4, Y+16	; 0x10
    2182:	5f 84       	ldd	r5, Y+15	; 0x0f
    2184:	6e 84       	ldd	r6, Y+14	; 0x0e
    2186:	7d 84       	ldd	r7, Y+13	; 0x0d
    2188:	8c 84       	ldd	r8, Y+12	; 0x0c
    218a:	9b 84       	ldd	r9, Y+11	; 0x0b
    218c:	aa 84       	ldd	r10, Y+10	; 0x0a
    218e:	b9 84       	ldd	r11, Y+9	; 0x09
    2190:	c8 84       	ldd	r12, Y+8	; 0x08
    2192:	df 80       	ldd	r13, Y+7	; 0x07
    2194:	ee 80       	ldd	r14, Y+6	; 0x06
    2196:	fd 80       	ldd	r15, Y+5	; 0x05
    2198:	0c 81       	ldd	r16, Y+4	; 0x04
    219a:	1b 81       	ldd	r17, Y+3	; 0x03
    219c:	aa 81       	ldd	r26, Y+2	; 0x02
    219e:	b9 81       	ldd	r27, Y+1	; 0x01
    21a0:	ce 0f       	add	r28, r30
    21a2:	d1 1d       	adc	r29, r1
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	ed 01       	movw	r28, r26
    21b0:	08 95       	ret

000021b2 <_exit>:
    21b2:	f8 94       	cli

000021b4 <__stop_program>:
    21b4:	ff cf       	rjmp	.-2      	; 0x21b4 <__stop_program>
