
EXTI_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000010b4  00001148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800066  00800066  0000114e  2**0
                  ALLOC
  3 .stab         00001704  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009b8  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_1>
       8:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_2>
       c:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 08 	call	0x1052	; 0x1052 <main>
      8a:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GIE_enuEnable>:
#include"../../LIB/StdTypes.h"
#include"../../LIB/errorStatuse.h"
#include"GIE_Priv.h"

ES_t GIE_enuEnable(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	89 83       	std	Y+1, r24	; 0x01

	  SREG|=(1<<7);
      a0:	af e5       	ldi	r26, 0x5F	; 95
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	ef e5       	ldi	r30, 0x5F	; 95
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	80 68       	ori	r24, 0x80	; 128
      ac:	8c 93       	st	X, r24

	return Local_enuErrorState;
      ae:	89 81       	ldd	r24, Y+1	; 0x01
}
      b0:	0f 90       	pop	r0
      b2:	cf 91       	pop	r28
      b4:	df 91       	pop	r29
      b6:	08 95       	ret

000000b8 <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
      b8:	df 93       	push	r29
      ba:	cf 93       	push	r28
      bc:	0f 92       	push	r0
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	89 83       	std	Y+1, r24	; 0x01

	SREG&=~(1<<7);
      c6:	af e5       	ldi	r26, 0x5F	; 95
      c8:	b0 e0       	ldi	r27, 0x00	; 0
      ca:	ef e5       	ldi	r30, 0x5F	; 95
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	8f 77       	andi	r24, 0x7F	; 127
      d2:	8c 93       	st	X, r24

	return Local_enuErrorState;
      d4:	89 81       	ldd	r24, Y+1	; 0x01
}
      d6:	0f 90       	pop	r0
      d8:	cf 91       	pop	r28
      da:	df 91       	pop	r29
      dc:	08 95       	ret

000000de <EXTI_enuInit>:
#include"interrupt.h"

static volatile void(*EXTI_APFunINIT[3])(void) = {NULL,NULL,NULL};

ES_t EXTI_enuInit(EXTI_t * Copy_pstrEXTIConfig)
{
      de:	df 93       	push	r29
      e0:	cf 93       	push	r28
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	2c 97       	sbiw	r28, 0x0c	; 12
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	f8 94       	cli
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	9c 83       	std	Y+4, r25	; 0x04
      f4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pstrEXTIConfig)
      fa:	8b 81       	ldd	r24, Y+3	; 0x03
      fc:	9c 81       	ldd	r25, Y+4	; 0x04
      fe:	00 97       	sbiw	r24, 0x00	; 0
     100:	09 f4       	brne	.+2      	; 0x104 <EXTI_enuInit+0x26>
     102:	09 c1       	rjmp	.+530    	; 0x316 <EXTI_enuInit+0x238>
	{
		u8 Local_u8Iretator = 0;
     104:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iretator = 0;Local_u8Iretator<3;Local_u8Iretator++)
     106:	19 82       	std	Y+1, r1	; 0x01
     108:	01 c1       	rjmp	.+514    	; 0x30c <EXTI_enuInit+0x22e>
		{
			if(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8State == ACTIVE)
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	9c 01       	movw	r18, r24
     112:	22 0f       	add	r18, r18
     114:	33 1f       	adc	r19, r19
     116:	8b 81       	ldd	r24, Y+3	; 0x03
     118:	9c 81       	ldd	r25, Y+4	; 0x04
     11a:	fc 01       	movw	r30, r24
     11c:	e2 0f       	add	r30, r18
     11e:	f3 1f       	adc	r31, r19
     120:	80 81       	ld	r24, Z
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	09 f0       	breq	.+2      	; 0x128 <EXTI_enuInit+0x4a>
     126:	ef c0       	rjmp	.+478    	; 0x306 <EXTI_enuInit+0x228>
			{
				switch(Local_u8Iretator)
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	3c 87       	std	Y+12, r19	; 0x0c
     130:	2b 87       	std	Y+11, r18	; 0x0b
     132:	8b 85       	ldd	r24, Y+11	; 0x0b
     134:	9c 85       	ldd	r25, Y+12	; 0x0c
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	91 05       	cpc	r25, r1
     13a:	09 f4       	brne	.+2      	; 0x13e <EXTI_enuInit+0x60>
     13c:	5f c0       	rjmp	.+190    	; 0x1fc <EXTI_enuInit+0x11e>
     13e:	2b 85       	ldd	r18, Y+11	; 0x0b
     140:	3c 85       	ldd	r19, Y+12	; 0x0c
     142:	22 30       	cpi	r18, 0x02	; 2
     144:	31 05       	cpc	r19, r1
     146:	09 f4       	brne	.+2      	; 0x14a <EXTI_enuInit+0x6c>
     148:	ad c0       	rjmp	.+346    	; 0x2a4 <EXTI_enuInit+0x1c6>
     14a:	8b 85       	ldd	r24, Y+11	; 0x0b
     14c:	9c 85       	ldd	r25, Y+12	; 0x0c
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	09 f0       	breq	.+2      	; 0x154 <EXTI_enuInit+0x76>
     152:	d9 c0       	rjmp	.+434    	; 0x306 <EXTI_enuInit+0x228>
				{
				case 0:
					GICR|=(1<<6);
     154:	ab e5       	ldi	r26, 0x5B	; 91
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	eb e5       	ldi	r30, 0x5B	; 91
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	80 64       	ori	r24, 0x40	; 64
     160:	8c 93       	st	X, r24
					MCUCR&=~(3<<0);
     162:	a5 e5       	ldi	r26, 0x55	; 85
     164:	b0 e0       	ldi	r27, 0x00	; 0
     166:	e5 e5       	ldi	r30, 0x55	; 85
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	8c 7f       	andi	r24, 0xFC	; 252
     16e:	8c 93       	st	X, r24
					switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	88 2f       	mov	r24, r24
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	9c 01       	movw	r18, r24
     178:	22 0f       	add	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	fc 01       	movw	r30, r24
     182:	e2 0f       	add	r30, r18
     184:	f3 1f       	adc	r31, r19
     186:	81 81       	ldd	r24, Z+1	; 0x01
     188:	28 2f       	mov	r18, r24
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	3a 87       	std	Y+10, r19	; 0x0a
     18e:	29 87       	std	Y+9, r18	; 0x09
     190:	89 85       	ldd	r24, Y+9	; 0x09
     192:	9a 85       	ldd	r25, Y+10	; 0x0a
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	91 05       	cpc	r25, r1
     198:	f1 f0       	breq	.+60     	; 0x1d6 <EXTI_enuInit+0xf8>
     19a:	29 85       	ldd	r18, Y+9	; 0x09
     19c:	3a 85       	ldd	r19, Y+10	; 0x0a
     19e:	22 30       	cpi	r18, 0x02	; 2
     1a0:	31 05       	cpc	r19, r1
     1a2:	2c f4       	brge	.+10     	; 0x1ae <EXTI_enuInit+0xd0>
     1a4:	89 85       	ldd	r24, Y+9	; 0x09
     1a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	69 f0       	breq	.+26     	; 0x1c6 <EXTI_enuInit+0xe8>
     1ac:	24 c0       	rjmp	.+72     	; 0x1f6 <EXTI_enuInit+0x118>
     1ae:	29 85       	ldd	r18, Y+9	; 0x09
     1b0:	3a 85       	ldd	r19, Y+10	; 0x0a
     1b2:	22 30       	cpi	r18, 0x02	; 2
     1b4:	31 05       	cpc	r19, r1
     1b6:	09 f4       	brne	.+2      	; 0x1ba <EXTI_enuInit+0xdc>
     1b8:	a6 c0       	rjmp	.+332    	; 0x306 <EXTI_enuInit+0x228>
     1ba:	89 85       	ldd	r24, Y+9	; 0x09
     1bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     1be:	83 30       	cpi	r24, 0x03	; 3
     1c0:	91 05       	cpc	r25, r1
     1c2:	89 f0       	breq	.+34     	; 0x1e6 <EXTI_enuInit+0x108>
     1c4:	18 c0       	rjmp	.+48     	; 0x1f6 <EXTI_enuInit+0x118>
					{
					case FALLING_EDGE:
						MCUCR|=(1<<1);
     1c6:	a5 e5       	ldi	r26, 0x55	; 85
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e5 e5       	ldi	r30, 0x55	; 85
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	82 60       	ori	r24, 0x02	; 2
     1d2:	8c 93       	st	X, r24
     1d4:	98 c0       	rjmp	.+304    	; 0x306 <EXTI_enuInit+0x228>
						break;
					case RISING_EDGE:
						MCUCR|=(3<<0);
     1d6:	a5 e5       	ldi	r26, 0x55	; 85
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	e5 e5       	ldi	r30, 0x55	; 85
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	83 60       	ori	r24, 0x03	; 3
     1e2:	8c 93       	st	X, r24
     1e4:	90 c0       	rjmp	.+288    	; 0x306 <EXTI_enuInit+0x228>
						break;
					case ANY_LOGICAL_CHANGE:
						MCUCR|=(1<<0);
     1e6:	a5 e5       	ldi	r26, 0x55	; 85
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	e5 e5       	ldi	r30, 0x55	; 85
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	8c 93       	st	X, r24
     1f4:	88 c0       	rjmp	.+272    	; 0x306 <EXTI_enuInit+0x228>
						break;
					case LOW_LEVEL:
						break;
					default:
						Local_enuErrorState = ES_Out_Of_Range;
     1f6:	83 e0       	ldi	r24, 0x03	; 3
     1f8:	8a 83       	std	Y+2, r24	; 0x02
     1fa:	85 c0       	rjmp	.+266    	; 0x306 <EXTI_enuInit+0x228>
						break;
					}
					break;
					case 1:
						GICR|=(1<<7);
     1fc:	ab e5       	ldi	r26, 0x5B	; 91
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	eb e5       	ldi	r30, 0x5B	; 91
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	80 68       	ori	r24, 0x80	; 128
     208:	8c 93       	st	X, r24
						MCUCR&=~(3<<2);
     20a:	a5 e5       	ldi	r26, 0x55	; 85
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	e5 e5       	ldi	r30, 0x55	; 85
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	83 7f       	andi	r24, 0xF3	; 243
     216:	8c 93       	st	X, r24
						switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	88 2f       	mov	r24, r24
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	9c 01       	movw	r18, r24
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	9c 81       	ldd	r25, Y+4	; 0x04
     228:	fc 01       	movw	r30, r24
     22a:	e2 0f       	add	r30, r18
     22c:	f3 1f       	adc	r31, r19
     22e:	81 81       	ldd	r24, Z+1	; 0x01
     230:	28 2f       	mov	r18, r24
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	38 87       	std	Y+8, r19	; 0x08
     236:	2f 83       	std	Y+7, r18	; 0x07
     238:	8f 81       	ldd	r24, Y+7	; 0x07
     23a:	98 85       	ldd	r25, Y+8	; 0x08
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	91 05       	cpc	r25, r1
     240:	f1 f0       	breq	.+60     	; 0x27e <EXTI_enuInit+0x1a0>
     242:	2f 81       	ldd	r18, Y+7	; 0x07
     244:	38 85       	ldd	r19, Y+8	; 0x08
     246:	22 30       	cpi	r18, 0x02	; 2
     248:	31 05       	cpc	r19, r1
     24a:	2c f4       	brge	.+10     	; 0x256 <EXTI_enuInit+0x178>
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	69 f0       	breq	.+26     	; 0x26e <EXTI_enuInit+0x190>
     254:	24 c0       	rjmp	.+72     	; 0x29e <EXTI_enuInit+0x1c0>
     256:	2f 81       	ldd	r18, Y+7	; 0x07
     258:	38 85       	ldd	r19, Y+8	; 0x08
     25a:	22 30       	cpi	r18, 0x02	; 2
     25c:	31 05       	cpc	r19, r1
     25e:	09 f4       	brne	.+2      	; 0x262 <EXTI_enuInit+0x184>
     260:	52 c0       	rjmp	.+164    	; 0x306 <EXTI_enuInit+0x228>
     262:	8f 81       	ldd	r24, Y+7	; 0x07
     264:	98 85       	ldd	r25, Y+8	; 0x08
     266:	83 30       	cpi	r24, 0x03	; 3
     268:	91 05       	cpc	r25, r1
     26a:	89 f0       	breq	.+34     	; 0x28e <EXTI_enuInit+0x1b0>
     26c:	18 c0       	rjmp	.+48     	; 0x29e <EXTI_enuInit+0x1c0>
						{
						case FALLING_EDGE:
							MCUCR|=(1<<3);
     26e:	a5 e5       	ldi	r26, 0x55	; 85
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	e5 e5       	ldi	r30, 0x55	; 85
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	88 60       	ori	r24, 0x08	; 8
     27a:	8c 93       	st	X, r24
     27c:	44 c0       	rjmp	.+136    	; 0x306 <EXTI_enuInit+0x228>
							break;
						case RISING_EDGE:
							MCUCR|=(3<<2);
     27e:	a5 e5       	ldi	r26, 0x55	; 85
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	e5 e5       	ldi	r30, 0x55	; 85
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	8c 60       	ori	r24, 0x0C	; 12
     28a:	8c 93       	st	X, r24
     28c:	3c c0       	rjmp	.+120    	; 0x306 <EXTI_enuInit+0x228>
							break;
						case ANY_LOGICAL_CHANGE:
							MCUCR|=(1<<2);
     28e:	a5 e5       	ldi	r26, 0x55	; 85
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	e5 e5       	ldi	r30, 0x55	; 85
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	84 60       	ori	r24, 0x04	; 4
     29a:	8c 93       	st	X, r24
     29c:	34 c0       	rjmp	.+104    	; 0x306 <EXTI_enuInit+0x228>
							break;
						case LOW_LEVEL:
							break;
						default:
							Local_enuErrorState = ES_Out_Of_Range;
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	8a 83       	std	Y+2, r24	; 0x02
     2a2:	31 c0       	rjmp	.+98     	; 0x306 <EXTI_enuInit+0x228>
						}
						break;


						case 2:
							GICR|=(1<<5);
     2a4:	ab e5       	ldi	r26, 0x5B	; 91
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	eb e5       	ldi	r30, 0x5B	; 91
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	80 62       	ori	r24, 0x20	; 32
     2b0:	8c 93       	st	X, r24
							MCUCSR&=~(1<<6);
     2b2:	a4 e5       	ldi	r26, 0x54	; 84
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	e4 e5       	ldi	r30, 0x54	; 84
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	8f 7b       	andi	r24, 0xBF	; 191
     2be:	8c 93       	st	X, r24
							switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	88 2f       	mov	r24, r24
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	9c 01       	movw	r18, r24
     2c8:	22 0f       	add	r18, r18
     2ca:	33 1f       	adc	r19, r19
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	fc 01       	movw	r30, r24
     2d2:	e2 0f       	add	r30, r18
     2d4:	f3 1f       	adc	r31, r19
     2d6:	81 81       	ldd	r24, Z+1	; 0x01
     2d8:	28 2f       	mov	r18, r24
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	3e 83       	std	Y+6, r19	; 0x06
     2de:	2d 83       	std	Y+5, r18	; 0x05
     2e0:	8d 81       	ldd	r24, Y+5	; 0x05
     2e2:	9e 81       	ldd	r25, Y+6	; 0x06
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	79 f0       	breq	.+30     	; 0x306 <EXTI_enuInit+0x228>
     2e8:	2d 81       	ldd	r18, Y+5	; 0x05
     2ea:	3e 81       	ldd	r19, Y+6	; 0x06
     2ec:	21 30       	cpi	r18, 0x01	; 1
     2ee:	31 05       	cpc	r19, r1
     2f0:	41 f4       	brne	.+16     	; 0x302 <EXTI_enuInit+0x224>
							{
							case FALLING_EDGE:
								break;
							case RISING_EDGE:
								MCUCSR|=(1<<6);
     2f2:	a4 e5       	ldi	r26, 0x54	; 84
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	e4 e5       	ldi	r30, 0x54	; 84
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	80 64       	ori	r24, 0x40	; 64
     2fe:	8c 93       	st	X, r24
     300:	02 c0       	rjmp	.+4      	; 0x306 <EXTI_enuInit+0x228>
								break;
							default:
								Local_enuErrorState = ES_Out_Of_Range;
     302:	83 e0       	ldi	r24, 0x03	; 3
     304:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrEXTIConfig)
	{
		u8 Local_u8Iretator = 0;
		for(Local_u8Iretator = 0;Local_u8Iretator<3;Local_u8Iretator++)
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	89 83       	std	Y+1, r24	; 0x01
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	83 30       	cpi	r24, 0x03	; 3
     310:	08 f4       	brcc	.+2      	; 0x314 <EXTI_enuInit+0x236>
     312:	fb ce       	rjmp	.-522    	; 0x10a <EXTI_enuInit+0x2c>
     314:	02 c0       	rjmp	.+4      	; 0x31a <EXTI_enuInit+0x23c>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState;
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     31c:	2c 96       	adiw	r28, 0x0c	; 12
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	cf 91       	pop	r28
     32a:	df 91       	pop	r29
     32c:	08 95       	ret

0000032e <EXTI_enuSetSenceMode>:
ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceLevel)
{
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	2b 97       	sbiw	r28, 0x0b	; 11
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
     342:	8a 83       	std	Y+2, r24	; 0x02
     344:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTI_ID)
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	28 2f       	mov	r18, r24
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	3b 87       	std	Y+11, r19	; 0x0b
     352:	2a 87       	std	Y+10, r18	; 0x0a
     354:	8a 85       	ldd	r24, Y+10	; 0x0a
     356:	9b 85       	ldd	r25, Y+11	; 0x0b
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	91 05       	cpc	r25, r1
     35c:	09 f4       	brne	.+2      	; 0x360 <EXTI_enuSetSenceMode+0x32>
     35e:	4d c0       	rjmp	.+154    	; 0x3fa <EXTI_enuSetSenceMode+0xcc>
     360:	2a 85       	ldd	r18, Y+10	; 0x0a
     362:	3b 85       	ldd	r19, Y+11	; 0x0b
     364:	22 30       	cpi	r18, 0x02	; 2
     366:	31 05       	cpc	r19, r1
     368:	09 f4       	brne	.+2      	; 0x36c <EXTI_enuSetSenceMode+0x3e>
     36a:	89 c0       	rjmp	.+274    	; 0x47e <EXTI_enuSetSenceMode+0x150>
     36c:	8a 85       	ldd	r24, Y+10	; 0x0a
     36e:	9b 85       	ldd	r25, Y+11	; 0x0b
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	09 f0       	breq	.+2      	; 0x376 <EXTI_enuSetSenceMode+0x48>
     374:	a3 c0       	rjmp	.+326    	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
	{
	case 0:
		MCUCR&=~(3<<0);
     376:	a5 e5       	ldi	r26, 0x55	; 85
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e5 e5       	ldi	r30, 0x55	; 85
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	8c 7f       	andi	r24, 0xFC	; 252
     382:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	39 87       	std	Y+9, r19	; 0x09
     38c:	28 87       	std	Y+8, r18	; 0x08
     38e:	88 85       	ldd	r24, Y+8	; 0x08
     390:	99 85       	ldd	r25, Y+9	; 0x09
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	91 05       	cpc	r25, r1
     396:	f1 f0       	breq	.+60     	; 0x3d4 <EXTI_enuSetSenceMode+0xa6>
     398:	28 85       	ldd	r18, Y+8	; 0x08
     39a:	39 85       	ldd	r19, Y+9	; 0x09
     39c:	22 30       	cpi	r18, 0x02	; 2
     39e:	31 05       	cpc	r19, r1
     3a0:	2c f4       	brge	.+10     	; 0x3ac <EXTI_enuSetSenceMode+0x7e>
     3a2:	88 85       	ldd	r24, Y+8	; 0x08
     3a4:	99 85       	ldd	r25, Y+9	; 0x09
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	69 f0       	breq	.+26     	; 0x3c4 <EXTI_enuSetSenceMode+0x96>
     3aa:	24 c0       	rjmp	.+72     	; 0x3f4 <EXTI_enuSetSenceMode+0xc6>
     3ac:	28 85       	ldd	r18, Y+8	; 0x08
     3ae:	39 85       	ldd	r19, Y+9	; 0x09
     3b0:	22 30       	cpi	r18, 0x02	; 2
     3b2:	31 05       	cpc	r19, r1
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <EXTI_enuSetSenceMode+0x8a>
     3b6:	82 c0       	rjmp	.+260    	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
     3b8:	88 85       	ldd	r24, Y+8	; 0x08
     3ba:	99 85       	ldd	r25, Y+9	; 0x09
     3bc:	83 30       	cpi	r24, 0x03	; 3
     3be:	91 05       	cpc	r25, r1
     3c0:	89 f0       	breq	.+34     	; 0x3e4 <EXTI_enuSetSenceMode+0xb6>
     3c2:	18 c0       	rjmp	.+48     	; 0x3f4 <EXTI_enuSetSenceMode+0xc6>
		{
		case FALLING_EDGE:
			MCUCR|=(1<<1);
     3c4:	a5 e5       	ldi	r26, 0x55	; 85
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	e5 e5       	ldi	r30, 0x55	; 85
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	82 60       	ori	r24, 0x02	; 2
     3d0:	8c 93       	st	X, r24
     3d2:	74 c0       	rjmp	.+232    	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		case RISING_EDGE:
			MCUCR|=(3<<0);
     3d4:	a5 e5       	ldi	r26, 0x55	; 85
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e5 e5       	ldi	r30, 0x55	; 85
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	83 60       	ori	r24, 0x03	; 3
     3e0:	8c 93       	st	X, r24
     3e2:	6c c0       	rjmp	.+216    	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		case ANY_LOGICAL_CHANGE:
			MCUCR|=(1<<0);
     3e4:	a5 e5       	ldi	r26, 0x55	; 85
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e5 e5       	ldi	r30, 0x55	; 85
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	8c 93       	st	X, r24
     3f2:	64 c0       	rjmp	.+200    	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		case LOW_LEVEL:
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	61 c0       	rjmp	.+194    	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		}
		break;
	case 1:
		MCUCR&=~(3<<2);
     3fa:	a5 e5       	ldi	r26, 0x55	; 85
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	e5 e5       	ldi	r30, 0x55	; 85
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	83 7f       	andi	r24, 0xF3	; 243
     406:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	28 2f       	mov	r18, r24
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	3f 83       	std	Y+7, r19	; 0x07
     410:	2e 83       	std	Y+6, r18	; 0x06
     412:	8e 81       	ldd	r24, Y+6	; 0x06
     414:	9f 81       	ldd	r25, Y+7	; 0x07
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	91 05       	cpc	r25, r1
     41a:	f1 f0       	breq	.+60     	; 0x458 <EXTI_enuSetSenceMode+0x12a>
     41c:	2e 81       	ldd	r18, Y+6	; 0x06
     41e:	3f 81       	ldd	r19, Y+7	; 0x07
     420:	22 30       	cpi	r18, 0x02	; 2
     422:	31 05       	cpc	r19, r1
     424:	2c f4       	brge	.+10     	; 0x430 <EXTI_enuSetSenceMode+0x102>
     426:	8e 81       	ldd	r24, Y+6	; 0x06
     428:	9f 81       	ldd	r25, Y+7	; 0x07
     42a:	00 97       	sbiw	r24, 0x00	; 0
     42c:	69 f0       	breq	.+26     	; 0x448 <EXTI_enuSetSenceMode+0x11a>
     42e:	24 c0       	rjmp	.+72     	; 0x478 <EXTI_enuSetSenceMode+0x14a>
     430:	2e 81       	ldd	r18, Y+6	; 0x06
     432:	3f 81       	ldd	r19, Y+7	; 0x07
     434:	22 30       	cpi	r18, 0x02	; 2
     436:	31 05       	cpc	r19, r1
     438:	09 f4       	brne	.+2      	; 0x43c <EXTI_enuSetSenceMode+0x10e>
     43a:	40 c0       	rjmp	.+128    	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
     43c:	8e 81       	ldd	r24, Y+6	; 0x06
     43e:	9f 81       	ldd	r25, Y+7	; 0x07
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	91 05       	cpc	r25, r1
     444:	89 f0       	breq	.+34     	; 0x468 <EXTI_enuSetSenceMode+0x13a>
     446:	18 c0       	rjmp	.+48     	; 0x478 <EXTI_enuSetSenceMode+0x14a>
		{
		case FALLING_EDGE:
			MCUCR|=(1<<3);
     448:	a5 e5       	ldi	r26, 0x55	; 85
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	e5 e5       	ldi	r30, 0x55	; 85
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	88 60       	ori	r24, 0x08	; 8
     454:	8c 93       	st	X, r24
     456:	32 c0       	rjmp	.+100    	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		case RISING_EDGE:
			MCUCR|=(3<<2);
     458:	a5 e5       	ldi	r26, 0x55	; 85
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e5 e5       	ldi	r30, 0x55	; 85
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	8c 60       	ori	r24, 0x0C	; 12
     464:	8c 93       	st	X, r24
     466:	2a c0       	rjmp	.+84     	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		case ANY_LOGICAL_CHANGE:
			MCUCR|=(1<<2);
     468:	a5 e5       	ldi	r26, 0x55	; 85
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	e5 e5       	ldi	r30, 0x55	; 85
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	84 60       	ori	r24, 0x04	; 4
     474:	8c 93       	st	X, r24
     476:	22 c0       	rjmp	.+68     	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		case LOW_LEVEL:
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     478:	83 e0       	ldi	r24, 0x03	; 3
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	1f c0       	rjmp	.+62     	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		}
		break;
	case 2:
		MCUCSR&=~(1<<6);
     47e:	a4 e5       	ldi	r26, 0x54	; 84
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	e4 e5       	ldi	r30, 0x54	; 84
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	8f 7b       	andi	r24, 0xBF	; 191
     48a:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	28 2f       	mov	r18, r24
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	3d 83       	std	Y+5, r19	; 0x05
     494:	2c 83       	std	Y+4, r18	; 0x04
     496:	8c 81       	ldd	r24, Y+4	; 0x04
     498:	9d 81       	ldd	r25, Y+5	; 0x05
     49a:	00 97       	sbiw	r24, 0x00	; 0
     49c:	79 f0       	breq	.+30     	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
     49e:	2c 81       	ldd	r18, Y+4	; 0x04
     4a0:	3d 81       	ldd	r19, Y+5	; 0x05
     4a2:	21 30       	cpi	r18, 0x01	; 1
     4a4:	31 05       	cpc	r19, r1
     4a6:	41 f4       	brne	.+16     	; 0x4b8 <EXTI_enuSetSenceMode+0x18a>
		{
		case FALLING_EDGE:
			break;
		case RISING_EDGE:
			MCUCSR|=(1<<6);
     4a8:	a4 e5       	ldi	r26, 0x54	; 84
     4aa:	b0 e0       	ldi	r27, 0x00	; 0
     4ac:	e4 e5       	ldi	r30, 0x54	; 84
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	8c 93       	st	X, r24
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <EXTI_enuSetSenceMode+0x18e>
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		break;
	}

return Local_enuErrorState;
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
}
     4be:	2b 96       	adiw	r28, 0x0b	; 11
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	cf 91       	pop	r28
     4cc:	df 91       	pop	r29
     4ce:	08 95       	ret

000004d0 <EXTI_enuEnableINT>:
ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <EXTI_enuEnableINT+0x6>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <EXTI_enuEnableINT+0x8>
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTI_ID)
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	28 2f       	mov	r18, r24
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	3c 83       	std	Y+4, r19	; 0x04
     4ea:	2b 83       	std	Y+3, r18	; 0x03
     4ec:	8b 81       	ldd	r24, Y+3	; 0x03
     4ee:	9c 81       	ldd	r25, Y+4	; 0x04
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	91 05       	cpc	r25, r1
     4f4:	89 f0       	breq	.+34     	; 0x518 <EXTI_enuEnableINT+0x48>
     4f6:	2b 81       	ldd	r18, Y+3	; 0x03
     4f8:	3c 81       	ldd	r19, Y+4	; 0x04
     4fa:	22 30       	cpi	r18, 0x02	; 2
     4fc:	31 05       	cpc	r19, r1
     4fe:	a1 f0       	breq	.+40     	; 0x528 <EXTI_enuEnableINT+0x58>
     500:	8b 81       	ldd	r24, Y+3	; 0x03
     502:	9c 81       	ldd	r25, Y+4	; 0x04
     504:	00 97       	sbiw	r24, 0x00	; 0
     506:	c1 f4       	brne	.+48     	; 0x538 <EXTI_enuEnableINT+0x68>
	{
	case 0:
		GICR|=(1<<6);
     508:	ab e5       	ldi	r26, 0x5B	; 91
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	eb e5       	ldi	r30, 0x5B	; 91
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	80 64       	ori	r24, 0x40	; 64
     514:	8c 93       	st	X, r24
     516:	12 c0       	rjmp	.+36     	; 0x53c <EXTI_enuEnableINT+0x6c>
		break;
	case 1:
		GICR|=(1<<7);
     518:	ab e5       	ldi	r26, 0x5B	; 91
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	eb e5       	ldi	r30, 0x5B	; 91
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	80 68       	ori	r24, 0x80	; 128
     524:	8c 93       	st	X, r24
     526:	0a c0       	rjmp	.+20     	; 0x53c <EXTI_enuEnableINT+0x6c>
		break;
	case 2:
		GICR|=(1<<5);
     528:	ab e5       	ldi	r26, 0x5B	; 91
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	eb e5       	ldi	r30, 0x5B	; 91
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	80 62       	ori	r24, 0x20	; 32
     534:	8c 93       	st	X, r24
     536:	02 c0       	rjmp	.+4      	; 0x53c <EXTI_enuEnableINT+0x6c>
		break;
	default:
		Local_enuErrorState = ES_Out_Of_Range;
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

return Local_enuErrorState;
     53c:	89 81       	ldd	r24, Y+1	; 0x01
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <EXTI_enuDisableINT>:
ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	00 d0       	rcall	.+0      	; 0x552 <EXTI_enuDisableINT+0x6>
     552:	00 d0       	rcall	.+0      	; 0x554 <EXTI_enuDisableINT+0x8>
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTI_ID)
     55e:	8a 81       	ldd	r24, Y+2	; 0x02
     560:	28 2f       	mov	r18, r24
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	3c 83       	std	Y+4, r19	; 0x04
     566:	2b 83       	std	Y+3, r18	; 0x03
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	9c 81       	ldd	r25, Y+4	; 0x04
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	91 05       	cpc	r25, r1
     570:	89 f0       	breq	.+34     	; 0x594 <EXTI_enuDisableINT+0x48>
     572:	2b 81       	ldd	r18, Y+3	; 0x03
     574:	3c 81       	ldd	r19, Y+4	; 0x04
     576:	22 30       	cpi	r18, 0x02	; 2
     578:	31 05       	cpc	r19, r1
     57a:	a1 f0       	breq	.+40     	; 0x5a4 <EXTI_enuDisableINT+0x58>
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	9c 81       	ldd	r25, Y+4	; 0x04
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	c1 f4       	brne	.+48     	; 0x5b4 <EXTI_enuDisableINT+0x68>
		{
		case 0:
			GICR&=~(1<<6);
     584:	ab e5       	ldi	r26, 0x5B	; 91
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	eb e5       	ldi	r30, 0x5B	; 91
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	8f 7b       	andi	r24, 0xBF	; 191
     590:	8c 93       	st	X, r24
     592:	12 c0       	rjmp	.+36     	; 0x5b8 <EXTI_enuDisableINT+0x6c>
			break;
		case 1:
			GICR&=~(1<<7);
     594:	ab e5       	ldi	r26, 0x5B	; 91
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	eb e5       	ldi	r30, 0x5B	; 91
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	8f 77       	andi	r24, 0x7F	; 127
     5a0:	8c 93       	st	X, r24
     5a2:	0a c0       	rjmp	.+20     	; 0x5b8 <EXTI_enuDisableINT+0x6c>
			break;
		case 2:
			GICR&=~(1<<5);
     5a4:	ab e5       	ldi	r26, 0x5B	; 91
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	eb e5       	ldi	r30, 0x5B	; 91
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	8f 7d       	andi	r24, 0xDF	; 223
     5b0:	8c 93       	st	X, r24
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <EXTI_enuDisableINT+0x6c>
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     5b4:	83 e0       	ldi	r24, 0x03	; 3
     5b6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_enuErrorState;
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	08 95       	ret

000005c8 <EXTI_enuCallBackF>:

ES_t EXTI_enuCallBackF(void(*Copy_PFunApp)(void),u8 Copy_u8EXTI_ID)
{
     5c8:	df 93       	push	r29
     5ca:	cf 93       	push	r28
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <EXTI_enuCallBackF+0x6>
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <EXTI_enuCallBackF+0x8>
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	9b 83       	std	Y+3, r25	; 0x03
     5d6:	8a 83       	std	Y+2, r24	; 0x02
     5d8:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_PFunApp)
     5de:	8a 81       	ldd	r24, Y+2	; 0x02
     5e0:	9b 81       	ldd	r25, Y+3	; 0x03
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	99 f0       	breq	.+38     	; 0x60c <EXTI_enuCallBackF+0x44>
	{
		if(Copy_u8EXTI_ID<3)
     5e6:	8c 81       	ldd	r24, Y+4	; 0x04
     5e8:	83 30       	cpi	r24, 0x03	; 3
     5ea:	68 f4       	brcc	.+26     	; 0x606 <EXTI_enuCallBackF+0x3e>
			EXTI_APFunINIT[Copy_u8EXTI_ID] = Copy_PFunApp;
     5ec:	8c 81       	ldd	r24, Y+4	; 0x04
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	2a 81       	ldd	r18, Y+2	; 0x02
     5f4:	3b 81       	ldd	r19, Y+3	; 0x03
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	fc 01       	movw	r30, r24
     5fc:	ea 59       	subi	r30, 0x9A	; 154
     5fe:	ff 4f       	sbci	r31, 0xFF	; 255
     600:	31 83       	std	Z+1, r19	; 0x01
     602:	20 83       	st	Z, r18
     604:	05 c0       	rjmp	.+10     	; 0x610 <EXTI_enuCallBackF+0x48>
		else
			Local_enuErrorState = ES_Out_Of_Range;
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	02 c0       	rjmp	.+4      	; 0x610 <EXTI_enuCallBackF+0x48>
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
     610:	89 81       	ldd	r24, Y+1	; 0x01
}
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	cf 91       	pop	r28
     61c:	df 91       	pop	r29
     61e:	08 95       	ret

00000620 <__vector_1>:
ISR(VECT_INT0)
{
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	2f 93       	push	r18
     62c:	3f 93       	push	r19
     62e:	4f 93       	push	r20
     630:	5f 93       	push	r21
     632:	6f 93       	push	r22
     634:	7f 93       	push	r23
     636:	8f 93       	push	r24
     638:	9f 93       	push	r25
     63a:	af 93       	push	r26
     63c:	bf 93       	push	r27
     63e:	ef 93       	push	r30
     640:	ff 93       	push	r31
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[0])
     64a:	80 91 66 00 	lds	r24, 0x0066
     64e:	90 91 67 00 	lds	r25, 0x0067
     652:	00 97       	sbiw	r24, 0x00	; 0
     654:	29 f0       	breq	.+10     	; 0x660 <__vector_1+0x40>
	{
		EXTI_APFunINIT[0]();
     656:	e0 91 66 00 	lds	r30, 0x0066
     65a:	f0 91 67 00 	lds	r31, 0x0067
     65e:	09 95       	icall
	}
}
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_2>:

ISR(VECT_INT1)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[1])
     6b0:	80 91 68 00 	lds	r24, 0x0068
     6b4:	90 91 69 00 	lds	r25, 0x0069
     6b8:	00 97       	sbiw	r24, 0x00	; 0
     6ba:	29 f0       	breq	.+10     	; 0x6c6 <__vector_2+0x40>
		{
			EXTI_APFunINIT[1]();
     6bc:	e0 91 68 00 	lds	r30, 0x0068
     6c0:	f0 91 69 00 	lds	r31, 0x0069
     6c4:	09 95       	icall
		}
}
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	5f 91       	pop	r21
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_3>:

ISR(VECT_INT2)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[2])
     716:	80 91 6a 00 	lds	r24, 0x006A
     71a:	90 91 6b 00 	lds	r25, 0x006B
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	29 f0       	breq	.+10     	; 0x72c <__vector_3+0x40>
		{
			EXTI_APFunINIT[2]();
     722:	e0 91 6a 00 	lds	r30, 0x006A
     726:	f0 91 6b 00 	lds	r31, 0x006B
     72a:	09 95       	icall
		}
}
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	ff 91       	pop	r31
     732:	ef 91       	pop	r30
     734:	bf 91       	pop	r27
     736:	af 91       	pop	r26
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	7f 91       	pop	r23
     73e:	6f 91       	pop	r22
     740:	5f 91       	pop	r21
     742:	4f 91       	pop	r20
     744:	3f 91       	pop	r19
     746:	2f 91       	pop	r18
     748:	0f 90       	pop	r0
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	0f 90       	pop	r0
     74e:	1f 90       	pop	r1
     750:	18 95       	reti

00000752 <DIO_enuInit>:
#include "../DIO/DIO_config.h"
#include "../DIO/DIO_Private.h"


ES_t DIO_enuInit(void)
{
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	0f 92       	push	r0
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     760:	ea e3       	ldi	r30, 0x3A	; 58
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	8f ef       	ldi	r24, 0xFF	; 255
     766:	80 83       	st	Z, r24

	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     768:	e7 e3       	ldi	r30, 0x37	; 55
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	86 eb       	ldi	r24, 0xB6	; 182
     76e:	80 83       	st	Z, r24

	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     770:	e4 e3       	ldi	r30, 0x34	; 52
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	86 eb       	ldi	r24, 0xB6	; 182
     776:	80 83       	st	Z, r24

	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     778:	e1 e3       	ldi	r30, 0x31	; 49
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	86 eb       	ldi	r24, 0xB6	; 182
     77e:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
     780:	eb e3       	ldi	r30, 0x3B	; 59
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	10 82       	st	Z, r1

	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
     786:	e8 e3       	ldi	r30, 0x38	; 56
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	8a e3       	ldi	r24, 0x3A	; 58
     78c:	80 83       	st	Z, r24

	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
     78e:	e5 e3       	ldi	r30, 0x35	; 53
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	8a e3       	ldi	r24, 0x3A	; 58
     794:	80 83       	st	Z, r24

	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
     796:	e2 e3       	ldi	r30, 0x32	; 50
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	8a e3       	ldi	r24, 0x3A	; 58
     79c:	80 83       	st	Z, r24

	Local_enuErrorStates = ES_OK;
     79e:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorStates;
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
}
     7a2:	0f 90       	pop	r0
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	08 95       	ret

000007aa <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <DIO_enuSetPortDir+0x6>
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <DIO_enuSetPortDir+0x8>
     7b2:	0f 92       	push	r0
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	8a 83       	std	Y+2, r24	; 0x02
     7ba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	84 30       	cpi	r24, 0x04	; 4
     7c4:	a0 f5       	brcc	.+104    	; 0x82e <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	28 2f       	mov	r18, r24
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	3d 83       	std	Y+5, r19	; 0x05
     7ce:	2c 83       	std	Y+4, r18	; 0x04
     7d0:	8c 81       	ldd	r24, Y+4	; 0x04
     7d2:	9d 81       	ldd	r25, Y+5	; 0x05
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	91 05       	cpc	r25, r1
     7d8:	d1 f0       	breq	.+52     	; 0x80e <DIO_enuSetPortDir+0x64>
     7da:	2c 81       	ldd	r18, Y+4	; 0x04
     7dc:	3d 81       	ldd	r19, Y+5	; 0x05
     7de:	22 30       	cpi	r18, 0x02	; 2
     7e0:	31 05       	cpc	r19, r1
     7e2:	2c f4       	brge	.+10     	; 0x7ee <DIO_enuSetPortDir+0x44>
     7e4:	8c 81       	ldd	r24, Y+4	; 0x04
     7e6:	9d 81       	ldd	r25, Y+5	; 0x05
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	61 f0       	breq	.+24     	; 0x804 <DIO_enuSetPortDir+0x5a>
     7ec:	1e c0       	rjmp	.+60     	; 0x82a <DIO_enuSetPortDir+0x80>
     7ee:	2c 81       	ldd	r18, Y+4	; 0x04
     7f0:	3d 81       	ldd	r19, Y+5	; 0x05
     7f2:	22 30       	cpi	r18, 0x02	; 2
     7f4:	31 05       	cpc	r19, r1
     7f6:	81 f0       	breq	.+32     	; 0x818 <DIO_enuSetPortDir+0x6e>
     7f8:	8c 81       	ldd	r24, Y+4	; 0x04
     7fa:	9d 81       	ldd	r25, Y+5	; 0x05
     7fc:	83 30       	cpi	r24, 0x03	; 3
     7fe:	91 05       	cpc	r25, r1
     800:	81 f0       	breq	.+32     	; 0x822 <DIO_enuSetPortDir+0x78>
     802:	13 c0       	rjmp	.+38     	; 0x82a <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
					DDRA = Copy_u8PortValue;break;
     804:	ea e3       	ldi	r30, 0x3A	; 58
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	80 83       	st	Z, r24
     80c:	0e c0       	rjmp	.+28     	; 0x82a <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
					DDRB = Copy_u8PortValue;break;
     80e:	e7 e3       	ldi	r30, 0x37	; 55
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	80 83       	st	Z, r24
     816:	09 c0       	rjmp	.+18     	; 0x82a <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
					DDRC= Copy_u8PortValue;break;
     818:	e4 e3       	ldi	r30, 0x34	; 52
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	80 83       	st	Z, r24
     820:	04 c0       	rjmp	.+8      	; 0x82a <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
					DDRD = Copy_u8PortValue;break;
     822:	e1 e3       	ldi	r30, 0x31	; 49
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	8b 81       	ldd	r24, Y+3	; 0x03
     828:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	02 c0       	rjmp	.+4      	; 0x832 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     832:	89 81       	ldd	r24, Y+1	; 0x01
}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	08 95       	ret

00000844 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	00 d0       	rcall	.+0      	; 0x84a <DIO_enuSetPortVAL+0x6>
     84a:	00 d0       	rcall	.+0      	; 0x84c <DIO_enuSetPortVAL+0x8>
     84c:	0f 92       	push	r0
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	8a 83       	std	Y+2, r24	; 0x02
     854:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	a0 f5       	brcc	.+104    	; 0x8c8 <__stack+0x69>
		{
			switch(Copy_u8PortID)
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	28 2f       	mov	r18, r24
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	3d 83       	std	Y+5, r19	; 0x05
     868:	2c 83       	std	Y+4, r18	; 0x04
     86a:	8c 81       	ldd	r24, Y+4	; 0x04
     86c:	9d 81       	ldd	r25, Y+5	; 0x05
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	91 05       	cpc	r25, r1
     872:	d1 f0       	breq	.+52     	; 0x8a8 <__stack+0x49>
     874:	2c 81       	ldd	r18, Y+4	; 0x04
     876:	3d 81       	ldd	r19, Y+5	; 0x05
     878:	22 30       	cpi	r18, 0x02	; 2
     87a:	31 05       	cpc	r19, r1
     87c:	2c f4       	brge	.+10     	; 0x888 <__stack+0x29>
     87e:	8c 81       	ldd	r24, Y+4	; 0x04
     880:	9d 81       	ldd	r25, Y+5	; 0x05
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	61 f0       	breq	.+24     	; 0x89e <__stack+0x3f>
     886:	1e c0       	rjmp	.+60     	; 0x8c4 <__stack+0x65>
     888:	2c 81       	ldd	r18, Y+4	; 0x04
     88a:	3d 81       	ldd	r19, Y+5	; 0x05
     88c:	22 30       	cpi	r18, 0x02	; 2
     88e:	31 05       	cpc	r19, r1
     890:	81 f0       	breq	.+32     	; 0x8b2 <__stack+0x53>
     892:	8c 81       	ldd	r24, Y+4	; 0x04
     894:	9d 81       	ldd	r25, Y+5	; 0x05
     896:	83 30       	cpi	r24, 0x03	; 3
     898:	91 05       	cpc	r25, r1
     89a:	81 f0       	breq	.+32     	; 0x8bc <__stack+0x5d>
     89c:	13 c0       	rjmp	.+38     	; 0x8c4 <__stack+0x65>
			{
			case DIO_PORTA:
						PORTA = Copy_u8PortValue;break;
     89e:	eb e3       	ldi	r30, 0x3B	; 59
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	80 83       	st	Z, r24
     8a6:	0e c0       	rjmp	.+28     	; 0x8c4 <__stack+0x65>
			case DIO_PORTB:
						PORTB = Copy_u8PortValue;break;
     8a8:	e8 e3       	ldi	r30, 0x38	; 56
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	80 83       	st	Z, r24
     8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__stack+0x65>
			case DIO_PORTC:
						PORTC= Copy_u8PortValue;break;
     8b2:	e5 e3       	ldi	r30, 0x35	; 53
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	80 83       	st	Z, r24
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__stack+0x65>
			case DIO_PORTD:
						PORTD = Copy_u8PortValue;break;
     8bc:	e2 e3       	ldi	r30, 0x32	; 50
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     8c4:	19 82       	std	Y+1, r1	; 0x01
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	08 95       	ret

000008de <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <DIO_enuToggelPort+0x6>
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <DIO_enuToggelPort+0x8>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	84 30       	cpi	r24, 0x04	; 4
     8f4:	08 f0       	brcs	.+2      	; 0x8f8 <DIO_enuToggelPort+0x1a>
     8f6:	40 c0       	rjmp	.+128    	; 0x978 <DIO_enuToggelPort+0x9a>
			{
				switch(Copy_u8PortID)
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	3c 83       	std	Y+4, r19	; 0x04
     900:	2b 83       	std	Y+3, r18	; 0x03
     902:	8b 81       	ldd	r24, Y+3	; 0x03
     904:	9c 81       	ldd	r25, Y+4	; 0x04
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	91 05       	cpc	r25, r1
     90a:	e9 f0       	breq	.+58     	; 0x946 <DIO_enuToggelPort+0x68>
     90c:	2b 81       	ldd	r18, Y+3	; 0x03
     90e:	3c 81       	ldd	r19, Y+4	; 0x04
     910:	22 30       	cpi	r18, 0x02	; 2
     912:	31 05       	cpc	r19, r1
     914:	2c f4       	brge	.+10     	; 0x920 <DIO_enuToggelPort+0x42>
     916:	8b 81       	ldd	r24, Y+3	; 0x03
     918:	9c 81       	ldd	r25, Y+4	; 0x04
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	61 f0       	breq	.+24     	; 0x936 <DIO_enuToggelPort+0x58>
     91e:	2a c0       	rjmp	.+84     	; 0x974 <DIO_enuToggelPort+0x96>
     920:	2b 81       	ldd	r18, Y+3	; 0x03
     922:	3c 81       	ldd	r19, Y+4	; 0x04
     924:	22 30       	cpi	r18, 0x02	; 2
     926:	31 05       	cpc	r19, r1
     928:	b1 f0       	breq	.+44     	; 0x956 <DIO_enuToggelPort+0x78>
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	9c 81       	ldd	r25, Y+4	; 0x04
     92e:	83 30       	cpi	r24, 0x03	; 3
     930:	91 05       	cpc	r25, r1
     932:	c9 f0       	breq	.+50     	; 0x966 <DIO_enuToggelPort+0x88>
     934:	1f c0       	rjmp	.+62     	; 0x974 <DIO_enuToggelPort+0x96>
				{
				case DIO_PORTA:
							PORTA = ~PORTA ;break;
     936:	ab e3       	ldi	r26, 0x3B	; 59
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	eb e3       	ldi	r30, 0x3B	; 59
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	80 95       	com	r24
     942:	8c 93       	st	X, r24
     944:	17 c0       	rjmp	.+46     	; 0x974 <DIO_enuToggelPort+0x96>
				case DIO_PORTB:
							PORTB = ~PORTB ;break;
     946:	a8 e3       	ldi	r26, 0x38	; 56
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 e3       	ldi	r30, 0x38	; 56
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	80 95       	com	r24
     952:	8c 93       	st	X, r24
     954:	0f c0       	rjmp	.+30     	; 0x974 <DIO_enuToggelPort+0x96>
				case DIO_PORTC:
							PORTC = ~PORTC ;break;
     956:	a5 e3       	ldi	r26, 0x35	; 53
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e5 e3       	ldi	r30, 0x35	; 53
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	80 95       	com	r24
     962:	8c 93       	st	X, r24
     964:	07 c0       	rjmp	.+14     	; 0x974 <DIO_enuToggelPort+0x96>
				case DIO_PORTD:
							PORTD = ~PORTD ;break;
     966:	a2 e3       	ldi	r26, 0x32	; 50
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e2 e3       	ldi	r30, 0x32	; 50
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	80 95       	com	r24
     972:	8c 93       	st	X, r24
				}
				Local_enuErrorStates = ES_OK;
     974:	19 82       	std	Y+1, r1	; 0x01
     976:	02 c0       	rjmp	.+4      	; 0x97c <DIO_enuToggelPort+0x9e>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	89 83       	std	Y+1, r24	; 0x01
			}
	return Local_enuErrorStates;
     97c:	89 81       	ldd	r24, Y+1	; 0x01
}
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	cf 91       	pop	r28
     988:	df 91       	pop	r29
     98a:	08 95       	ret

0000098c <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
     98c:	df 93       	push	r29
     98e:	cf 93       	push	r28
     990:	00 d0       	rcall	.+0      	; 0x992 <DIO_enuGetPortVAL+0x6>
     992:	00 d0       	rcall	.+0      	; 0x994 <DIO_enuGetPortVAL+0x8>
     994:	00 d0       	rcall	.+0      	; 0x996 <DIO_enuGetPortVAL+0xa>
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
     99a:	8a 83       	std	Y+2, r24	; 0x02
     99c:	7c 83       	std	Y+4, r23	; 0x04
     99e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
     9a4:	8b 81       	ldd	r24, Y+3	; 0x03
     9a6:	9c 81       	ldd	r25, Y+4	; 0x04
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	09 f4       	brne	.+2      	; 0x9ae <DIO_enuGetPortVAL+0x22>
     9ac:	42 c0       	rjmp	.+132    	; 0xa32 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
     9ae:	8a 81       	ldd	r24, Y+2	; 0x02
     9b0:	84 30       	cpi	r24, 0x04	; 4
     9b2:	e0 f5       	brcc	.+120    	; 0xa2c <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	28 2f       	mov	r18, r24
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	3e 83       	std	Y+6, r19	; 0x06
     9bc:	2d 83       	std	Y+5, r18	; 0x05
     9be:	8d 81       	ldd	r24, Y+5	; 0x05
     9c0:	9e 81       	ldd	r25, Y+6	; 0x06
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	91 05       	cpc	r25, r1
     9c6:	e1 f0       	breq	.+56     	; 0xa00 <DIO_enuGetPortVAL+0x74>
     9c8:	2d 81       	ldd	r18, Y+5	; 0x05
     9ca:	3e 81       	ldd	r19, Y+6	; 0x06
     9cc:	22 30       	cpi	r18, 0x02	; 2
     9ce:	31 05       	cpc	r19, r1
     9d0:	2c f4       	brge	.+10     	; 0x9dc <DIO_enuGetPortVAL+0x50>
     9d2:	8d 81       	ldd	r24, Y+5	; 0x05
     9d4:	9e 81       	ldd	r25, Y+6	; 0x06
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	61 f0       	breq	.+24     	; 0x9f2 <DIO_enuGetPortVAL+0x66>
     9da:	26 c0       	rjmp	.+76     	; 0xa28 <DIO_enuGetPortVAL+0x9c>
     9dc:	2d 81       	ldd	r18, Y+5	; 0x05
     9de:	3e 81       	ldd	r19, Y+6	; 0x06
     9e0:	22 30       	cpi	r18, 0x02	; 2
     9e2:	31 05       	cpc	r19, r1
     9e4:	a1 f0       	breq	.+40     	; 0xa0e <DIO_enuGetPortVAL+0x82>
     9e6:	8d 81       	ldd	r24, Y+5	; 0x05
     9e8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ea:	83 30       	cpi	r24, 0x03	; 3
     9ec:	91 05       	cpc	r25, r1
     9ee:	b1 f0       	breq	.+44     	; 0xa1c <DIO_enuGetPortVAL+0x90>
     9f0:	1b c0       	rjmp	.+54     	; 0xa28 <DIO_enuGetPortVAL+0x9c>
			{
				case DIO_PORTA:
					*Copy_Pu8Value = PINA ;break;
     9f2:	e9 e3       	ldi	r30, 0x39	; 57
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	eb 81       	ldd	r30, Y+3	; 0x03
     9fa:	fc 81       	ldd	r31, Y+4	; 0x04
     9fc:	80 83       	st	Z, r24
     9fe:	14 c0       	rjmp	.+40     	; 0xa28 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTB:
					*Copy_Pu8Value = PINB ;break;
     a00:	e6 e3       	ldi	r30, 0x36	; 54
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	eb 81       	ldd	r30, Y+3	; 0x03
     a08:	fc 81       	ldd	r31, Y+4	; 0x04
     a0a:	80 83       	st	Z, r24
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTC:
					*Copy_Pu8Value = PINC ;break;
     a0e:	e3 e3       	ldi	r30, 0x33	; 51
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	eb 81       	ldd	r30, Y+3	; 0x03
     a16:	fc 81       	ldd	r31, Y+4	; 0x04
     a18:	80 83       	st	Z, r24
     a1a:	06 c0       	rjmp	.+12     	; 0xa28 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTD:
					*Copy_Pu8Value = PIND ;break;
     a1c:	e0 e3       	ldi	r30, 0x30	; 48
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	eb 81       	ldd	r30, Y+3	; 0x03
     a24:	fc 81       	ldd	r31, Y+4	; 0x04
     a26:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     a28:	19 82       	std	Y+1, r1	; 0x01
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		 Local_enuErrorStates = ES_NULLPOINTER;
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     a36:	89 81       	ldd	r24, Y+1	; 0x01
}
     a38:	26 96       	adiw	r28, 0x06	; 6
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <DIO_enuSetPINDir+0x6>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <DIO_enuSetPINDir+0x8>
     a52:	00 d0       	rcall	.+0      	; 0xa54 <DIO_enuSetPINDir+0xa>
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	8a 83       	std	Y+2, r24	; 0x02
     a5a:	6b 83       	std	Y+3, r22	; 0x03
     a5c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	84 30       	cpi	r24, 0x04	; 4
     a66:	08 f0       	brcs	.+2      	; 0xa6a <DIO_enuSetPINDir+0x20>
     a68:	d0 c0       	rjmp	.+416    	; 0xc0a <DIO_enuSetPINDir+0x1c0>
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	88 30       	cpi	r24, 0x08	; 8
     a6e:	08 f0       	brcs	.+2      	; 0xa72 <DIO_enuSetPINDir+0x28>
     a70:	cc c0       	rjmp	.+408    	; 0xc0a <DIO_enuSetPINDir+0x1c0>
     a72:	8c 81       	ldd	r24, Y+4	; 0x04
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	08 f0       	brcs	.+2      	; 0xa7a <DIO_enuSetPINDir+0x30>
     a78:	c8 c0       	rjmp	.+400    	; 0xc0a <DIO_enuSetPINDir+0x1c0>
	{

			switch(Copy_u8PortID)
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	3e 83       	std	Y+6, r19	; 0x06
     a82:	2d 83       	std	Y+5, r18	; 0x05
     a84:	6d 81       	ldd	r22, Y+5	; 0x05
     a86:	7e 81       	ldd	r23, Y+6	; 0x06
     a88:	61 30       	cpi	r22, 0x01	; 1
     a8a:	71 05       	cpc	r23, r1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <DIO_enuSetPINDir+0x46>
     a8e:	41 c0       	rjmp	.+130    	; 0xb12 <DIO_enuSetPINDir+0xc8>
     a90:	8d 81       	ldd	r24, Y+5	; 0x05
     a92:	9e 81       	ldd	r25, Y+6	; 0x06
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	91 05       	cpc	r25, r1
     a98:	34 f4       	brge	.+12     	; 0xaa6 <DIO_enuSetPINDir+0x5c>
     a9a:	2d 81       	ldd	r18, Y+5	; 0x05
     a9c:	3e 81       	ldd	r19, Y+6	; 0x06
     a9e:	21 15       	cp	r18, r1
     aa0:	31 05       	cpc	r19, r1
     aa2:	71 f0       	breq	.+28     	; 0xac0 <DIO_enuSetPINDir+0x76>
     aa4:	b0 c0       	rjmp	.+352    	; 0xc06 <DIO_enuSetPINDir+0x1bc>
     aa6:	6d 81       	ldd	r22, Y+5	; 0x05
     aa8:	7e 81       	ldd	r23, Y+6	; 0x06
     aaa:	62 30       	cpi	r22, 0x02	; 2
     aac:	71 05       	cpc	r23, r1
     aae:	09 f4       	brne	.+2      	; 0xab2 <DIO_enuSetPINDir+0x68>
     ab0:	59 c0       	rjmp	.+178    	; 0xb64 <DIO_enuSetPINDir+0x11a>
     ab2:	8d 81       	ldd	r24, Y+5	; 0x05
     ab4:	9e 81       	ldd	r25, Y+6	; 0x06
     ab6:	83 30       	cpi	r24, 0x03	; 3
     ab8:	91 05       	cpc	r25, r1
     aba:	09 f4       	brne	.+2      	; 0xabe <DIO_enuSetPINDir+0x74>
     abc:	7c c0       	rjmp	.+248    	; 0xbb6 <DIO_enuSetPINDir+0x16c>
     abe:	a3 c0       	rjmp	.+326    	; 0xc06 <DIO_enuSetPINDir+0x1bc>
			{
				case DIO_PORTA:
							DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     ac0:	aa e3       	ldi	r26, 0x3A	; 58
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	ea e3       	ldi	r30, 0x3A	; 58
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	48 2f       	mov	r20, r24
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	28 2f       	mov	r18, r24
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_enuSetPINDir+0x92>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	2a 95       	dec	r18
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_enuSetPINDir+0x8e>
     ae0:	80 95       	com	r24
     ae2:	84 23       	and	r24, r20
     ae4:	8c 93       	st	X, r24
							DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     ae6:	aa e3       	ldi	r26, 0x3A	; 58
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	ea e3       	ldi	r30, 0x3A	; 58
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	48 2f       	mov	r20, r24
     af2:	8c 81       	ldd	r24, Y+4	; 0x04
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	b9 01       	movw	r22, r18
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <DIO_enuSetPINDir+0xbc>
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	8a 95       	dec	r24
     b08:	e2 f7       	brpl	.-8      	; 0xb02 <DIO_enuSetPINDir+0xb8>
     b0a:	cb 01       	movw	r24, r22
     b0c:	84 2b       	or	r24, r20
     b0e:	8c 93       	st	X, r24
     b10:	7a c0       	rjmp	.+244    	; 0xc06 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTB:
							DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     b12:	a7 e3       	ldi	r26, 0x37	; 55
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	e7 e3       	ldi	r30, 0x37	; 55
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	48 2f       	mov	r20, r24
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_enuSetPINDir+0xe4>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	2a 95       	dec	r18
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_enuSetPINDir+0xe0>
     b32:	80 95       	com	r24
     b34:	84 23       	and	r24, r20
     b36:	8c 93       	st	X, r24
							DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     b38:	a7 e3       	ldi	r26, 0x37	; 55
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	e7 e3       	ldi	r30, 0x37	; 55
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	48 2f       	mov	r20, r24
     b44:	8c 81       	ldd	r24, Y+4	; 0x04
     b46:	28 2f       	mov	r18, r24
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	b9 01       	movw	r22, r18
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <DIO_enuSetPINDir+0x10e>
     b54:	66 0f       	add	r22, r22
     b56:	77 1f       	adc	r23, r23
     b58:	8a 95       	dec	r24
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <DIO_enuSetPINDir+0x10a>
     b5c:	cb 01       	movw	r24, r22
     b5e:	84 2b       	or	r24, r20
     b60:	8c 93       	st	X, r24
     b62:	51 c0       	rjmp	.+162    	; 0xc06 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTC:
							DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     b64:	a4 e3       	ldi	r26, 0x34	; 52
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e4 e3       	ldi	r30, 0x34	; 52
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	48 2f       	mov	r20, r24
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_enuSetPINDir+0x136>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	2a 95       	dec	r18
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_enuSetPINDir+0x132>
     b84:	80 95       	com	r24
     b86:	84 23       	and	r24, r20
     b88:	8c 93       	st	X, r24
							DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     b8a:	a4 e3       	ldi	r26, 0x34	; 52
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e4 e3       	ldi	r30, 0x34	; 52
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	48 2f       	mov	r20, r24
     b96:	8c 81       	ldd	r24, Y+4	; 0x04
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	b9 01       	movw	r22, r18
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_enuSetPINDir+0x160>
     ba6:	66 0f       	add	r22, r22
     ba8:	77 1f       	adc	r23, r23
     baa:	8a 95       	dec	r24
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_enuSetPINDir+0x15c>
     bae:	cb 01       	movw	r24, r22
     bb0:	84 2b       	or	r24, r20
     bb2:	8c 93       	st	X, r24
     bb4:	28 c0       	rjmp	.+80     	; 0xc06 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTD:
							DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     bb6:	a1 e3       	ldi	r26, 0x31	; 49
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e1 e3       	ldi	r30, 0x31	; 49
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	48 2f       	mov	r20, r24
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_enuSetPINDir+0x188>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	2a 95       	dec	r18
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_enuSetPINDir+0x184>
     bd6:	80 95       	com	r24
     bd8:	84 23       	and	r24, r20
     bda:	8c 93       	st	X, r24
							DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     bdc:	a1 e3       	ldi	r26, 0x31	; 49
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e1 e3       	ldi	r30, 0x31	; 49
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8c 81       	ldd	r24, Y+4	; 0x04
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	b9 01       	movw	r22, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_enuSetPINDir+0x1b2>
     bf8:	66 0f       	add	r22, r22
     bfa:	77 1f       	adc	r23, r23
     bfc:	8a 95       	dec	r24
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_enuSetPINDir+0x1ae>
     c00:	cb 01       	movw	r24, r22
     c02:	84 2b       	or	r24, r20
     c04:	8c 93       	st	X, r24
							break;
			}
			Local_enuErrorStates = ES_OK;
     c06:	19 82       	std	Y+1, r1	; 0x01
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c10:	26 96       	adiw	r28, 0x06	; 6
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <DIO_enuSetPINVAL+0x6>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <DIO_enuSetPINVAL+0x8>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <DIO_enuSetPINVAL+0xa>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	8a 83       	std	Y+2, r24	; 0x02
     c32:	6b 83       	std	Y+3, r22	; 0x03
     c34:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	08 f0       	brcs	.+2      	; 0xc42 <DIO_enuSetPINVAL+0x20>
     c40:	d0 c0       	rjmp	.+416    	; 0xde2 <DIO_enuSetPINVAL+0x1c0>
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	88 30       	cpi	r24, 0x08	; 8
     c46:	08 f0       	brcs	.+2      	; 0xc4a <DIO_enuSetPINVAL+0x28>
     c48:	cc c0       	rjmp	.+408    	; 0xde2 <DIO_enuSetPINVAL+0x1c0>
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	08 f0       	brcs	.+2      	; 0xc52 <DIO_enuSetPINVAL+0x30>
     c50:	c8 c0       	rjmp	.+400    	; 0xde2 <DIO_enuSetPINVAL+0x1c0>
		{

				switch(Copy_u8PortID)
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3e 83       	std	Y+6, r19	; 0x06
     c5a:	2d 83       	std	Y+5, r18	; 0x05
     c5c:	6d 81       	ldd	r22, Y+5	; 0x05
     c5e:	7e 81       	ldd	r23, Y+6	; 0x06
     c60:	61 30       	cpi	r22, 0x01	; 1
     c62:	71 05       	cpc	r23, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <DIO_enuSetPINVAL+0x46>
     c66:	41 c0       	rjmp	.+130    	; 0xcea <DIO_enuSetPINVAL+0xc8>
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	91 05       	cpc	r25, r1
     c70:	34 f4       	brge	.+12     	; 0xc7e <DIO_enuSetPINVAL+0x5c>
     c72:	2d 81       	ldd	r18, Y+5	; 0x05
     c74:	3e 81       	ldd	r19, Y+6	; 0x06
     c76:	21 15       	cp	r18, r1
     c78:	31 05       	cpc	r19, r1
     c7a:	71 f0       	breq	.+28     	; 0xc98 <DIO_enuSetPINVAL+0x76>
     c7c:	b0 c0       	rjmp	.+352    	; 0xdde <DIO_enuSetPINVAL+0x1bc>
     c7e:	6d 81       	ldd	r22, Y+5	; 0x05
     c80:	7e 81       	ldd	r23, Y+6	; 0x06
     c82:	62 30       	cpi	r22, 0x02	; 2
     c84:	71 05       	cpc	r23, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <DIO_enuSetPINVAL+0x68>
     c88:	59 c0       	rjmp	.+178    	; 0xd3c <DIO_enuSetPINVAL+0x11a>
     c8a:	8d 81       	ldd	r24, Y+5	; 0x05
     c8c:	9e 81       	ldd	r25, Y+6	; 0x06
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <DIO_enuSetPINVAL+0x74>
     c94:	7c c0       	rjmp	.+248    	; 0xd8e <DIO_enuSetPINVAL+0x16c>
     c96:	a3 c0       	rjmp	.+326    	; 0xdde <DIO_enuSetPINVAL+0x1bc>
				{
					case DIO_PORTA:
								PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     c98:	ab e3       	ldi	r26, 0x3B	; 59
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	eb e3       	ldi	r30, 0x3B	; 59
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_enuSetPINVAL+0x92>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	2a 95       	dec	r18
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_enuSetPINVAL+0x8e>
     cb8:	80 95       	com	r24
     cba:	84 23       	and	r24, r20
     cbc:	8c 93       	st	X, r24
								PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     cbe:	ab e3       	ldi	r26, 0x3B	; 59
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	eb e3       	ldi	r30, 0x3B	; 59
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	b9 01       	movw	r22, r18
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <DIO_enuSetPINVAL+0xbc>
     cda:	66 0f       	add	r22, r22
     cdc:	77 1f       	adc	r23, r23
     cde:	8a 95       	dec	r24
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <DIO_enuSetPINVAL+0xb8>
     ce2:	cb 01       	movw	r24, r22
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	7a c0       	rjmp	.+244    	; 0xdde <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTB:
								PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     cea:	a8 e3       	ldi	r26, 0x38	; 56
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 e3       	ldi	r30, 0x38	; 56
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_enuSetPINVAL+0xe4>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	2a 95       	dec	r18
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_enuSetPINVAL+0xe0>
     d0a:	80 95       	com	r24
     d0c:	84 23       	and	r24, r20
     d0e:	8c 93       	st	X, r24
								PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     d10:	a8 e3       	ldi	r26, 0x38	; 56
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e3       	ldi	r30, 0x38	; 56
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8c 81       	ldd	r24, Y+4	; 0x04
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	b9 01       	movw	r22, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_enuSetPINVAL+0x10e>
     d2c:	66 0f       	add	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	8a 95       	dec	r24
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_enuSetPINVAL+0x10a>
     d34:	cb 01       	movw	r24, r22
     d36:	84 2b       	or	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	51 c0       	rjmp	.+162    	; 0xdde <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTC:
								PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     d3c:	a5 e3       	ldi	r26, 0x35	; 53
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e5 e3       	ldi	r30, 0x35	; 53
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_enuSetPINVAL+0x136>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	2a 95       	dec	r18
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_enuSetPINVAL+0x132>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
								PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     d62:	a5 e3       	ldi	r26, 0x35	; 53
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e5 e3       	ldi	r30, 0x35	; 53
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	b9 01       	movw	r22, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_enuSetPINVAL+0x160>
     d7e:	66 0f       	add	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	8a 95       	dec	r24
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_enuSetPINVAL+0x15c>
     d86:	cb 01       	movw	r24, r22
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	28 c0       	rjmp	.+80     	; 0xdde <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTD:
								PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     d8e:	a2 e3       	ldi	r26, 0x32	; 50
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e2 e3       	ldi	r30, 0x32	; 50
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_enuSetPINVAL+0x188>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	2a 95       	dec	r18
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_enuSetPINVAL+0x184>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
								PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     db4:	a2 e3       	ldi	r26, 0x32	; 50
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e2 e3       	ldi	r30, 0x32	; 50
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	b9 01       	movw	r22, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_enuSetPINVAL+0x1b2>
     dd0:	66 0f       	add	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	8a 95       	dec	r24
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_enuSetPINVAL+0x1ae>
     dd8:	cb 01       	movw	r24, r22
     dda:	84 2b       	or	r24, r20
     ddc:	8c 93       	st	X, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
     dde:	19 82       	std	Y+1, r1	; 0x01
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <DIO_enuSetPINVAL+0x1c4>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorStates;
     de6:	89 81       	ldd	r24, Y+1	; 0x01
}
     de8:	26 96       	adiw	r28, 0x06	; 6
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <DIO_enuToggelPIN+0x6>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <DIO_enuToggelPIN+0x8>
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	8a 83       	std	Y+2, r24	; 0x02
     e0a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	84 30       	cpi	r24, 0x04	; 4
     e14:	08 f0       	brcs	.+2      	; 0xe18 <DIO_enuToggelPIN+0x1e>
     e16:	74 c0       	rjmp	.+232    	; 0xf00 <DIO_enuToggelPIN+0x106>
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <DIO_enuToggelPIN+0x26>
     e1e:	70 c0       	rjmp	.+224    	; 0xf00 <DIO_enuToggelPIN+0x106>
			{

					switch(Copy_u8PortID)
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	3d 83       	std	Y+5, r19	; 0x05
     e28:	2c 83       	std	Y+4, r18	; 0x04
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	91 05       	cpc	r25, r1
     e32:	49 f1       	breq	.+82     	; 0xe86 <DIO_enuToggelPIN+0x8c>
     e34:	2c 81       	ldd	r18, Y+4	; 0x04
     e36:	3d 81       	ldd	r19, Y+5	; 0x05
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	2c f4       	brge	.+10     	; 0xe48 <DIO_enuToggelPIN+0x4e>
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	9d 81       	ldd	r25, Y+5	; 0x05
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	61 f0       	breq	.+24     	; 0xe5e <DIO_enuToggelPIN+0x64>
     e46:	5a c0       	rjmp	.+180    	; 0xefc <DIO_enuToggelPIN+0x102>
     e48:	2c 81       	ldd	r18, Y+4	; 0x04
     e4a:	3d 81       	ldd	r19, Y+5	; 0x05
     e4c:	22 30       	cpi	r18, 0x02	; 2
     e4e:	31 05       	cpc	r19, r1
     e50:	71 f1       	breq	.+92     	; 0xeae <DIO_enuToggelPIN+0xb4>
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	91 05       	cpc	r25, r1
     e5a:	e9 f1       	breq	.+122    	; 0xed6 <DIO_enuToggelPIN+0xdc>
     e5c:	4f c0       	rjmp	.+158    	; 0xefc <DIO_enuToggelPIN+0x102>
					{
						case DIO_PORTA:
									PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
     e5e:	ab e3       	ldi	r26, 0x3B	; 59
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	eb e3       	ldi	r30, 0x3B	; 59
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_enuToggelPIN+0x82>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_enuToggelPIN+0x7e>
     e80:	84 27       	eor	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	3b c0       	rjmp	.+118    	; 0xefc <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTB:
									PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
     e86:	a8 e3       	ldi	r26, 0x38	; 56
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e8 e3       	ldi	r30, 0x38	; 56
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_enuToggelPIN+0xaa>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_enuToggelPIN+0xa6>
     ea8:	84 27       	eor	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	27 c0       	rjmp	.+78     	; 0xefc <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTC:
									PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
     eae:	a5 e3       	ldi	r26, 0x35	; 53
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e3       	ldi	r30, 0x35	; 53
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_enuToggelPIN+0xd2>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_enuToggelPIN+0xce>
     ed0:	84 27       	eor	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	13 c0       	rjmp	.+38     	; 0xefc <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTD:
									PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
     ed6:	a2 e3       	ldi	r26, 0x32	; 50
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e2 e3       	ldi	r30, 0x32	; 50
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_enuToggelPIN+0xfa>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_enuToggelPIN+0xf6>
     ef8:	84 27       	eor	r24, r20
     efa:	8c 93       	st	X, r24
									break;
					}
					Local_enuErrorStates = ES_OK;
     efc:	19 82       	std	Y+1, r1	; 0x01
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_enuToggelPIN+0x10a>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorStates;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	27 97       	sbiw	r28, 0x07	; 7
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	8a 83       	std	Y+2, r24	; 0x02
     f2c:	6b 83       	std	Y+3, r22	; 0x03
     f2e:	5d 83       	std	Y+5, r21	; 0x05
     f30:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_enuGetPINVAL+0x2a>
     f3e:	7d c0       	rjmp	.+250    	; 0x103a <DIO_enuGetPINVAL+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	08 f0       	brcs	.+2      	; 0xf48 <DIO_enuGetPINVAL+0x32>
     f46:	76 c0       	rjmp	.+236    	; 0x1034 <DIO_enuGetPINVAL+0x11e>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	88 30       	cpi	r24, 0x08	; 8
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <DIO_enuGetPINVAL+0x3a>
     f4e:	72 c0       	rjmp	.+228    	; 0x1034 <DIO_enuGetPINVAL+0x11e>
		{

				switch(Copy_u8PortID)
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3f 83       	std	Y+7, r19	; 0x07
     f58:	2e 83       	std	Y+6, r18	; 0x06
     f5a:	4e 81       	ldd	r20, Y+6	; 0x06
     f5c:	5f 81       	ldd	r21, Y+7	; 0x07
     f5e:	41 30       	cpi	r20, 0x01	; 1
     f60:	51 05       	cpc	r21, r1
     f62:	59 f1       	breq	.+86     	; 0xfba <DIO_enuGetPINVAL+0xa4>
     f64:	8e 81       	ldd	r24, Y+6	; 0x06
     f66:	9f 81       	ldd	r25, Y+7	; 0x07
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	91 05       	cpc	r25, r1
     f6c:	34 f4       	brge	.+12     	; 0xf7a <DIO_enuGetPINVAL+0x64>
     f6e:	2e 81       	ldd	r18, Y+6	; 0x06
     f70:	3f 81       	ldd	r19, Y+7	; 0x07
     f72:	21 15       	cp	r18, r1
     f74:	31 05       	cpc	r19, r1
     f76:	69 f0       	breq	.+26     	; 0xf92 <DIO_enuGetPINVAL+0x7c>
     f78:	5b c0       	rjmp	.+182    	; 0x1030 <DIO_enuGetPINVAL+0x11a>
     f7a:	4e 81       	ldd	r20, Y+6	; 0x06
     f7c:	5f 81       	ldd	r21, Y+7	; 0x07
     f7e:	42 30       	cpi	r20, 0x02	; 2
     f80:	51 05       	cpc	r21, r1
     f82:	79 f1       	breq	.+94     	; 0xfe2 <DIO_enuGetPINVAL+0xcc>
     f84:	8e 81       	ldd	r24, Y+6	; 0x06
     f86:	9f 81       	ldd	r25, Y+7	; 0x07
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <DIO_enuGetPINVAL+0x7a>
     f8e:	3d c0       	rjmp	.+122    	; 0x100a <DIO_enuGetPINVAL+0xf4>
     f90:	4f c0       	rjmp	.+158    	; 0x1030 <DIO_enuGetPINVAL+0x11a>
				{
					case DIO_PORTA:
						*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
     f92:	e9 e3       	ldi	r30, 0x39	; 57
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_enuGetPINVAL+0x94>
     fa6:	55 95       	asr	r21
     fa8:	47 95       	ror	r20
     faa:	8a 95       	dec	r24
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_enuGetPINVAL+0x90>
     fae:	ca 01       	movw	r24, r20
     fb0:	81 70       	andi	r24, 0x01	; 1
     fb2:	ec 81       	ldd	r30, Y+4	; 0x04
     fb4:	fd 81       	ldd	r31, Y+5	; 0x05
     fb6:	80 83       	st	Z, r24
     fb8:	3b c0       	rjmp	.+118    	; 0x1030 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTB:
						*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
     fba:	e6 e3       	ldi	r30, 0x36	; 54
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a9 01       	movw	r20, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_enuGetPINVAL+0xbc>
     fce:	55 95       	asr	r21
     fd0:	47 95       	ror	r20
     fd2:	8a 95       	dec	r24
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_enuGetPINVAL+0xb8>
     fd6:	ca 01       	movw	r24, r20
     fd8:	81 70       	andi	r24, 0x01	; 1
     fda:	ec 81       	ldd	r30, Y+4	; 0x04
     fdc:	fd 81       	ldd	r31, Y+5	; 0x05
     fde:	80 83       	st	Z, r24
     fe0:	27 c0       	rjmp	.+78     	; 0x1030 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTC:
						*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_enuGetPINVAL+0xe4>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_enuGetPINVAL+0xe0>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	ec 81       	ldd	r30, Y+4	; 0x04
    1004:	fd 81       	ldd	r31, Y+5	; 0x05
    1006:	80 83       	st	Z, r24
    1008:	13 c0       	rjmp	.+38     	; 0x1030 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTD:
						*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
    100a:	e0 e3       	ldi	r30, 0x30	; 48
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a9 01       	movw	r20, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_enuGetPINVAL+0x10c>
    101e:	55 95       	asr	r21
    1020:	47 95       	ror	r20
    1022:	8a 95       	dec	r24
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_enuGetPINVAL+0x108>
    1026:	ca 01       	movw	r24, r20
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	ec 81       	ldd	r30, Y+4	; 0x04
    102c:	fd 81       	ldd	r31, Y+5	; 0x05
    102e:	80 83       	st	Z, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	05 c0       	rjmp	.+10     	; 0x103e <DIO_enuGetPINVAL+0x128>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_enuGetPINVAL+0x128>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    103e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1040:	27 96       	adiw	r28, 0x07	; 7
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <main>:
#include"../MCAL/EXTI/EXTI_Int.h"
#include"../MCAL/GIE/GIE_int.h"
void tog(void);
extern EXTI_t EXTI_AstrEXTConfig[3] ;
int main()
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPINDir(DIO_u8PORTD,DIO_u8PIN2,DIO_INPUT);
    105a:	83 e0       	ldi	r24, 0x03	; 3
    105c:	62 e0       	ldi	r22, 0x02	; 2
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_enuSetPINDir>
	DIO_enuSetPINVAL(DIO_u8PORTD,DIO_u8PIN2,DIO_PULLUP);
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	62 e0       	ldi	r22, 0x02	; 2
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	0e 94 11 06 	call	0xc22	; 0xc22 <DIO_enuSetPINVAL>
	DIO_enuSetPINDir(DIO_u8PORTA,DIO_u8PIN1,DIO_OUTPUT);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_enuSetPINDir>
	DIO_enuSetPINVAL(DIO_u8PORTA,DIO_u8PIN1,DIO_HIGH);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	41 e0       	ldi	r20, 0x01	; 1
    107e:	0e 94 11 06 	call	0xc22	; 0xc22 <DIO_enuSetPINVAL>
	EXTI_enuCallBackF(tog,0);
    1082:	8d e4       	ldi	r24, 0x4D	; 77
    1084:	98 e0       	ldi	r25, 0x08	; 8
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <EXTI_enuCallBackF>
	EXTI_enuInit(EXTI_AstrEXTConfig);
    108c:	80 e6       	ldi	r24, 0x60	; 96
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 6f 00 	call	0xde	; 0xde <EXTI_enuInit>
	GIE_enuEnable();
    1094:	0e 94 49 00 	call	0x92	; 0x92 <GIE_enuEnable>
    1098:	ff cf       	rjmp	.-2      	; 0x1098 <main+0x46>

0000109a <tog>:
	while(1);
}

void tog(void)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
	//*(u8*)p = 10;
	DIO_enuToggelPIN(DIO_u8PORTA,DIO_u8PIN1);
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_enuToggelPIN>
}
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <_exit>:
    10b0:	f8 94       	cli

000010b2 <__stop_program>:
    10b2:	ff cf       	rjmp	.-2      	; 0x10b2 <__stop_program>
