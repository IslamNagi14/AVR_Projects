
TIMER_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002586  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002586  0000261a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800168  00800168  00002722  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f89  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000057ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  0000592d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  00005b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  00007c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  00008eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  0000a44a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_4>
      14:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_10>
      2c:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 39       	cpi	r26, 0x98	; 152
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e8       	ldi	r30, 0x86	; 134
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 74 12 	call	0x24e8	; 0x24e8 <main>
      8a:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 96 12 	jmp	0x252c	; 0x252c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <TIMER0_enuInit>:
static void(*EXTI0_PFunINIT[3])(void*) = {NULL,NULL,NULL};
static void*EXTI0_PparameterINIT[3] = {NULL,NULL,NULL};
static u32 Global0_u32PreLoad = 0;
static u32 Global0_u32NUM_INIOverFlows = 0;
ES_t TIMER0_enuInit(void)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
#if  TIMER0_MODE == WGM_NORMAL
	TCCR0 &=~(1<<3);
     ddc:	a3 e5       	ldi	r26, 0x53	; 83
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e3 e5       	ldi	r30, 0x53	; 83
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	87 7f       	andi	r24, 0xF7	; 247
     de8:	8c 93       	st	X, r24
	TCCR0 &=~(1<<6);
     dea:	a3 e5       	ldi	r26, 0x53	; 83
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e3 e5       	ldi	r30, 0x53	; 83
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8f 7b       	andi	r24, 0xBF	; 191
     df6:	8c 93       	st	X, r24

#if COMP_MATCH_OUTPUT0 == COM_NORMAL_PORT
	TCCR0 &=~(1<<4);
     df8:	a3 e5       	ldi	r26, 0x53	; 83
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e3 e5       	ldi	r30, 0x53	; 83
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8f 7e       	andi	r24, 0xEF	; 239
     e04:	8c 93       	st	X, r24
	TCCR0 &=~(1<<5);
     e06:	a3 e5       	ldi	r26, 0x53	; 83
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e3 e5       	ldi	r30, 0x53	; 83
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8f 7d       	andi	r24, 0xDF	; 223
     e12:	8c 93       	st	X, r24
#elif TIMER0_PRES == PRESC_64
	TCCR0 |=3;
#elif TIMER0_PRES == PRESC_256
	TCCR0 |=4;
#elif TIMER0_PRES == PRESC_1024
	TCCR0 |=5;
     e14:	a3 e5       	ldi	r26, 0x53	; 83
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e3 e5       	ldi	r30, 0x53	; 83
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	85 60       	ori	r24, 0x05	; 5
     e20:	8c 93       	st	X, r24
	TCCR0 |=7;

#else
#error"NOT CORRECT PRESCALING"
#endif
	return Local_enuErrorState;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
}
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <TIMER0_enuGeneratePWM>:

ES_t TIMER0_enuGeneratePWM(f32 Copy_f32VolteVAL)
{	ES_t Local_enuErrorState = ES_NOK;
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <TIMER0_enuGeneratePWM+0x6>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TIMER0_enuGeneratePWM+0x8>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	6a 83       	std	Y+2, r22	; 0x02
     e3c:	7b 83       	std	Y+3, r23	; 0x03
     e3e:	8c 83       	std	Y+4, r24	; 0x04
     e40:	9d 83       	std	Y+5, r25	; 0x05
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = (u8)((Copy_f32VolteVAL/5)*(Copy_f32VolteVAL/5)*255);
	#elif COMP_MATCH_OUTPUT2 == COM_INVERTING
	OCR0 = (u8)(255 - ((Copy_f32VolteVAL/5)*(Copy_f32VolteVAL/5)*255));
	#endif
#endif
Local_enuErrorState = ES_OK;
     e46:	19 82       	std	Y+1, r1	; 0x01
return Local_enuErrorState;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <TIMER0_enuEnableInterrupt>:

ES_t TIMER0_enuEnableInterrupt(void)
{	ES_t Local_enuErrorState = ES_NOK;
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
TIMSK|=(1<<1);
     e68:	a9 e5       	ldi	r26, 0x59	; 89
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e9 e5       	ldi	r30, 0x59	; 89
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	8c 93       	st	X, r24
Local_enuErrorState = ES_OK;
     e76:	19 82       	std	Y+1, r1	; 0x01
return Local_enuErrorState;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <TIMER0_enuDisableInterrupt>:
ES_t TIMER0_enuDisableInterrupt(void)
{	ES_t Local_enuErrorState = ES_NOK;
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	89 83       	std	Y+1, r24	; 0x01
TIMSK&=~(1<<1);
     e90:	a9 e5       	ldi	r26, 0x59	; 89
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e9 e5       	ldi	r30, 0x59	; 89
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8d 7f       	andi	r24, 0xFD	; 253
     e9c:	8c 93       	st	X, r24
Local_enuErrorState = ES_OK;
     e9e:	19 82       	std	Y+1, r1	; 0x01
return Local_enuErrorState;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <TIMER0_enuSet_PINOCR0_VAL>:

ES_t TIMER0_enuSet_PINOCR0_VAL(u8 Copy_u8OCR0_VAL)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <TIMER0_enuSet_PINOCR0_VAL+0x6>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8OCR0_VAL;
     eba:	ec e5       	ldi	r30, 0x5C	; 92
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
     ec2:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <TIMER0_enuSet_preload>:
ES_t TIMER0_enuSet_preload(u8 Copy_u8Preload)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <TIMER0_enuSet_preload+0x6>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     ee0:	e2 e5       	ldi	r30, 0x52	; 82
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
     ee8:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <TIMER0_enuSet_AsychDelay>:
ES_t TIMER0_enuSet_AsychDelay(u32 Copy_u32Time,void (*Copy_PfunApp)(void*),void * Copy_vidPParameter)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	66 97       	sbiw	r28, 0x16	; 22
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	6f 87       	std	Y+15, r22	; 0x0f
     f0c:	78 8b       	std	Y+16, r23	; 0x10
     f0e:	89 8b       	std	Y+17, r24	; 0x11
     f10:	9a 8b       	std	Y+18, r25	; 0x12
     f12:	5c 8b       	std	Y+20, r21	; 0x14
     f14:	4b 8b       	std	Y+19, r20	; 0x13
     f16:	3e 8b       	std	Y+22, r19	; 0x16
     f18:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState = ES_NOK;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	8e 87       	std	Y+14, r24	; 0x0e
	TIMSK&=~(1<<0);
     f1e:	a9 e5       	ldi	r26, 0x59	; 89
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e9 e5       	ldi	r30, 0x59	; 89
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	8c 93       	st	X, r24
	f32 Local_f32OVERflowTime = (256*((f32)TIMER0_PRES/F_CPU))*1000;
     f2c:	8f e6       	ldi	r24, 0x6F	; 111
     f2e:	92 e1       	ldi	r25, 0x12	; 18
     f30:	a3 e0       	ldi	r26, 0x03	; 3
     f32:	b2 e4       	ldi	r27, 0x42	; 66
     f34:	8a 87       	std	Y+10, r24	; 0x0a
     f36:	9b 87       	std	Y+11, r25	; 0x0b
     f38:	ac 87       	std	Y+12, r26	; 0x0c
     f3a:	bd 87       	std	Y+13, r27	; 0x0d
	f32 Local_f32NUM_OverFlows = (Copy_u32Time/Local_f32OVERflowTime);
     f3c:	6f 85       	ldd	r22, Y+15	; 0x0f
     f3e:	78 89       	ldd	r23, Y+16	; 0x10
     f40:	89 89       	ldd	r24, Y+17	; 0x11
     f42:	9a 89       	ldd	r25, Y+18	; 0x12
     f44:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	2a 85       	ldd	r18, Y+10	; 0x0a
     f52:	3b 85       	ldd	r19, Y+11	; 0x0b
     f54:	4c 85       	ldd	r20, Y+12	; 0x0c
     f56:	5d 85       	ldd	r21, Y+13	; 0x0d
     f58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	8e 83       	std	Y+6, r24	; 0x06
     f62:	9f 83       	std	Y+7, r25	; 0x07
     f64:	a8 87       	std	Y+8, r26	; 0x08
     f66:	b9 87       	std	Y+9, r27	; 0x09
	u32 Local_u32NUM_INIOverFlows;
	if((Local_f32NUM_OverFlows -(u32)Local_f32NUM_OverFlows) !=0.0)
     f68:	6e 81       	ldd	r22, Y+6	; 0x06
     f6a:	7f 81       	ldd	r23, Y+7	; 0x07
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	99 85       	ldd	r25, Y+9	; 0x09
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f80:	9b 01       	movw	r18, r22
     f82:	ac 01       	movw	r20, r24
     f84:	6e 81       	ldd	r22, Y+6	; 0x06
     f86:	7f 81       	ldd	r23, Y+7	; 0x07
     f88:	88 85       	ldd	r24, Y+8	; 0x08
     f8a:	99 85       	ldd	r25, Y+9	; 0x09
     f8c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
     fa4:	88 23       	and	r24, r24
     fa6:	09 f4       	brne	.+2      	; 0xfaa <TIMER0_enuSet_AsychDelay+0xb4>
     fa8:	54 c0       	rjmp	.+168    	; 0x1052 <TIMER0_enuSet_AsychDelay+0x15c>
	{

		Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows+1;
     faa:	6e 81       	ldd	r22, Y+6	; 0x06
     fac:	7f 81       	ldd	r23, Y+7	; 0x07
     fae:	88 85       	ldd	r24, Y+8	; 0x08
     fb0:	99 85       	ldd	r25, Y+9	; 0x09
     fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	a1 1d       	adc	r26, r1
     fbe:	b1 1d       	adc	r27, r1
     fc0:	8a 83       	std	Y+2, r24	; 0x02
     fc2:	9b 83       	std	Y+3, r25	; 0x03
     fc4:	ac 83       	std	Y+4, r26	; 0x04
     fc6:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32NUM_OverFlows = Local_f32NUM_OverFlows - (u32)Local_f32NUM_OverFlows;
     fc8:	6e 81       	ldd	r22, Y+6	; 0x06
     fca:	7f 81       	ldd	r23, Y+7	; 0x07
     fcc:	88 85       	ldd	r24, Y+8	; 0x08
     fce:	99 85       	ldd	r25, Y+9	; 0x09
     fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     fe0:	9b 01       	movw	r18, r22
     fe2:	ac 01       	movw	r20, r24
     fe4:	6e 81       	ldd	r22, Y+6	; 0x06
     fe6:	7f 81       	ldd	r23, Y+7	; 0x07
     fe8:	88 85       	ldd	r24, Y+8	; 0x08
     fea:	99 85       	ldd	r25, Y+9	; 0x09
     fec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8e 83       	std	Y+6, r24	; 0x06
     ff6:	9f 83       	std	Y+7, r25	; 0x07
     ff8:	a8 87       	std	Y+8, r26	; 0x08
     ffa:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u8PreLoad = 256 - (Local_f32NUM_OverFlows * 256);
     ffc:	6e 81       	ldd	r22, Y+6	; 0x06
     ffe:	7f 81       	ldd	r23, Y+7	; 0x07
    1000:	88 85       	ldd	r24, Y+8	; 0x08
    1002:	99 85       	ldd	r25, Y+9	; 0x09
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	53 ec       	ldi	r21, 0xC3	; 195
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	53 e4       	ldi	r21, 0x43	; 67
    1020:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	89 83       	std	Y+1, r24	; 0x01
		Global0_u32PreLoad = Local_u8PreLoad;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	80 93 74 01 	sts	0x0174, r24
    1044:	90 93 75 01 	sts	0x0175, r25
    1048:	a0 93 76 01 	sts	0x0176, r26
    104c:	b0 93 77 01 	sts	0x0177, r27
    1050:	0c c0       	rjmp	.+24     	; 0x106a <TIMER0_enuSet_AsychDelay+0x174>
	}
	else
	{
		Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows;
    1052:	6e 81       	ldd	r22, Y+6	; 0x06
    1054:	7f 81       	ldd	r23, Y+7	; 0x07
    1056:	88 85       	ldd	r24, Y+8	; 0x08
    1058:	99 85       	ldd	r25, Y+9	; 0x09
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8a 83       	std	Y+2, r24	; 0x02
    1064:	9b 83       	std	Y+3, r25	; 0x03
    1066:	ac 83       	std	Y+4, r26	; 0x04
    1068:	bd 83       	std	Y+5, r27	; 0x05
	}
	Global0_u32NUM_INIOverFlows = Local_u32NUM_INIOverFlows;
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	9b 81       	ldd	r25, Y+3	; 0x03
    106e:	ac 81       	ldd	r26, Y+4	; 0x04
    1070:	bd 81       	ldd	r27, Y+5	; 0x05
    1072:	80 93 78 01 	sts	0x0178, r24
    1076:	90 93 79 01 	sts	0x0179, r25
    107a:	a0 93 7a 01 	sts	0x017A, r26
    107e:	b0 93 7b 01 	sts	0x017B, r27
	if(Copy_PfunApp)
    1082:	8b 89       	ldd	r24, Y+19	; 0x13
    1084:	9c 89       	ldd	r25, Y+20	; 0x14
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f0       	breq	.+26     	; 0x10a4 <TIMER0_enuSet_AsychDelay+0x1ae>
	{
		EXTI0_PFunINIT[0] = Copy_PfunApp;
    108a:	8b 89       	ldd	r24, Y+19	; 0x13
    108c:	9c 89       	ldd	r25, Y+20	; 0x14
    108e:	90 93 69 01 	sts	0x0169, r25
    1092:	80 93 68 01 	sts	0x0168, r24
		EXTI0_PparameterINIT[0] = Copy_vidPParameter;
    1096:	8d 89       	ldd	r24, Y+21	; 0x15
    1098:	9e 89       	ldd	r25, Y+22	; 0x16
    109a:	90 93 6f 01 	sts	0x016F, r25
    109e:	80 93 6e 01 	sts	0x016E, r24
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <TIMER0_enuSet_AsychDelay+0x1b2>
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	8e 87       	std	Y+14, r24	; 0x0e

	}
	TIMSK|=(1<<0);
    10a8:	a9 e5       	ldi	r26, 0x59	; 89
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e9 e5       	ldi	r30, 0x59	; 89
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	81 60       	ori	r24, 0x01	; 1
    10b4:	8c 93       	st	X, r24
	return Local_enuErrorState;
    10b6:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    10b8:	66 96       	adiw	r28, 0x16	; 22
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <TIMER0_enuSetSychDelay>:

ES_t TIMER0_enuSetSychDelay(u32 Copy_u32Time)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	66 97       	sbiw	r28, 0x16	; 22
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	6b 8b       	std	Y+19, r22	; 0x13
    10e0:	7c 8b       	std	Y+20, r23	; 0x14
    10e2:	8d 8b       	std	Y+21, r24	; 0x15
    10e4:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8a 8b       	std	Y+18, r24	; 0x12

	TIMSK&=~(1<<0);
    10ea:	a9 e5       	ldi	r26, 0x59	; 89
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e9 e5       	ldi	r30, 0x59	; 89
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8e 7f       	andi	r24, 0xFE	; 254
    10f6:	8c 93       	st	X, r24
	f32 Local_f32OVERflowTime = (256*((f32)TIMER0_PRES/F_CPU)*1000);
    10f8:	8f e6       	ldi	r24, 0x6F	; 111
    10fa:	92 e1       	ldi	r25, 0x12	; 18
    10fc:	a3 e0       	ldi	r26, 0x03	; 3
    10fe:	b2 e4       	ldi	r27, 0x42	; 66
    1100:	8e 87       	std	Y+14, r24	; 0x0e
    1102:	9f 87       	std	Y+15, r25	; 0x0f
    1104:	a8 8b       	std	Y+16, r26	; 0x10
    1106:	b9 8b       	std	Y+17, r27	; 0x11
	f32 Local_f32NUM_OverFlows = (Copy_u32Time/Local_f32OVERflowTime);
    1108:	6b 89       	ldd	r22, Y+19	; 0x13
    110a:	7c 89       	ldd	r23, Y+20	; 0x14
    110c:	8d 89       	ldd	r24, Y+21	; 0x15
    110e:	9e 89       	ldd	r25, Y+22	; 0x16
    1110:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	2e 85       	ldd	r18, Y+14	; 0x0e
    111e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1120:	48 89       	ldd	r20, Y+16	; 0x10
    1122:	59 89       	ldd	r21, Y+17	; 0x11
    1124:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	8a 87       	std	Y+10, r24	; 0x0a
    112e:	9b 87       	std	Y+11, r25	; 0x0b
    1130:	ac 87       	std	Y+12, r26	; 0x0c
    1132:	bd 87       	std	Y+13, r27	; 0x0d

	if((Local_f32NUM_OverFlows -(u32)Local_f32NUM_OverFlows) !=0.0)
    1134:	6a 85       	ldd	r22, Y+10	; 0x0a
    1136:	7b 85       	ldd	r23, Y+11	; 0x0b
    1138:	8c 85       	ldd	r24, Y+12	; 0x0c
    113a:	9d 85       	ldd	r25, Y+13	; 0x0d
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    114c:	9b 01       	movw	r18, r22
    114e:	ac 01       	movw	r20, r24
    1150:	6a 85       	ldd	r22, Y+10	; 0x0a
    1152:	7b 85       	ldd	r23, Y+11	; 0x0b
    1154:	8c 85       	ldd	r24, Y+12	; 0x0c
    1156:	9d 85       	ldd	r25, Y+13	; 0x0d
    1158:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <TIMER0_enuSetSychDelay+0xac>
    1174:	6f c0       	rjmp	.+222    	; 0x1254 <TIMER0_enuSetSychDelay+0x18a>
	{

		u32 Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows+1;
    1176:	6a 85       	ldd	r22, Y+10	; 0x0a
    1178:	7b 85       	ldd	r23, Y+11	; 0x0b
    117a:	8c 85       	ldd	r24, Y+12	; 0x0c
    117c:	9d 85       	ldd	r25, Y+13	; 0x0d
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	a1 1d       	adc	r26, r1
    118a:	b1 1d       	adc	r27, r1
    118c:	8e 83       	std	Y+6, r24	; 0x06
    118e:	9f 83       	std	Y+7, r25	; 0x07
    1190:	a8 87       	std	Y+8, r26	; 0x08
    1192:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32NUM_OverFlows = Local_f32NUM_OverFlows - (u32)Local_f32NUM_OverFlows;
    1194:	6a 85       	ldd	r22, Y+10	; 0x0a
    1196:	7b 85       	ldd	r23, Y+11	; 0x0b
    1198:	8c 85       	ldd	r24, Y+12	; 0x0c
    119a:	9d 85       	ldd	r25, Y+13	; 0x0d
    119c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	6a 85       	ldd	r22, Y+10	; 0x0a
    11b2:	7b 85       	ldd	r23, Y+11	; 0x0b
    11b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	8a 87       	std	Y+10, r24	; 0x0a
    11c2:	9b 87       	std	Y+11, r25	; 0x0b
    11c4:	ac 87       	std	Y+12, r26	; 0x0c
    11c6:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u8PreLoad = 256 - (Local_f32NUM_OverFlows * 256);
    11c8:	6a 85       	ldd	r22, Y+10	; 0x0a
    11ca:	7b 85       	ldd	r23, Y+11	; 0x0b
    11cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	53 ec       	ldi	r21, 0xC3	; 195
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	53 e4       	ldi	r21, 0x43	; 67
    11ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0 = Local_u8PreLoad;
    1202:	e2 e5       	ldi	r30, 0x52	; 82
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	80 83       	st	Z, r24
    120a:	1b c0       	rjmp	.+54     	; 0x1242 <TIMER0_enuSetSychDelay+0x178>
		while(Local_u32NUM_INIOverFlows>0)
		{
			while(((TIFR>>0)&1) == 0);
    120c:	e8 e5       	ldi	r30, 0x58	; 88
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	90 70       	andi	r25, 0x00	; 0
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	b9 f3       	breq	.-18     	; 0x120c <TIMER0_enuSetSychDelay+0x142>
			TIFR|=(1<<0);
    121e:	a8 e5       	ldi	r26, 0x58	; 88
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e8 e5       	ldi	r30, 0x58	; 88
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	81 60       	ori	r24, 0x01	; 1
    122a:	8c 93       	st	X, r24
			Local_u32NUM_INIOverFlows--;
    122c:	8e 81       	ldd	r24, Y+6	; 0x06
    122e:	9f 81       	ldd	r25, Y+7	; 0x07
    1230:	a8 85       	ldd	r26, Y+8	; 0x08
    1232:	b9 85       	ldd	r27, Y+9	; 0x09
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	a1 09       	sbc	r26, r1
    1238:	b1 09       	sbc	r27, r1
    123a:	8e 83       	std	Y+6, r24	; 0x06
    123c:	9f 83       	std	Y+7, r25	; 0x07
    123e:	a8 87       	std	Y+8, r26	; 0x08
    1240:	b9 87       	std	Y+9, r27	; 0x09

		u32 Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows+1;
		Local_f32NUM_OverFlows = Local_f32NUM_OverFlows - (u32)Local_f32NUM_OverFlows;
		u8 Local_u8PreLoad = 256 - (Local_f32NUM_OverFlows * 256);
		TCNT0 = Local_u8PreLoad;
		while(Local_u32NUM_INIOverFlows>0)
    1242:	8e 81       	ldd	r24, Y+6	; 0x06
    1244:	9f 81       	ldd	r25, Y+7	; 0x07
    1246:	a8 85       	ldd	r26, Y+8	; 0x08
    1248:	b9 85       	ldd	r27, Y+9	; 0x09
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	a1 05       	cpc	r26, r1
    124e:	b1 05       	cpc	r27, r1
    1250:	e9 f6       	brne	.-70     	; 0x120c <TIMER0_enuSetSychDelay+0x142>
    1252:	30 c0       	rjmp	.+96     	; 0x12b4 <TIMER0_enuSetSychDelay+0x1ea>


	}
	else
	{
		u32 Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows;
    1254:	6a 85       	ldd	r22, Y+10	; 0x0a
    1256:	7b 85       	ldd	r23, Y+11	; 0x0b
    1258:	8c 85       	ldd	r24, Y+12	; 0x0c
    125a:	9d 85       	ldd	r25, Y+13	; 0x0d
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	ab 83       	std	Y+3, r26	; 0x03
    126a:	bc 83       	std	Y+4, r27	; 0x04
    126c:	1b c0       	rjmp	.+54     	; 0x12a4 <TIMER0_enuSetSychDelay+0x1da>
		while(Local_u32NUM_INIOverFlows>0)
		{
			while(((TIFR>>0)&1) == 0);
    126e:	e8 e5       	ldi	r30, 0x58	; 88
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	90 70       	andi	r25, 0x00	; 0
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	b9 f3       	breq	.-18     	; 0x126e <TIMER0_enuSetSychDelay+0x1a4>
			TIFR|=(1<<0);
    1280:	a8 e5       	ldi	r26, 0x58	; 88
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e8 e5       	ldi	r30, 0x58	; 88
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	81 60       	ori	r24, 0x01	; 1
    128c:	8c 93       	st	X, r24
			Local_u32NUM_INIOverFlows--;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	9a 81       	ldd	r25, Y+2	; 0x02
    1292:	ab 81       	ldd	r26, Y+3	; 0x03
    1294:	bc 81       	ldd	r27, Y+4	; 0x04
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	a1 09       	sbc	r26, r1
    129a:	b1 09       	sbc	r27, r1
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	ab 83       	std	Y+3, r26	; 0x03
    12a2:	bc 83       	std	Y+4, r27	; 0x04

	}
	else
	{
		u32 Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows;
		while(Local_u32NUM_INIOverFlows>0)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	ab 81       	ldd	r26, Y+3	; 0x03
    12aa:	bc 81       	ldd	r27, Y+4	; 0x04
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	a1 05       	cpc	r26, r1
    12b0:	b1 05       	cpc	r27, r1
    12b2:	e9 f6       	brne	.-70     	; 0x126e <TIMER0_enuSetSychDelay+0x1a4>
		}
	}



	return Local_enuErrorState;
    12b4:	8a 89       	ldd	r24, Y+18	; 0x12
}
    12b6:	66 96       	adiw	r28, 0x16	; 22
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <TIMER0_enuSet_CTC_callback>:

ES_t TIMER0_enuSet_CTC_callback(void (*A_ptr_to_func)(void),void *Copy_vidPParameter)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <TIMER0_enuSet_CTC_callback+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <TIMER0_enuSet_CTC_callback+0x8>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	9b 83       	std	Y+3, r25	; 0x03
    12d8:	8a 83       	std	Y+2, r24	; 0x02
    12da:	7d 83       	std	Y+5, r23	; 0x05
    12dc:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	89 83       	std	Y+1, r24	; 0x01
	if(A_ptr_to_func)
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	9b 81       	ldd	r25, Y+3	; 0x03
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	61 f0       	breq	.+24     	; 0x1302 <TIMER0_enuSet_CTC_callback+0x3a>
	{
		EXTI0_PFunINIT[1] = A_ptr_to_func;
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	90 93 6b 01 	sts	0x016B, r25
    12f2:	80 93 6a 01 	sts	0x016A, r24
		EXTI0_PparameterINIT[1] = Copy_vidPParameter;
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	90 93 71 01 	sts	0x0171, r25
    12fe:	80 93 70 01 	sts	0x0170, r24

	}

	return Local_enuErrorState;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <__vector_11>:

ISR(VECT_TIMER0_OVF)
{
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_PFunINIT[0])
    133e:	80 91 68 01 	lds	r24, 0x0168
    1342:	90 91 69 01 	lds	r25, 0x0169
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	09 f4       	brne	.+2      	; 0x134c <__vector_11+0x38>
    134a:	44 c0       	rjmp	.+136    	; 0x13d4 <__vector_11+0xc0>
	{
		static u32 Local_u32counts = 0;
		Local_u32counts++;
    134c:	80 91 7c 01 	lds	r24, 0x017C
    1350:	90 91 7d 01 	lds	r25, 0x017D
    1354:	a0 91 7e 01 	lds	r26, 0x017E
    1358:	b0 91 7f 01 	lds	r27, 0x017F
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	a1 1d       	adc	r26, r1
    1360:	b1 1d       	adc	r27, r1
    1362:	80 93 7c 01 	sts	0x017C, r24
    1366:	90 93 7d 01 	sts	0x017D, r25
    136a:	a0 93 7e 01 	sts	0x017E, r26
    136e:	b0 93 7f 01 	sts	0x017F, r27
		if(Local_u32counts == Global0_u32NUM_INIOverFlows)
    1372:	20 91 7c 01 	lds	r18, 0x017C
    1376:	30 91 7d 01 	lds	r19, 0x017D
    137a:	40 91 7e 01 	lds	r20, 0x017E
    137e:	50 91 7f 01 	lds	r21, 0x017F
    1382:	80 91 78 01 	lds	r24, 0x0178
    1386:	90 91 79 01 	lds	r25, 0x0179
    138a:	a0 91 7a 01 	lds	r26, 0x017A
    138e:	b0 91 7b 01 	lds	r27, 0x017B
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	4a 07       	cpc	r20, r26
    1398:	5b 07       	cpc	r21, r27
    139a:	e1 f4       	brne	.+56     	; 0x13d4 <__vector_11+0xc0>
		{
			TCNT0 = Global0_u32PreLoad;
    139c:	e2 e5       	ldi	r30, 0x52	; 82
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 91 74 01 	lds	r24, 0x0174
    13a4:	90 91 75 01 	lds	r25, 0x0175
    13a8:	a0 91 76 01 	lds	r26, 0x0176
    13ac:	b0 91 77 01 	lds	r27, 0x0177
    13b0:	80 83       	st	Z, r24
			EXTI0_PFunINIT[0](EXTI0_PparameterINIT[0]);
    13b2:	e0 91 68 01 	lds	r30, 0x0168
    13b6:	f0 91 69 01 	lds	r31, 0x0169
    13ba:	80 91 6e 01 	lds	r24, 0x016E
    13be:	90 91 6f 01 	lds	r25, 0x016F
    13c2:	09 95       	icall
			Local_u32counts =0;
    13c4:	10 92 7c 01 	sts	0x017C, r1
    13c8:	10 92 7d 01 	sts	0x017D, r1
    13cc:	10 92 7e 01 	sts	0x017E, r1
    13d0:	10 92 7f 01 	sts	0x017F, r1

		}
	}
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_10>:

ISR(VECT_TIMER0_COMP)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_PFunINIT[1])
    1424:	80 91 6a 01 	lds	r24, 0x016A
    1428:	90 91 6b 01 	lds	r25, 0x016B
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	49 f0       	breq	.+18     	; 0x1442 <__vector_10+0x48>
	{
		EXTI0_PFunINIT[0](EXTI0_PparameterINIT[1]);
    1430:	e0 91 68 01 	lds	r30, 0x0168
    1434:	f0 91 69 01 	lds	r31, 0x0169
    1438:	80 91 70 01 	lds	r24, 0x0170
    143c:	90 91 71 01 	lds	r25, 0x0171
    1440:	09 95       	icall
	}
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	7f 91       	pop	r23
    1454:	6f 91       	pop	r22
    1456:	5f 91       	pop	r21
    1458:	4f 91       	pop	r20
    145a:	3f 91       	pop	r19
    145c:	2f 91       	pop	r18
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	0f 90       	pop	r0
    1464:	1f 90       	pop	r1
    1466:	18 95       	reti

00001468 <TIMER2_enuInit>:
static void(*EXTI2_PFunINIT[3])(void*) = {NULL,NULL,NULL};
static void*EXTI2_PparameterINIT[3] = {NULL,NULL,NULL};
static u32 Global2_u32PreLoad = 0;
static u32 Global2_u32NUM_INIOverFlows = 0;
ES_t TIMER2_enuInit(void)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	0f 92       	push	r0
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
#else
#error"NOT CORRECT compare output mode"
#endif

#elif TIMER2_MODE == WGM_PWM_PHCORRECT
	TCCR2 &=~(1<<3);
    1476:	a5 e4       	ldi	r26, 0x45	; 69
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e4       	ldi	r30, 0x45	; 69
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	8c 93       	st	X, r24
	TCCR2 |=(1<<6);
    1484:	a5 e4       	ldi	r26, 0x45	; 69
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e4       	ldi	r30, 0x45	; 69
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 64       	ori	r24, 0x40	; 64
    1490:	8c 93       	st	X, r24
#if COMP_MATCH_OUTPUT2 == COM_NORMAL_PORT
	TCCR2 &=~(1<<4);
	TCCR2 &=~(1<<5);
#elif COMP_MATCH_OUTPUT2 == COM_NON_INVERTING
	TCCR2 &=~(1<<4);
    1492:	a5 e4       	ldi	r26, 0x45	; 69
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e4       	ldi	r30, 0x45	; 69
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 7e       	andi	r24, 0xEF	; 239
    149e:	8c 93       	st	X, r24
	TCCR2 |=(1<<5);
    14a0:	a5 e4       	ldi	r26, 0x45	; 69
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e4       	ldi	r30, 0x45	; 69
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	80 62       	ori	r24, 0x20	; 32
    14ac:	8c 93       	st	X, r24
#elif TIMER2_PRES == PRESC_64
	TCCR2 |=3;
#elif TIMER2_PRES == PRESC_256
	TCCR2 |=4;
#elif TIMER2_PRES == PRESC_1024
	TCCR2 |=5;
    14ae:	a5 e4       	ldi	r26, 0x45	; 69
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e4       	ldi	r30, 0x45	; 69
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	85 60       	ori	r24, 0x05	; 5
    14ba:	8c 93       	st	X, r24
	TCCR2 |=7;

#else
#error"NOT CORRECT PRESCALING"
#endif
	return Local_enuErrorState;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <TIMER2_enuGeneratePWM>:

ES_t TIMER2_enuGeneratePWM(f32 Copy_f32VolteVAL)
{	ES_t Local_enuErrorState = ES_NOK;
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <TIMER2_enuGeneratePWM+0x12>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <TIMER2_enuGeneratePWM+0x14>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	6a 83       	std	Y+2, r22	; 0x02
    14e2:	7b 83       	std	Y+3, r23	; 0x03
    14e4:	8c 83       	std	Y+4, r24	; 0x04
    14e6:	9d 83       	std	Y+5, r25	; 0x05
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	89 83       	std	Y+1, r24	; 0x01
	#elif COMP_MATCH_OUTPUT2 == COM_INVERTING
	OCR2 = (u8)(255 - ((Copy_f32VolteVAL/5)*(Copy_f32VolteVAL/5)*256));
	#endif
#elif TIMER2_MODE == WGM_PWM_PHCORRECT
	#if COMP_MATCH_OUTPUT2 == COM_NON_INVERTING
	OCR2 = (u8)((Copy_f32VolteVAL/5)*(Copy_f32VolteVAL/5)*255);
    14ec:	0f 2e       	mov	r0, r31
    14ee:	f3 e4       	ldi	r31, 0x43	; 67
    14f0:	cf 2e       	mov	r12, r31
    14f2:	dd 24       	eor	r13, r13
    14f4:	f0 2d       	mov	r31, r0
    14f6:	6a 81       	ldd	r22, Y+2	; 0x02
    14f8:	7b 81       	ldd	r23, Y+3	; 0x03
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 ea       	ldi	r20, 0xA0	; 160
    1504:	50 e4       	ldi	r21, 0x40	; 64
    1506:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	7c 01       	movw	r14, r24
    1510:	8d 01       	movw	r16, r26
    1512:	6a 81       	ldd	r22, Y+2	; 0x02
    1514:	7b 81       	ldd	r23, Y+3	; 0x03
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 ea       	ldi	r20, 0xA0	; 160
    1520:	50 e4       	ldi	r21, 0x40	; 64
    1522:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9c 01       	movw	r18, r24
    152c:	ad 01       	movw	r20, r26
    152e:	c8 01       	movw	r24, r16
    1530:	b7 01       	movw	r22, r14
    1532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4f e7       	ldi	r20, 0x7F	; 127
    1544:	53 e4       	ldi	r21, 0x43	; 67
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	f6 01       	movw	r30, r12
    155c:	80 83       	st	Z, r24
	#elif COMP_MATCH_OUTPUT2 == COM_INVERTING
	OCR2 = (u8)(255 - ((Copy_f32VolteVAL/5)*(Copy_f32VolteVAL/5)*255));
	#endif

#endif
Local_enuErrorState = ES_OK;
    155e:	19 82       	std	Y+1, r1	; 0x01
return Local_enuErrorState;
    1560:	89 81       	ldd	r24, Y+1	; 0x01
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	df 90       	pop	r13
    157a:	cf 90       	pop	r12
    157c:	08 95       	ret

0000157e <TIMER2_enuEnableInterrupt>:

ES_t TIMER2_enuEnableInterrupt(void)
{	ES_t Local_enuErrorState = ES_NOK;
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	89 83       	std	Y+1, r24	; 0x01
TIMSK|=(1<<7);
    158c:	a9 e5       	ldi	r26, 0x59	; 89
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e9 e5       	ldi	r30, 0x59	; 89
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 68       	ori	r24, 0x80	; 128
    1598:	8c 93       	st	X, r24
Local_enuErrorState = ES_OK;
    159a:	19 82       	std	Y+1, r1	; 0x01
return Local_enuErrorState;
    159c:	89 81       	ldd	r24, Y+1	; 0x01
}
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <TIMER2_enuDisableInterrupt>:
ES_t TIMER2_enuDisableInterrupt(void)
{	ES_t Local_enuErrorState = ES_NOK;
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
TIMSK&=~(1<<7);
    15b4:	a9 e5       	ldi	r26, 0x59	; 89
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e9 e5       	ldi	r30, 0x59	; 89
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 77       	andi	r24, 0x7F	; 127
    15c0:	8c 93       	st	X, r24
Local_enuErrorState = ES_OK;
    15c2:	19 82       	std	Y+1, r1	; 0x01
return Local_enuErrorState;
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <TIMER2_enuSet_PINOCR2_VAL>:

ES_t TIMER2_enuSet_PINOCR2_VAL(u8 Copy_u8OCR0_VAL)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <TIMER2_enuSet_PINOCR2_VAL+0x6>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8OCR0_VAL;
    15de:	e3 e4       	ldi	r30, 0x43	; 67
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    15e6:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <TIMER2_enuSet_preload>:
ES_t TIMER2_enuSet_preload(u8 Copy_u8Preload)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <TIMER2_enuSet_preload+0x6>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload;
    1604:	e4 e4       	ldi	r30, 0x44	; 68
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    160c:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    160e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <TIMER2_enuSet_AsychDelay>:
ES_t TIMER2_enuSet_AsychDelay(u32 Copy_u32Time,void (*Copy_PfunApp)(void*),void * Copy_vidPParameter)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	66 97       	sbiw	r28, 0x16	; 22
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	6f 87       	std	Y+15, r22	; 0x0f
    1630:	78 8b       	std	Y+16, r23	; 0x10
    1632:	89 8b       	std	Y+17, r24	; 0x11
    1634:	9a 8b       	std	Y+18, r25	; 0x12
    1636:	5c 8b       	std	Y+20, r21	; 0x14
    1638:	4b 8b       	std	Y+19, r20	; 0x13
    163a:	3e 8b       	std	Y+22, r19	; 0x16
    163c:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState = ES_NOK;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	8e 87       	std	Y+14, r24	; 0x0e
	TIMSK&=~(1<<7);
    1642:	a9 e5       	ldi	r26, 0x59	; 89
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e9 e5       	ldi	r30, 0x59	; 89
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8f 77       	andi	r24, 0x7F	; 127
    164e:	8c 93       	st	X, r24
	f32 Local_f32OVERflowTime = (256*((f32)TIMER2_PRES/F_CPU))*1000;
    1650:	8f e6       	ldi	r24, 0x6F	; 111
    1652:	92 e1       	ldi	r25, 0x12	; 18
    1654:	a3 e0       	ldi	r26, 0x03	; 3
    1656:	b2 e4       	ldi	r27, 0x42	; 66
    1658:	8a 87       	std	Y+10, r24	; 0x0a
    165a:	9b 87       	std	Y+11, r25	; 0x0b
    165c:	ac 87       	std	Y+12, r26	; 0x0c
    165e:	bd 87       	std	Y+13, r27	; 0x0d
	f32 Local_f32NUM_OverFlows = (Copy_u32Time/Local_f32OVERflowTime);
    1660:	6f 85       	ldd	r22, Y+15	; 0x0f
    1662:	78 89       	ldd	r23, Y+16	; 0x10
    1664:	89 89       	ldd	r24, Y+17	; 0x11
    1666:	9a 89       	ldd	r25, Y+18	; 0x12
    1668:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	2a 85       	ldd	r18, Y+10	; 0x0a
    1676:	3b 85       	ldd	r19, Y+11	; 0x0b
    1678:	4c 85       	ldd	r20, Y+12	; 0x0c
    167a:	5d 85       	ldd	r21, Y+13	; 0x0d
    167c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	8e 83       	std	Y+6, r24	; 0x06
    1686:	9f 83       	std	Y+7, r25	; 0x07
    1688:	a8 87       	std	Y+8, r26	; 0x08
    168a:	b9 87       	std	Y+9, r27	; 0x09
	u32 Local_u32NUM_INIOverFlows;
	if((Local_f32NUM_OverFlows -(u32)Local_f32NUM_OverFlows) !=0.0)
    168c:	6e 81       	ldd	r22, Y+6	; 0x06
    168e:	7f 81       	ldd	r23, Y+7	; 0x07
    1690:	88 85       	ldd	r24, Y+8	; 0x08
    1692:	99 85       	ldd	r25, Y+9	; 0x09
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	6e 81       	ldd	r22, Y+6	; 0x06
    16aa:	7f 81       	ldd	r23, Y+7	; 0x07
    16ac:	88 85       	ldd	r24, Y+8	; 0x08
    16ae:	99 85       	ldd	r25, Y+9	; 0x09
    16b0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    16c8:	88 23       	and	r24, r24
    16ca:	09 f4       	brne	.+2      	; 0x16ce <TIMER2_enuSet_AsychDelay+0xb4>
    16cc:	54 c0       	rjmp	.+168    	; 0x1776 <TIMER2_enuSet_AsychDelay+0x15c>
	{

		Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows+1;
    16ce:	6e 81       	ldd	r22, Y+6	; 0x06
    16d0:	7f 81       	ldd	r23, Y+7	; 0x07
    16d2:	88 85       	ldd	r24, Y+8	; 0x08
    16d4:	99 85       	ldd	r25, Y+9	; 0x09
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	a1 1d       	adc	r26, r1
    16e2:	b1 1d       	adc	r27, r1
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	9b 83       	std	Y+3, r25	; 0x03
    16e8:	ac 83       	std	Y+4, r26	; 0x04
    16ea:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32NUM_OverFlows = Local_f32NUM_OverFlows - (u32)Local_f32NUM_OverFlows;
    16ec:	6e 81       	ldd	r22, Y+6	; 0x06
    16ee:	7f 81       	ldd	r23, Y+7	; 0x07
    16f0:	88 85       	ldd	r24, Y+8	; 0x08
    16f2:	99 85       	ldd	r25, Y+9	; 0x09
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1704:	9b 01       	movw	r18, r22
    1706:	ac 01       	movw	r20, r24
    1708:	6e 81       	ldd	r22, Y+6	; 0x06
    170a:	7f 81       	ldd	r23, Y+7	; 0x07
    170c:	88 85       	ldd	r24, Y+8	; 0x08
    170e:	99 85       	ldd	r25, Y+9	; 0x09
    1710:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8e 83       	std	Y+6, r24	; 0x06
    171a:	9f 83       	std	Y+7, r25	; 0x07
    171c:	a8 87       	std	Y+8, r26	; 0x08
    171e:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u8PreLoad = 256 - (Local_f32NUM_OverFlows * 256);
    1720:	6e 81       	ldd	r22, Y+6	; 0x06
    1722:	7f 81       	ldd	r23, Y+7	; 0x07
    1724:	88 85       	ldd	r24, Y+8	; 0x08
    1726:	99 85       	ldd	r25, Y+9	; 0x09
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	53 ec       	ldi	r21, 0xC3	; 195
    1730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	53 e4       	ldi	r21, 0x43	; 67
    1744:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	89 83       	std	Y+1, r24	; 0x01
		Global2_u32PreLoad = Local_u8PreLoad;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e0       	ldi	r26, 0x00	; 0
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	80 93 8c 01 	sts	0x018C, r24
    1768:	90 93 8d 01 	sts	0x018D, r25
    176c:	a0 93 8e 01 	sts	0x018E, r26
    1770:	b0 93 8f 01 	sts	0x018F, r27
    1774:	0c c0       	rjmp	.+24     	; 0x178e <TIMER2_enuSet_AsychDelay+0x174>
	}
	else
	{
		Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows;
    1776:	6e 81       	ldd	r22, Y+6	; 0x06
    1778:	7f 81       	ldd	r23, Y+7	; 0x07
    177a:	88 85       	ldd	r24, Y+8	; 0x08
    177c:	99 85       	ldd	r25, Y+9	; 0x09
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	9b 83       	std	Y+3, r25	; 0x03
    178a:	ac 83       	std	Y+4, r26	; 0x04
    178c:	bd 83       	std	Y+5, r27	; 0x05
	}
	Global2_u32NUM_INIOverFlows = Local_u32NUM_INIOverFlows;
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	ac 81       	ldd	r26, Y+4	; 0x04
    1794:	bd 81       	ldd	r27, Y+5	; 0x05
    1796:	80 93 90 01 	sts	0x0190, r24
    179a:	90 93 91 01 	sts	0x0191, r25
    179e:	a0 93 92 01 	sts	0x0192, r26
    17a2:	b0 93 93 01 	sts	0x0193, r27
	if(Copy_PfunApp)
    17a6:	8b 89       	ldd	r24, Y+19	; 0x13
    17a8:	9c 89       	ldd	r25, Y+20	; 0x14
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	69 f0       	breq	.+26     	; 0x17c8 <TIMER2_enuSet_AsychDelay+0x1ae>
	{
		EXTI2_PFunINIT[0] = Copy_PfunApp;
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	90 93 81 01 	sts	0x0181, r25
    17b6:	80 93 80 01 	sts	0x0180, r24
		EXTI2_PparameterINIT[0] = Copy_vidPParameter;
    17ba:	8d 89       	ldd	r24, Y+21	; 0x15
    17bc:	9e 89       	ldd	r25, Y+22	; 0x16
    17be:	90 93 87 01 	sts	0x0187, r25
    17c2:	80 93 86 01 	sts	0x0186, r24
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <TIMER2_enuSet_AsychDelay+0x1b2>
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	8e 87       	std	Y+14, r24	; 0x0e

	}
	TIMSK|=(1<<7);
    17cc:	a9 e5       	ldi	r26, 0x59	; 89
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e9 e5       	ldi	r30, 0x59	; 89
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	80 68       	ori	r24, 0x80	; 128
    17d8:	8c 93       	st	X, r24
	return Local_enuErrorState;
    17da:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    17dc:	66 96       	adiw	r28, 0x16	; 22
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <TIMER2_enuSetSychDelay>:

ES_t TIMER2_enuSetSychDelay(u32 Copy_u32Time)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	66 97       	sbiw	r28, 0x16	; 22
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	6b 8b       	std	Y+19, r22	; 0x13
    1804:	7c 8b       	std	Y+20, r23	; 0x14
    1806:	8d 8b       	std	Y+21, r24	; 0x15
    1808:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	8a 8b       	std	Y+18, r24	; 0x12

	TIMSK&=~(1<<7);
    180e:	a9 e5       	ldi	r26, 0x59	; 89
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e9 e5       	ldi	r30, 0x59	; 89
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	8f 77       	andi	r24, 0x7F	; 127
    181a:	8c 93       	st	X, r24
	f32 Local_f32OVERflowTime = (256*((f32)TIMER2_PRES/F_CPU)*1000);
    181c:	8f e6       	ldi	r24, 0x6F	; 111
    181e:	92 e1       	ldi	r25, 0x12	; 18
    1820:	a3 e0       	ldi	r26, 0x03	; 3
    1822:	b2 e4       	ldi	r27, 0x42	; 66
    1824:	8e 87       	std	Y+14, r24	; 0x0e
    1826:	9f 87       	std	Y+15, r25	; 0x0f
    1828:	a8 8b       	std	Y+16, r26	; 0x10
    182a:	b9 8b       	std	Y+17, r27	; 0x11
	f32 Local_f32NUM_OverFlows = (Copy_u32Time/Local_f32OVERflowTime);
    182c:	6b 89       	ldd	r22, Y+19	; 0x13
    182e:	7c 89       	ldd	r23, Y+20	; 0x14
    1830:	8d 89       	ldd	r24, Y+21	; 0x15
    1832:	9e 89       	ldd	r25, Y+22	; 0x16
    1834:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	2e 85       	ldd	r18, Y+14	; 0x0e
    1842:	3f 85       	ldd	r19, Y+15	; 0x0f
    1844:	48 89       	ldd	r20, Y+16	; 0x10
    1846:	59 89       	ldd	r21, Y+17	; 0x11
    1848:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8a 87       	std	Y+10, r24	; 0x0a
    1852:	9b 87       	std	Y+11, r25	; 0x0b
    1854:	ac 87       	std	Y+12, r26	; 0x0c
    1856:	bd 87       	std	Y+13, r27	; 0x0d

	if((Local_f32NUM_OverFlows -(u32)Local_f32NUM_OverFlows) !=0.0)
    1858:	6a 85       	ldd	r22, Y+10	; 0x0a
    185a:	7b 85       	ldd	r23, Y+11	; 0x0b
    185c:	8c 85       	ldd	r24, Y+12	; 0x0c
    185e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	bc 01       	movw	r22, r24
    186a:	cd 01       	movw	r24, r26
    186c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1870:	9b 01       	movw	r18, r22
    1872:	ac 01       	movw	r20, r24
    1874:	6a 85       	ldd	r22, Y+10	; 0x0a
    1876:	7b 85       	ldd	r23, Y+11	; 0x0b
    1878:	8c 85       	ldd	r24, Y+12	; 0x0c
    187a:	9d 85       	ldd	r25, Y+13	; 0x0d
    187c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1894:	88 23       	and	r24, r24
    1896:	09 f4       	brne	.+2      	; 0x189a <TIMER2_enuSetSychDelay+0xac>
    1898:	73 c0       	rjmp	.+230    	; 0x1980 <TIMER2_enuSetSychDelay+0x192>
	{

		u32 Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows+1;
    189a:	6a 85       	ldd	r22, Y+10	; 0x0a
    189c:	7b 85       	ldd	r23, Y+11	; 0x0b
    189e:	8c 85       	ldd	r24, Y+12	; 0x0c
    18a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	a1 1d       	adc	r26, r1
    18ae:	b1 1d       	adc	r27, r1
    18b0:	8e 83       	std	Y+6, r24	; 0x06
    18b2:	9f 83       	std	Y+7, r25	; 0x07
    18b4:	a8 87       	std	Y+8, r26	; 0x08
    18b6:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32NUM_OverFlows = Local_f32NUM_OverFlows - (u32)Local_f32NUM_OverFlows;
    18b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    18ba:	7b 85       	ldd	r23, Y+11	; 0x0b
    18bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    18be:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    18d0:	9b 01       	movw	r18, r22
    18d2:	ac 01       	movw	r20, r24
    18d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    18d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    18d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    18da:	9d 85       	ldd	r25, Y+13	; 0x0d
    18dc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	8a 87       	std	Y+10, r24	; 0x0a
    18e6:	9b 87       	std	Y+11, r25	; 0x0b
    18e8:	ac 87       	std	Y+12, r26	; 0x0c
    18ea:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u8PreLoad = 256 - (Local_f32NUM_OverFlows * 256);
    18ec:	6a 85       	ldd	r22, Y+10	; 0x0a
    18ee:	7b 85       	ldd	r23, Y+11	; 0x0b
    18f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    18f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	53 ec       	ldi	r21, 0xC3	; 195
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	53 e4       	ldi	r21, 0x43	; 67
    1910:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	bc 01       	movw	r22, r24
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8d 83       	std	Y+5, r24	; 0x05
		TCNT2 = Local_u8PreLoad;
    1926:	e4 e4       	ldi	r30, 0x44	; 68
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	80 83       	st	Z, r24
    192e:	1f c0       	rjmp	.+62     	; 0x196e <TIMER2_enuSetSychDelay+0x180>

		while(Local_u32NUM_INIOverFlows>0)
		{
			while(((TIFR>>6)&1) == 0);
    1930:	e8 e5       	ldi	r30, 0x58	; 88
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	82 95       	swap	r24
    1938:	86 95       	lsr	r24
    193a:	86 95       	lsr	r24
    193c:	83 70       	andi	r24, 0x03	; 3
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	81 70       	andi	r24, 0x01	; 1
    1944:	90 70       	andi	r25, 0x00	; 0
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	99 f3       	breq	.-26     	; 0x1930 <TIMER2_enuSetSychDelay+0x142>
			TIFR|=(1<<6);
    194a:	a8 e5       	ldi	r26, 0x58	; 88
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e8 e5       	ldi	r30, 0x58	; 88
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	80 64       	ori	r24, 0x40	; 64
    1956:	8c 93       	st	X, r24
			Local_u32NUM_INIOverFlows--;
    1958:	8e 81       	ldd	r24, Y+6	; 0x06
    195a:	9f 81       	ldd	r25, Y+7	; 0x07
    195c:	a8 85       	ldd	r26, Y+8	; 0x08
    195e:	b9 85       	ldd	r27, Y+9	; 0x09
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	a1 09       	sbc	r26, r1
    1964:	b1 09       	sbc	r27, r1
    1966:	8e 83       	std	Y+6, r24	; 0x06
    1968:	9f 83       	std	Y+7, r25	; 0x07
    196a:	a8 87       	std	Y+8, r26	; 0x08
    196c:	b9 87       	std	Y+9, r27	; 0x09
		u32 Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows+1;
		Local_f32NUM_OverFlows = Local_f32NUM_OverFlows - (u32)Local_f32NUM_OverFlows;
		u8 Local_u8PreLoad = 256 - (Local_f32NUM_OverFlows * 256);
		TCNT2 = Local_u8PreLoad;

		while(Local_u32NUM_INIOverFlows>0)
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	a8 85       	ldd	r26, Y+8	; 0x08
    1974:	b9 85       	ldd	r27, Y+9	; 0x09
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	a1 05       	cpc	r26, r1
    197a:	b1 05       	cpc	r27, r1
    197c:	c9 f6       	brne	.-78     	; 0x1930 <TIMER2_enuSetSychDelay+0x142>
    197e:	34 c0       	rjmp	.+104    	; 0x19e8 <TIMER2_enuSetSychDelay+0x1fa>


	}
	else
	{
		u32 Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows;
    1980:	6a 85       	ldd	r22, Y+10	; 0x0a
    1982:	7b 85       	ldd	r23, Y+11	; 0x0b
    1984:	8c 85       	ldd	r24, Y+12	; 0x0c
    1986:	9d 85       	ldd	r25, Y+13	; 0x0d
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	9a 83       	std	Y+2, r25	; 0x02
    1994:	ab 83       	std	Y+3, r26	; 0x03
    1996:	bc 83       	std	Y+4, r27	; 0x04
    1998:	1f c0       	rjmp	.+62     	; 0x19d8 <TIMER2_enuSetSychDelay+0x1ea>
		while(Local_u32NUM_INIOverFlows>0)
		{
			while(((TIFR>>6)&1) == 0);
    199a:	e8 e5       	ldi	r30, 0x58	; 88
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	82 95       	swap	r24
    19a2:	86 95       	lsr	r24
    19a4:	86 95       	lsr	r24
    19a6:	83 70       	andi	r24, 0x03	; 3
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	81 70       	andi	r24, 0x01	; 1
    19ae:	90 70       	andi	r25, 0x00	; 0
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	99 f3       	breq	.-26     	; 0x199a <TIMER2_enuSetSychDelay+0x1ac>
			TIFR|=(1<<6);
    19b4:	a8 e5       	ldi	r26, 0x58	; 88
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e8 e5       	ldi	r30, 0x58	; 88
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	80 64       	ori	r24, 0x40	; 64
    19c0:	8c 93       	st	X, r24
			Local_u32NUM_INIOverFlows--;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	ab 81       	ldd	r26, Y+3	; 0x03
    19c8:	bc 81       	ldd	r27, Y+4	; 0x04
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	a1 09       	sbc	r26, r1
    19ce:	b1 09       	sbc	r27, r1
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	ab 83       	std	Y+3, r26	; 0x03
    19d6:	bc 83       	std	Y+4, r27	; 0x04

	}
	else
	{
		u32 Local_u32NUM_INIOverFlows = (u32)Local_f32NUM_OverFlows;
		while(Local_u32NUM_INIOverFlows>0)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	ab 81       	ldd	r26, Y+3	; 0x03
    19de:	bc 81       	ldd	r27, Y+4	; 0x04
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	a1 05       	cpc	r26, r1
    19e4:	b1 05       	cpc	r27, r1
    19e6:	c9 f6       	brne	.-78     	; 0x199a <TIMER2_enuSetSychDelay+0x1ac>
		}
	}



	return Local_enuErrorState;
    19e8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    19ea:	66 96       	adiw	r28, 0x16	; 22
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <TIMER2_enuSet_CTC_callback>:

ES_t TIMER2_enuSet_CTC_callback(void (*A_ptr_to_func)(void),void *Copy_vidPParameter)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <TIMER2_enuSet_CTC_callback+0x6>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <TIMER2_enuSet_CTC_callback+0x8>
    1a04:	0f 92       	push	r0
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	9b 83       	std	Y+3, r25	; 0x03
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
    1a0e:	7d 83       	std	Y+5, r23	; 0x05
    1a10:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	89 83       	std	Y+1, r24	; 0x01
	if(A_ptr_to_func)
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <TIMER2_enuSet_CTC_callback+0x3a>
	{
		EXTI2_PFunINIT[1] = A_ptr_to_func;
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	9b 81       	ldd	r25, Y+3	; 0x03
    1a22:	90 93 83 01 	sts	0x0183, r25
    1a26:	80 93 82 01 	sts	0x0182, r24
		EXTI2_PparameterINIT[1] = Copy_vidPParameter;
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	90 93 89 01 	sts	0x0189, r25
    1a32:	80 93 88 01 	sts	0x0188, r24

	}

	return Local_enuErrorState;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <__vector_5>:

ISR(VECT_TIMER2_OVF)
{
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_PFunINIT[0])
    1a72:	80 91 80 01 	lds	r24, 0x0180
    1a76:	90 91 81 01 	lds	r25, 0x0181
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <__vector_5+0x38>
    1a7e:	44 c0       	rjmp	.+136    	; 0x1b08 <__vector_5+0xc0>
	{
		static u32 Local_u32counts = 0;
		Local_u32counts++;
    1a80:	80 91 94 01 	lds	r24, 0x0194
    1a84:	90 91 95 01 	lds	r25, 0x0195
    1a88:	a0 91 96 01 	lds	r26, 0x0196
    1a8c:	b0 91 97 01 	lds	r27, 0x0197
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	a1 1d       	adc	r26, r1
    1a94:	b1 1d       	adc	r27, r1
    1a96:	80 93 94 01 	sts	0x0194, r24
    1a9a:	90 93 95 01 	sts	0x0195, r25
    1a9e:	a0 93 96 01 	sts	0x0196, r26
    1aa2:	b0 93 97 01 	sts	0x0197, r27
		if(Local_u32counts == Global0_u32NUM_INIOverFlows)
    1aa6:	20 91 94 01 	lds	r18, 0x0194
    1aaa:	30 91 95 01 	lds	r19, 0x0195
    1aae:	40 91 96 01 	lds	r20, 0x0196
    1ab2:	50 91 97 01 	lds	r21, 0x0197
    1ab6:	80 91 78 01 	lds	r24, 0x0178
    1aba:	90 91 79 01 	lds	r25, 0x0179
    1abe:	a0 91 7a 01 	lds	r26, 0x017A
    1ac2:	b0 91 7b 01 	lds	r27, 0x017B
    1ac6:	28 17       	cp	r18, r24
    1ac8:	39 07       	cpc	r19, r25
    1aca:	4a 07       	cpc	r20, r26
    1acc:	5b 07       	cpc	r21, r27
    1ace:	e1 f4       	brne	.+56     	; 0x1b08 <__vector_5+0xc0>
		{
			TCNT2 = Global2_u32PreLoad;
    1ad0:	e4 e4       	ldi	r30, 0x44	; 68
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 91 8c 01 	lds	r24, 0x018C
    1ad8:	90 91 8d 01 	lds	r25, 0x018D
    1adc:	a0 91 8e 01 	lds	r26, 0x018E
    1ae0:	b0 91 8f 01 	lds	r27, 0x018F
    1ae4:	80 83       	st	Z, r24
			EXTI2_PFunINIT[0](EXTI2_PparameterINIT[0]);
    1ae6:	e0 91 80 01 	lds	r30, 0x0180
    1aea:	f0 91 81 01 	lds	r31, 0x0181
    1aee:	80 91 86 01 	lds	r24, 0x0186
    1af2:	90 91 87 01 	lds	r25, 0x0187
    1af6:	09 95       	icall
			Local_u32counts =0;
    1af8:	10 92 94 01 	sts	0x0194, r1
    1afc:	10 92 95 01 	sts	0x0195, r1
    1b00:	10 92 96 01 	sts	0x0196, r1
    1b04:	10 92 97 01 	sts	0x0197, r1

		}
	}
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	0f 90       	pop	r0
    1b2a:	1f 90       	pop	r1
    1b2c:	18 95       	reti

00001b2e <__vector_4>:

ISR(VECT_TIMER2_COMP)
{
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_PFunINIT[1])
    1b58:	80 91 82 01 	lds	r24, 0x0182
    1b5c:	90 91 83 01 	lds	r25, 0x0183
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	49 f0       	breq	.+18     	; 0x1b76 <__vector_4+0x48>
	{
		EXTI2_PFunINIT[0](EXTI0_PparameterINIT[1]);
    1b64:	e0 91 80 01 	lds	r30, 0x0180
    1b68:	f0 91 81 01 	lds	r31, 0x0181
    1b6c:	80 91 70 01 	lds	r24, 0x0170
    1b70:	90 91 71 01 	lds	r25, 0x0171
    1b74:	09 95       	icall
	}
}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	ff 91       	pop	r31
    1b7c:	ef 91       	pop	r30
    1b7e:	bf 91       	pop	r27
    1b80:	af 91       	pop	r26
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	7f 91       	pop	r23
    1b88:	6f 91       	pop	r22
    1b8a:	5f 91       	pop	r21
    1b8c:	4f 91       	pop	r20
    1b8e:	3f 91       	pop	r19
    1b90:	2f 91       	pop	r18
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	0f 90       	pop	r0
    1b98:	1f 90       	pop	r1
    1b9a:	18 95       	reti

00001b9c <GIE_enuEnable>:
#include"../../LIB/StdTypes.h"
#include"../../LIB/errorStatuse.h"
#include"GIE_Priv.h"

ES_t GIE_enuEnable(void)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	89 83       	std	Y+1, r24	; 0x01

	  SREG|=(1<<7);
    1baa:	af e5       	ldi	r26, 0x5F	; 95
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	ef e5       	ldi	r30, 0x5F	; 95
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 68       	ori	r24, 0x80	; 128
    1bb6:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	0f 92       	push	r0
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01

	SREG&=~(1<<7);
    1bd0:	af e5       	ldi	r26, 0x5F	; 95
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ef e5       	ldi	r30, 0x5F	; 95
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	8f 77       	andi	r24, 0x7F	; 127
    1bdc:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_Private.h"


ES_t DIO_enuInit(void)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	0f 92       	push	r0
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    1bf6:	ea e3       	ldi	r30, 0x3A	; 58
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	80 83       	st	Z, r24

	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    1bfe:	e7 e3       	ldi	r30, 0x37	; 55
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	86 eb       	ldi	r24, 0xB6	; 182
    1c04:	80 83       	st	Z, r24

	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    1c06:	e4 e3       	ldi	r30, 0x34	; 52
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	86 eb       	ldi	r24, 0xB6	; 182
    1c0c:	80 83       	st	Z, r24

	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    1c0e:	e1 e3       	ldi	r30, 0x31	; 49
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	86 eb       	ldi	r24, 0xB6	; 182
    1c14:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    1c16:	eb e3       	ldi	r30, 0x3B	; 59
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	10 82       	st	Z, r1

	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    1c1c:	e8 e3       	ldi	r30, 0x38	; 56
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	8a e3       	ldi	r24, 0x3A	; 58
    1c22:	80 83       	st	Z, r24

	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    1c24:	e5 e3       	ldi	r30, 0x35	; 53
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a e3       	ldi	r24, 0x3A	; 58
    1c2a:	80 83       	st	Z, r24

	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    1c2c:	e2 e3       	ldi	r30, 0x32	; 50
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8a e3       	ldi	r24, 0x3A	; 58
    1c32:	80 83       	st	Z, r24

	Local_enuErrorStates = ES_OK;
    1c34:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorStates;
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <DIO_enuSetPortDir+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <DIO_enuSetPortDir+0x8>
    1c48:	0f 92       	push	r0
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	84 30       	cpi	r24, 0x04	; 4
    1c5a:	a0 f5       	brcc	.+104    	; 0x1cc4 <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3d 83       	std	Y+5, r19	; 0x05
    1c64:	2c 83       	std	Y+4, r18	; 0x04
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	d1 f0       	breq	.+52     	; 0x1ca4 <DIO_enuSetPortDir+0x64>
    1c70:	2c 81       	ldd	r18, Y+4	; 0x04
    1c72:	3d 81       	ldd	r19, Y+5	; 0x05
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <DIO_enuSetPortDir+0x44>
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	61 f0       	breq	.+24     	; 0x1c9a <DIO_enuSetPortDir+0x5a>
    1c82:	1e c0       	rjmp	.+60     	; 0x1cc0 <DIO_enuSetPortDir+0x80>
    1c84:	2c 81       	ldd	r18, Y+4	; 0x04
    1c86:	3d 81       	ldd	r19, Y+5	; 0x05
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <DIO_enuSetPortDir+0x6e>
    1c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c90:	9d 81       	ldd	r25, Y+5	; 0x05
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	91 05       	cpc	r25, r1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <DIO_enuSetPortDir+0x78>
    1c98:	13 c0       	rjmp	.+38     	; 0x1cc0 <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
					DDRA = Copy_u8PortValue;break;
    1c9a:	ea e3       	ldi	r30, 0x3A	; 58
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	80 83       	st	Z, r24
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
					DDRB = Copy_u8PortValue;break;
    1ca4:	e7 e3       	ldi	r30, 0x37	; 55
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	80 83       	st	Z, r24
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
					DDRC= Copy_u8PortValue;break;
    1cae:	e4 e3       	ldi	r30, 0x34	; 52
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	80 83       	st	Z, r24
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
					DDRD = Copy_u8PortValue;break;
    1cb8:	e1 e3       	ldi	r30, 0x31	; 49
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <DIO_enuSetPortVAL+0x6>
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <DIO_enuSetPortVAL+0x8>
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	8a 83       	std	Y+2, r24	; 0x02
    1cea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	84 30       	cpi	r24, 0x04	; 4
    1cf4:	a0 f5       	brcc	.+104    	; 0x1d5e <DIO_enuSetPortVAL+0x84>
		{
			switch(Copy_u8PortID)
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3d 83       	std	Y+5, r19	; 0x05
    1cfe:	2c 83       	std	Y+4, r18	; 0x04
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	d1 f0       	breq	.+52     	; 0x1d3e <DIO_enuSetPortVAL+0x64>
    1d0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d0e:	22 30       	cpi	r18, 0x02	; 2
    1d10:	31 05       	cpc	r19, r1
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <DIO_enuSetPortVAL+0x44>
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	9d 81       	ldd	r25, Y+5	; 0x05
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	61 f0       	breq	.+24     	; 0x1d34 <DIO_enuSetPortVAL+0x5a>
    1d1c:	1e c0       	rjmp	.+60     	; 0x1d5a <DIO_enuSetPortVAL+0x80>
    1d1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d20:	3d 81       	ldd	r19, Y+5	; 0x05
    1d22:	22 30       	cpi	r18, 0x02	; 2
    1d24:	31 05       	cpc	r19, r1
    1d26:	81 f0       	breq	.+32     	; 0x1d48 <DIO_enuSetPortVAL+0x6e>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	91 05       	cpc	r25, r1
    1d30:	81 f0       	breq	.+32     	; 0x1d52 <DIO_enuSetPortVAL+0x78>
    1d32:	13 c0       	rjmp	.+38     	; 0x1d5a <DIO_enuSetPortVAL+0x80>
			{
			case DIO_PORTA:
						PORTA = Copy_u8PortValue;break;
    1d34:	eb e3       	ldi	r30, 0x3B	; 59
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	80 83       	st	Z, r24
    1d3c:	0e c0       	rjmp	.+28     	; 0x1d5a <DIO_enuSetPortVAL+0x80>
			case DIO_PORTB:
						PORTB = Copy_u8PortValue;break;
    1d3e:	e8 e3       	ldi	r30, 0x38	; 56
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	80 83       	st	Z, r24
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <DIO_enuSetPortVAL+0x80>
			case DIO_PORTC:
						PORTC= Copy_u8PortValue;break;
    1d48:	e5 e3       	ldi	r30, 0x35	; 53
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	80 83       	st	Z, r24
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <DIO_enuSetPortVAL+0x80>
			case DIO_PORTD:
						PORTD = Copy_u8PortValue;break;
    1d52:	e2 e3       	ldi	r30, 0x32	; 50
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
    1d5a:	19 82       	std	Y+1, r1	; 0x01
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_enuSetPortVAL+0x88>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <DIO_enuToggelPort+0x6>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <DIO_enuToggelPort+0x8>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	84 30       	cpi	r24, 0x04	; 4
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <DIO_enuToggelPort+0x1a>
    1d8c:	40 c0       	rjmp	.+128    	; 0x1e0e <DIO_enuToggelPort+0x9a>
			{
				switch(Copy_u8PortID)
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	3c 83       	std	Y+4, r19	; 0x04
    1d96:	2b 83       	std	Y+3, r18	; 0x03
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	91 05       	cpc	r25, r1
    1da0:	e9 f0       	breq	.+58     	; 0x1ddc <DIO_enuToggelPort+0x68>
    1da2:	2b 81       	ldd	r18, Y+3	; 0x03
    1da4:	3c 81       	ldd	r19, Y+4	; 0x04
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	31 05       	cpc	r19, r1
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <DIO_enuToggelPort+0x42>
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <DIO_enuToggelPort+0x58>
    1db4:	2a c0       	rjmp	.+84     	; 0x1e0a <DIO_enuToggelPort+0x96>
    1db6:	2b 81       	ldd	r18, Y+3	; 0x03
    1db8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	b1 f0       	breq	.+44     	; 0x1dec <DIO_enuToggelPort+0x78>
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	c9 f0       	breq	.+50     	; 0x1dfc <DIO_enuToggelPort+0x88>
    1dca:	1f c0       	rjmp	.+62     	; 0x1e0a <DIO_enuToggelPort+0x96>
				{
				case DIO_PORTA:
							PORTA = ~PORTA ;break;
    1dcc:	ab e3       	ldi	r26, 0x3B	; 59
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e3       	ldi	r30, 0x3B	; 59
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	80 95       	com	r24
    1dd8:	8c 93       	st	X, r24
    1dda:	17 c0       	rjmp	.+46     	; 0x1e0a <DIO_enuToggelPort+0x96>
				case DIO_PORTB:
							PORTB = ~PORTB ;break;
    1ddc:	a8 e3       	ldi	r26, 0x38	; 56
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e8 e3       	ldi	r30, 0x38	; 56
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	80 95       	com	r24
    1de8:	8c 93       	st	X, r24
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <DIO_enuToggelPort+0x96>
				case DIO_PORTC:
							PORTC = ~PORTC ;break;
    1dec:	a5 e3       	ldi	r26, 0x35	; 53
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 95       	com	r24
    1df8:	8c 93       	st	X, r24
    1dfa:	07 c0       	rjmp	.+14     	; 0x1e0a <DIO_enuToggelPort+0x96>
				case DIO_PORTD:
							PORTD = ~PORTD ;break;
    1dfc:	a2 e3       	ldi	r26, 0x32	; 50
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e2 e3       	ldi	r30, 0x32	; 50
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 95       	com	r24
    1e08:	8c 93       	st	X, r24
				}
				Local_enuErrorStates = ES_OK;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_enuToggelPort+0x9e>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	89 83       	std	Y+1, r24	; 0x01
			}
	return Local_enuErrorStates;
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <DIO_enuGetPortVAL+0x6>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <DIO_enuGetPortVAL+0x8>
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <DIO_enuGetPortVAL+0xa>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	8a 83       	std	Y+2, r24	; 0x02
    1e32:	7c 83       	std	Y+4, r23	; 0x04
    1e34:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <DIO_enuGetPortVAL+0x22>
    1e42:	42 c0       	rjmp	.+132    	; 0x1ec8 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	84 30       	cpi	r24, 0x04	; 4
    1e48:	e0 f5       	brcc	.+120    	; 0x1ec2 <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	3e 83       	std	Y+6, r19	; 0x06
    1e52:	2d 83       	std	Y+5, r18	; 0x05
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	e1 f0       	breq	.+56     	; 0x1e96 <DIO_enuGetPortVAL+0x74>
    1e5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e60:	3e 81       	ldd	r19, Y+6	; 0x06
    1e62:	22 30       	cpi	r18, 0x02	; 2
    1e64:	31 05       	cpc	r19, r1
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <DIO_enuGetPortVAL+0x50>
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	61 f0       	breq	.+24     	; 0x1e88 <DIO_enuGetPortVAL+0x66>
    1e70:	26 c0       	rjmp	.+76     	; 0x1ebe <DIO_enuGetPortVAL+0x9c>
    1e72:	2d 81       	ldd	r18, Y+5	; 0x05
    1e74:	3e 81       	ldd	r19, Y+6	; 0x06
    1e76:	22 30       	cpi	r18, 0x02	; 2
    1e78:	31 05       	cpc	r19, r1
    1e7a:	a1 f0       	breq	.+40     	; 0x1ea4 <DIO_enuGetPortVAL+0x82>
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	83 30       	cpi	r24, 0x03	; 3
    1e82:	91 05       	cpc	r25, r1
    1e84:	b1 f0       	breq	.+44     	; 0x1eb2 <DIO_enuGetPortVAL+0x90>
    1e86:	1b c0       	rjmp	.+54     	; 0x1ebe <DIO_enuGetPortVAL+0x9c>
			{
				case DIO_PORTA:
					*Copy_Pu8Value = PINA ;break;
    1e88:	e9 e3       	ldi	r30, 0x39	; 57
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e90:	fc 81       	ldd	r31, Y+4	; 0x04
    1e92:	80 83       	st	Z, r24
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTB:
					*Copy_Pu8Value = PINB ;break;
    1e96:	e6 e3       	ldi	r30, 0x36	; 54
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea0:	80 83       	st	Z, r24
    1ea2:	0d c0       	rjmp	.+26     	; 0x1ebe <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTC:
					*Copy_Pu8Value = PINC ;break;
    1ea4:	e3 e3       	ldi	r30, 0x33	; 51
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	eb 81       	ldd	r30, Y+3	; 0x03
    1eac:	fc 81       	ldd	r31, Y+4	; 0x04
    1eae:	80 83       	st	Z, r24
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTD:
					*Copy_Pu8Value = PIND ;break;
    1eb2:	e0 e3       	ldi	r30, 0x30	; 48
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eba:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebc:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
    1ebe:	19 82       	std	Y+1, r1	; 0x01
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		 Local_enuErrorStates = ES_NULLPOINTER;
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ece:	26 96       	adiw	r28, 0x06	; 6
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <DIO_enuSetPINDir+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <DIO_enuSetPINDir+0x8>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <DIO_enuSetPINDir+0xa>
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    1ef0:	6b 83       	std	Y+3, r22	; 0x03
    1ef2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	84 30       	cpi	r24, 0x04	; 4
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <DIO_enuSetPINDir+0x20>
    1efe:	d0 c0       	rjmp	.+416    	; 0x20a0 <DIO_enuSetPINDir+0x1c0>
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	88 30       	cpi	r24, 0x08	; 8
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <DIO_enuSetPINDir+0x28>
    1f06:	cc c0       	rjmp	.+408    	; 0x20a0 <DIO_enuSetPINDir+0x1c0>
    1f08:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	08 f0       	brcs	.+2      	; 0x1f10 <DIO_enuSetPINDir+0x30>
    1f0e:	c8 c0       	rjmp	.+400    	; 0x20a0 <DIO_enuSetPINDir+0x1c0>
	{

			switch(Copy_u8PortID)
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	3e 83       	std	Y+6, r19	; 0x06
    1f18:	2d 83       	std	Y+5, r18	; 0x05
    1f1a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f1c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f1e:	61 30       	cpi	r22, 0x01	; 1
    1f20:	71 05       	cpc	r23, r1
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <DIO_enuSetPINDir+0x46>
    1f24:	41 c0       	rjmp	.+130    	; 0x1fa8 <DIO_enuSetPINDir+0xc8>
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	82 30       	cpi	r24, 0x02	; 2
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	34 f4       	brge	.+12     	; 0x1f3c <DIO_enuSetPINDir+0x5c>
    1f30:	2d 81       	ldd	r18, Y+5	; 0x05
    1f32:	3e 81       	ldd	r19, Y+6	; 0x06
    1f34:	21 15       	cp	r18, r1
    1f36:	31 05       	cpc	r19, r1
    1f38:	71 f0       	breq	.+28     	; 0x1f56 <DIO_enuSetPINDir+0x76>
    1f3a:	b0 c0       	rjmp	.+352    	; 0x209c <DIO_enuSetPINDir+0x1bc>
    1f3c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f3e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f40:	62 30       	cpi	r22, 0x02	; 2
    1f42:	71 05       	cpc	r23, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <DIO_enuSetPINDir+0x68>
    1f46:	59 c0       	rjmp	.+178    	; 0x1ffa <DIO_enuSetPINDir+0x11a>
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	83 30       	cpi	r24, 0x03	; 3
    1f4e:	91 05       	cpc	r25, r1
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <DIO_enuSetPINDir+0x74>
    1f52:	7c c0       	rjmp	.+248    	; 0x204c <DIO_enuSetPINDir+0x16c>
    1f54:	a3 c0       	rjmp	.+326    	; 0x209c <DIO_enuSetPINDir+0x1bc>
			{
				case DIO_PORTA:
							DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1f56:	aa e3       	ldi	r26, 0x3A	; 58
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	ea e3       	ldi	r30, 0x3A	; 58
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	48 2f       	mov	r20, r24
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <DIO_enuSetPINDir+0x92>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	2a 95       	dec	r18
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <DIO_enuSetPINDir+0x8e>
    1f76:	80 95       	com	r24
    1f78:	84 23       	and	r24, r20
    1f7a:	8c 93       	st	X, r24
							DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1f7c:	aa e3       	ldi	r26, 0x3A	; 58
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	ea e3       	ldi	r30, 0x3A	; 58
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	b9 01       	movw	r22, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <DIO_enuSetPINDir+0xbc>
    1f98:	66 0f       	add	r22, r22
    1f9a:	77 1f       	adc	r23, r23
    1f9c:	8a 95       	dec	r24
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <DIO_enuSetPINDir+0xb8>
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	84 2b       	or	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	7a c0       	rjmp	.+244    	; 0x209c <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTB:
							DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1fa8:	a7 e3       	ldi	r26, 0x37	; 55
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e7 e3       	ldi	r30, 0x37	; 55
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <DIO_enuSetPINDir+0xe4>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	2a 95       	dec	r18
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <DIO_enuSetPINDir+0xe0>
    1fc8:	80 95       	com	r24
    1fca:	84 23       	and	r24, r20
    1fcc:	8c 93       	st	X, r24
							DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1fce:	a7 e3       	ldi	r26, 0x37	; 55
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e7 e3       	ldi	r30, 0x37	; 55
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	48 2f       	mov	r20, r24
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	b9 01       	movw	r22, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <DIO_enuSetPINDir+0x10e>
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	8a 95       	dec	r24
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <DIO_enuSetPINDir+0x10a>
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	84 2b       	or	r24, r20
    1ff6:	8c 93       	st	X, r24
    1ff8:	51 c0       	rjmp	.+162    	; 0x209c <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTC:
							DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1ffa:	a4 e3       	ldi	r26, 0x34	; 52
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e4 e3       	ldi	r30, 0x34	; 52
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	48 2f       	mov	r20, r24
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <DIO_enuSetPINDir+0x136>
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	2a 95       	dec	r18
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <DIO_enuSetPINDir+0x132>
    201a:	80 95       	com	r24
    201c:	84 23       	and	r24, r20
    201e:	8c 93       	st	X, r24
							DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    2020:	a4 e3       	ldi	r26, 0x34	; 52
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e4 e3       	ldi	r30, 0x34	; 52
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	48 2f       	mov	r20, r24
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	b9 01       	movw	r22, r18
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <DIO_enuSetPINDir+0x160>
    203c:	66 0f       	add	r22, r22
    203e:	77 1f       	adc	r23, r23
    2040:	8a 95       	dec	r24
    2042:	e2 f7       	brpl	.-8      	; 0x203c <DIO_enuSetPINDir+0x15c>
    2044:	cb 01       	movw	r24, r22
    2046:	84 2b       	or	r24, r20
    2048:	8c 93       	st	X, r24
    204a:	28 c0       	rjmp	.+80     	; 0x209c <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTD:
							DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    204c:	a1 e3       	ldi	r26, 0x31	; 49
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e1 e3       	ldi	r30, 0x31	; 49
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <DIO_enuSetPINDir+0x188>
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	2a 95       	dec	r18
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <DIO_enuSetPINDir+0x184>
    206c:	80 95       	com	r24
    206e:	84 23       	and	r24, r20
    2070:	8c 93       	st	X, r24
							DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    2072:	a1 e3       	ldi	r26, 0x31	; 49
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e1 e3       	ldi	r30, 0x31	; 49
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	48 2f       	mov	r20, r24
    207e:	8c 81       	ldd	r24, Y+4	; 0x04
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	b9 01       	movw	r22, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <DIO_enuSetPINDir+0x1b2>
    208e:	66 0f       	add	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	8a 95       	dec	r24
    2094:	e2 f7       	brpl	.-8      	; 0x208e <DIO_enuSetPINDir+0x1ae>
    2096:	cb 01       	movw	r24, r22
    2098:	84 2b       	or	r24, r20
    209a:	8c 93       	st	X, r24
							break;
			}
			Local_enuErrorStates = ES_OK;
    209c:	19 82       	std	Y+1, r1	; 0x01
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a6:	26 96       	adiw	r28, 0x06	; 6
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <DIO_enuSetPINVAL+0x6>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <DIO_enuSetPINVAL+0x8>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <DIO_enuSetPINVAL+0xa>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	6b 83       	std	Y+3, r22	; 0x03
    20ca:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	84 30       	cpi	r24, 0x04	; 4
    20d4:	08 f0       	brcs	.+2      	; 0x20d8 <DIO_enuSetPINVAL+0x20>
    20d6:	d0 c0       	rjmp	.+416    	; 0x2278 <DIO_enuSetPINVAL+0x1c0>
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	88 30       	cpi	r24, 0x08	; 8
    20dc:	08 f0       	brcs	.+2      	; 0x20e0 <DIO_enuSetPINVAL+0x28>
    20de:	cc c0       	rjmp	.+408    	; 0x2278 <DIO_enuSetPINVAL+0x1c0>
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	82 30       	cpi	r24, 0x02	; 2
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <DIO_enuSetPINVAL+0x30>
    20e6:	c8 c0       	rjmp	.+400    	; 0x2278 <DIO_enuSetPINVAL+0x1c0>
		{

				switch(Copy_u8PortID)
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3e 83       	std	Y+6, r19	; 0x06
    20f0:	2d 83       	std	Y+5, r18	; 0x05
    20f2:	6d 81       	ldd	r22, Y+5	; 0x05
    20f4:	7e 81       	ldd	r23, Y+6	; 0x06
    20f6:	61 30       	cpi	r22, 0x01	; 1
    20f8:	71 05       	cpc	r23, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <DIO_enuSetPINVAL+0x46>
    20fc:	41 c0       	rjmp	.+130    	; 0x2180 <DIO_enuSetPINVAL+0xc8>
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	91 05       	cpc	r25, r1
    2106:	34 f4       	brge	.+12     	; 0x2114 <DIO_enuSetPINVAL+0x5c>
    2108:	2d 81       	ldd	r18, Y+5	; 0x05
    210a:	3e 81       	ldd	r19, Y+6	; 0x06
    210c:	21 15       	cp	r18, r1
    210e:	31 05       	cpc	r19, r1
    2110:	71 f0       	breq	.+28     	; 0x212e <DIO_enuSetPINVAL+0x76>
    2112:	b0 c0       	rjmp	.+352    	; 0x2274 <DIO_enuSetPINVAL+0x1bc>
    2114:	6d 81       	ldd	r22, Y+5	; 0x05
    2116:	7e 81       	ldd	r23, Y+6	; 0x06
    2118:	62 30       	cpi	r22, 0x02	; 2
    211a:	71 05       	cpc	r23, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <DIO_enuSetPINVAL+0x68>
    211e:	59 c0       	rjmp	.+178    	; 0x21d2 <DIO_enuSetPINVAL+0x11a>
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	83 30       	cpi	r24, 0x03	; 3
    2126:	91 05       	cpc	r25, r1
    2128:	09 f4       	brne	.+2      	; 0x212c <DIO_enuSetPINVAL+0x74>
    212a:	7c c0       	rjmp	.+248    	; 0x2224 <DIO_enuSetPINVAL+0x16c>
    212c:	a3 c0       	rjmp	.+326    	; 0x2274 <DIO_enuSetPINVAL+0x1bc>
				{
					case DIO_PORTA:
								PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    212e:	ab e3       	ldi	r26, 0x3B	; 59
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	eb e3       	ldi	r30, 0x3B	; 59
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 c0       	rjmp	.+4      	; 0x214a <DIO_enuSetPINVAL+0x92>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	2a 95       	dec	r18
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <DIO_enuSetPINVAL+0x8e>
    214e:	80 95       	com	r24
    2150:	84 23       	and	r24, r20
    2152:	8c 93       	st	X, r24
								PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    2154:	ab e3       	ldi	r26, 0x3B	; 59
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	eb e3       	ldi	r30, 0x3B	; 59
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	b9 01       	movw	r22, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <DIO_enuSetPINVAL+0xbc>
    2170:	66 0f       	add	r22, r22
    2172:	77 1f       	adc	r23, r23
    2174:	8a 95       	dec	r24
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <DIO_enuSetPINVAL+0xb8>
    2178:	cb 01       	movw	r24, r22
    217a:	84 2b       	or	r24, r20
    217c:	8c 93       	st	X, r24
    217e:	7a c0       	rjmp	.+244    	; 0x2274 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTB:
								PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    2180:	a8 e3       	ldi	r26, 0x38	; 56
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e8 e3       	ldi	r30, 0x38	; 56
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 c0       	rjmp	.+4      	; 0x219c <DIO_enuSetPINVAL+0xe4>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	2a 95       	dec	r18
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <DIO_enuSetPINVAL+0xe0>
    21a0:	80 95       	com	r24
    21a2:	84 23       	and	r24, r20
    21a4:	8c 93       	st	X, r24
								PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    21a6:	a8 e3       	ldi	r26, 0x38	; 56
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e8 e3       	ldi	r30, 0x38	; 56
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	48 2f       	mov	r20, r24
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	b9 01       	movw	r22, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <DIO_enuSetPINVAL+0x10e>
    21c2:	66 0f       	add	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	8a 95       	dec	r24
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <DIO_enuSetPINVAL+0x10a>
    21ca:	cb 01       	movw	r24, r22
    21cc:	84 2b       	or	r24, r20
    21ce:	8c 93       	st	X, r24
    21d0:	51 c0       	rjmp	.+162    	; 0x2274 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTC:
								PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    21d2:	a5 e3       	ldi	r26, 0x35	; 53
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e5 e3       	ldi	r30, 0x35	; 53
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	48 2f       	mov	r20, r24
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <DIO_enuSetPINVAL+0x136>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	2a 95       	dec	r18
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <DIO_enuSetPINVAL+0x132>
    21f2:	80 95       	com	r24
    21f4:	84 23       	and	r24, r20
    21f6:	8c 93       	st	X, r24
								PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    21f8:	a5 e3       	ldi	r26, 0x35	; 53
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e5 e3       	ldi	r30, 0x35	; 53
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8c 81       	ldd	r24, Y+4	; 0x04
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	b9 01       	movw	r22, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <DIO_enuSetPINVAL+0x160>
    2214:	66 0f       	add	r22, r22
    2216:	77 1f       	adc	r23, r23
    2218:	8a 95       	dec	r24
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <DIO_enuSetPINVAL+0x15c>
    221c:	cb 01       	movw	r24, r22
    221e:	84 2b       	or	r24, r20
    2220:	8c 93       	st	X, r24
    2222:	28 c0       	rjmp	.+80     	; 0x2274 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTD:
								PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    2224:	a2 e3       	ldi	r26, 0x32	; 50
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e2 e3       	ldi	r30, 0x32	; 50
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	48 2f       	mov	r20, r24
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_enuSetPINVAL+0x188>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	2a 95       	dec	r18
    2242:	e2 f7       	brpl	.-8      	; 0x223c <DIO_enuSetPINVAL+0x184>
    2244:	80 95       	com	r24
    2246:	84 23       	and	r24, r20
    2248:	8c 93       	st	X, r24
								PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    224a:	a2 e3       	ldi	r26, 0x32	; 50
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e2 e3       	ldi	r30, 0x32	; 50
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	48 2f       	mov	r20, r24
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	b9 01       	movw	r22, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_enuSetPINVAL+0x1b2>
    2266:	66 0f       	add	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	8a 95       	dec	r24
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <DIO_enuSetPINVAL+0x1ae>
    226e:	cb 01       	movw	r24, r22
    2270:	84 2b       	or	r24, r20
    2272:	8c 93       	st	X, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    2274:	19 82       	std	Y+1, r1	; 0x01
    2276:	02 c0       	rjmp	.+4      	; 0x227c <DIO_enuSetPINVAL+0x1c4>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorStates;
    227c:	89 81       	ldd	r24, Y+1	; 0x01
}
    227e:	26 96       	adiw	r28, 0x06	; 6
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <DIO_enuToggelPIN+0x6>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <DIO_enuToggelPIN+0x8>
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	8a 83       	std	Y+2, r24	; 0x02
    22a0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	84 30       	cpi	r24, 0x04	; 4
    22aa:	08 f0       	brcs	.+2      	; 0x22ae <DIO_enuToggelPIN+0x1e>
    22ac:	74 c0       	rjmp	.+232    	; 0x2396 <DIO_enuToggelPIN+0x106>
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	88 30       	cpi	r24, 0x08	; 8
    22b2:	08 f0       	brcs	.+2      	; 0x22b6 <DIO_enuToggelPIN+0x26>
    22b4:	70 c0       	rjmp	.+224    	; 0x2396 <DIO_enuToggelPIN+0x106>
			{

					switch(Copy_u8PortID)
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	3d 83       	std	Y+5, r19	; 0x05
    22be:	2c 83       	std	Y+4, r18	; 0x04
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	9d 81       	ldd	r25, Y+5	; 0x05
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	91 05       	cpc	r25, r1
    22c8:	49 f1       	breq	.+82     	; 0x231c <DIO_enuToggelPIN+0x8c>
    22ca:	2c 81       	ldd	r18, Y+4	; 0x04
    22cc:	3d 81       	ldd	r19, Y+5	; 0x05
    22ce:	22 30       	cpi	r18, 0x02	; 2
    22d0:	31 05       	cpc	r19, r1
    22d2:	2c f4       	brge	.+10     	; 0x22de <DIO_enuToggelPIN+0x4e>
    22d4:	8c 81       	ldd	r24, Y+4	; 0x04
    22d6:	9d 81       	ldd	r25, Y+5	; 0x05
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	61 f0       	breq	.+24     	; 0x22f4 <DIO_enuToggelPIN+0x64>
    22dc:	5a c0       	rjmp	.+180    	; 0x2392 <DIO_enuToggelPIN+0x102>
    22de:	2c 81       	ldd	r18, Y+4	; 0x04
    22e0:	3d 81       	ldd	r19, Y+5	; 0x05
    22e2:	22 30       	cpi	r18, 0x02	; 2
    22e4:	31 05       	cpc	r19, r1
    22e6:	71 f1       	breq	.+92     	; 0x2344 <DIO_enuToggelPIN+0xb4>
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	9d 81       	ldd	r25, Y+5	; 0x05
    22ec:	83 30       	cpi	r24, 0x03	; 3
    22ee:	91 05       	cpc	r25, r1
    22f0:	e9 f1       	breq	.+122    	; 0x236c <DIO_enuToggelPIN+0xdc>
    22f2:	4f c0       	rjmp	.+158    	; 0x2392 <DIO_enuToggelPIN+0x102>
					{
						case DIO_PORTA:
									PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
    22f4:	ab e3       	ldi	r26, 0x3B	; 59
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	eb e3       	ldi	r30, 0x3B	; 59
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	48 2f       	mov	r20, r24
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	02 2e       	mov	r0, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <DIO_enuToggelPIN+0x82>
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	0a 94       	dec	r0
    2314:	e2 f7       	brpl	.-8      	; 0x230e <DIO_enuToggelPIN+0x7e>
    2316:	84 27       	eor	r24, r20
    2318:	8c 93       	st	X, r24
    231a:	3b c0       	rjmp	.+118    	; 0x2392 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTB:
									PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
    231c:	a8 e3       	ldi	r26, 0x38	; 56
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e8 e3       	ldi	r30, 0x38	; 56
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	48 2f       	mov	r20, r24
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 2e       	mov	r0, r18
    2334:	02 c0       	rjmp	.+4      	; 0x233a <DIO_enuToggelPIN+0xaa>
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	0a 94       	dec	r0
    233c:	e2 f7       	brpl	.-8      	; 0x2336 <DIO_enuToggelPIN+0xa6>
    233e:	84 27       	eor	r24, r20
    2340:	8c 93       	st	X, r24
    2342:	27 c0       	rjmp	.+78     	; 0x2392 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTC:
									PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
    2344:	a5 e3       	ldi	r26, 0x35	; 53
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e5 e3       	ldi	r30, 0x35	; 53
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	48 2f       	mov	r20, r24
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 2e       	mov	r0, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_enuToggelPIN+0xd2>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <DIO_enuToggelPIN+0xce>
    2366:	84 27       	eor	r24, r20
    2368:	8c 93       	st	X, r24
    236a:	13 c0       	rjmp	.+38     	; 0x2392 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTD:
									PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
    236c:	a2 e3       	ldi	r26, 0x32	; 50
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e2 e3       	ldi	r30, 0x32	; 50
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	48 2f       	mov	r20, r24
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <DIO_enuToggelPIN+0xfa>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <DIO_enuToggelPIN+0xf6>
    238e:	84 27       	eor	r24, r20
    2390:	8c 93       	st	X, r24
									break;
					}
					Local_enuErrorStates = ES_OK;
    2392:	19 82       	std	Y+1, r1	; 0x01
    2394:	02 c0       	rjmp	.+4      	; 0x239a <DIO_enuToggelPIN+0x10a>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
    2396:	83 e0       	ldi	r24, 0x03	; 3
    2398:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorStates;
    239a:	89 81       	ldd	r24, Y+1	; 0x01
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	27 97       	sbiw	r28, 0x07	; 7
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	8a 83       	std	Y+2, r24	; 0x02
    23c2:	6b 83       	std	Y+3, r22	; 0x03
    23c4:	5d 83       	std	Y+5, r21	; 0x05
    23c6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    23cc:	8c 81       	ldd	r24, Y+4	; 0x04
    23ce:	9d 81       	ldd	r25, Y+5	; 0x05
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <DIO_enuGetPINVAL+0x2a>
    23d4:	7d c0       	rjmp	.+250    	; 0x24d0 <DIO_enuGetPINVAL+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	84 30       	cpi	r24, 0x04	; 4
    23da:	08 f0       	brcs	.+2      	; 0x23de <DIO_enuGetPINVAL+0x32>
    23dc:	76 c0       	rjmp	.+236    	; 0x24ca <DIO_enuGetPINVAL+0x11e>
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	88 30       	cpi	r24, 0x08	; 8
    23e2:	08 f0       	brcs	.+2      	; 0x23e6 <DIO_enuGetPINVAL+0x3a>
    23e4:	72 c0       	rjmp	.+228    	; 0x24ca <DIO_enuGetPINVAL+0x11e>
		{

				switch(Copy_u8PortID)
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	3f 83       	std	Y+7, r19	; 0x07
    23ee:	2e 83       	std	Y+6, r18	; 0x06
    23f0:	4e 81       	ldd	r20, Y+6	; 0x06
    23f2:	5f 81       	ldd	r21, Y+7	; 0x07
    23f4:	41 30       	cpi	r20, 0x01	; 1
    23f6:	51 05       	cpc	r21, r1
    23f8:	59 f1       	breq	.+86     	; 0x2450 <DIO_enuGetPINVAL+0xa4>
    23fa:	8e 81       	ldd	r24, Y+6	; 0x06
    23fc:	9f 81       	ldd	r25, Y+7	; 0x07
    23fe:	82 30       	cpi	r24, 0x02	; 2
    2400:	91 05       	cpc	r25, r1
    2402:	34 f4       	brge	.+12     	; 0x2410 <DIO_enuGetPINVAL+0x64>
    2404:	2e 81       	ldd	r18, Y+6	; 0x06
    2406:	3f 81       	ldd	r19, Y+7	; 0x07
    2408:	21 15       	cp	r18, r1
    240a:	31 05       	cpc	r19, r1
    240c:	69 f0       	breq	.+26     	; 0x2428 <DIO_enuGetPINVAL+0x7c>
    240e:	5b c0       	rjmp	.+182    	; 0x24c6 <DIO_enuGetPINVAL+0x11a>
    2410:	4e 81       	ldd	r20, Y+6	; 0x06
    2412:	5f 81       	ldd	r21, Y+7	; 0x07
    2414:	42 30       	cpi	r20, 0x02	; 2
    2416:	51 05       	cpc	r21, r1
    2418:	79 f1       	breq	.+94     	; 0x2478 <DIO_enuGetPINVAL+0xcc>
    241a:	8e 81       	ldd	r24, Y+6	; 0x06
    241c:	9f 81       	ldd	r25, Y+7	; 0x07
    241e:	83 30       	cpi	r24, 0x03	; 3
    2420:	91 05       	cpc	r25, r1
    2422:	09 f4       	brne	.+2      	; 0x2426 <DIO_enuGetPINVAL+0x7a>
    2424:	3d c0       	rjmp	.+122    	; 0x24a0 <DIO_enuGetPINVAL+0xf4>
    2426:	4f c0       	rjmp	.+158    	; 0x24c6 <DIO_enuGetPINVAL+0x11a>
				{
					case DIO_PORTA:
						*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
    2428:	e9 e3       	ldi	r30, 0x39	; 57
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	a9 01       	movw	r20, r18
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <DIO_enuGetPINVAL+0x94>
    243c:	55 95       	asr	r21
    243e:	47 95       	ror	r20
    2440:	8a 95       	dec	r24
    2442:	e2 f7       	brpl	.-8      	; 0x243c <DIO_enuGetPINVAL+0x90>
    2444:	ca 01       	movw	r24, r20
    2446:	81 70       	andi	r24, 0x01	; 1
    2448:	ec 81       	ldd	r30, Y+4	; 0x04
    244a:	fd 81       	ldd	r31, Y+5	; 0x05
    244c:	80 83       	st	Z, r24
    244e:	3b c0       	rjmp	.+118    	; 0x24c6 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTB:
						*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
    2450:	e6 e3       	ldi	r30, 0x36	; 54
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	a9 01       	movw	r20, r18
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <DIO_enuGetPINVAL+0xbc>
    2464:	55 95       	asr	r21
    2466:	47 95       	ror	r20
    2468:	8a 95       	dec	r24
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <DIO_enuGetPINVAL+0xb8>
    246c:	ca 01       	movw	r24, r20
    246e:	81 70       	andi	r24, 0x01	; 1
    2470:	ec 81       	ldd	r30, Y+4	; 0x04
    2472:	fd 81       	ldd	r31, Y+5	; 0x05
    2474:	80 83       	st	Z, r24
    2476:	27 c0       	rjmp	.+78     	; 0x24c6 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTC:
						*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
    2478:	e3 e3       	ldi	r30, 0x33	; 51
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a9 01       	movw	r20, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <DIO_enuGetPINVAL+0xe4>
    248c:	55 95       	asr	r21
    248e:	47 95       	ror	r20
    2490:	8a 95       	dec	r24
    2492:	e2 f7       	brpl	.-8      	; 0x248c <DIO_enuGetPINVAL+0xe0>
    2494:	ca 01       	movw	r24, r20
    2496:	81 70       	andi	r24, 0x01	; 1
    2498:	ec 81       	ldd	r30, Y+4	; 0x04
    249a:	fd 81       	ldd	r31, Y+5	; 0x05
    249c:	80 83       	st	Z, r24
    249e:	13 c0       	rjmp	.+38     	; 0x24c6 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTD:
						*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
    24a0:	e0 e3       	ldi	r30, 0x30	; 48
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a9 01       	movw	r20, r18
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <DIO_enuGetPINVAL+0x10c>
    24b4:	55 95       	asr	r21
    24b6:	47 95       	ror	r20
    24b8:	8a 95       	dec	r24
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <DIO_enuGetPINVAL+0x108>
    24bc:	ca 01       	movw	r24, r20
    24be:	81 70       	andi	r24, 0x01	; 1
    24c0:	ec 81       	ldd	r30, Y+4	; 0x04
    24c2:	fd 81       	ldd	r31, Y+5	; 0x05
    24c4:	80 83       	st	Z, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    24c6:	19 82       	std	Y+1, r1	; 0x01
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <DIO_enuGetPINVAL+0x128>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <DIO_enuGetPINVAL+0x128>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d6:	27 96       	adiw	r28, 0x07	; 7
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <main>:
{
	DIO_enuToggelPIN(DIO_u8PORTA,DIO_u8PIN2);
}*/

int main()
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62




	//DIO_enuSetPINDir(DIO_u8PORTB,DIO_u8PIN3,DIO_OUTPUT);
	DIO_enuSetPINDir(DIO_u8PORTD,DIO_u8PIN7,DIO_OUTPUT);
    24f0:	83 e0       	ldi	r24, 0x03	; 3
    24f2:	67 e0       	ldi	r22, 0x07	; 7
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DIO_enuSetPINDir>
	TIMER0_enuInit();
    24fa:	0e 94 e7 06 	call	0xdce	; 0xdce <TIMER0_enuInit>
	TIMER2_enuInit();
    24fe:	0e 94 34 0a 	call	0x1468	; 0x1468 <TIMER2_enuInit>
   // TIMER0_enuGenerateFastPWM(4.5);
	//TIMER0_enuEnableInterrupt();
	TIMER2_enuGeneratePWM(1.5);
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	80 ec       	ldi	r24, 0xC0	; 192
    2508:	9f e3       	ldi	r25, 0x3F	; 63
    250a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <TIMER2_enuGeneratePWM>
	GIE_enuEnable();
    250e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GIE_enuEnable>
    2512:	ff cf       	rjmp	.-2      	; 0x2512 <main+0x2a>

00002514 <__prologue_saves__>:
    2514:	2f 92       	push	r2
    2516:	3f 92       	push	r3
    2518:	4f 92       	push	r4
    251a:	5f 92       	push	r5
    251c:	6f 92       	push	r6
    251e:	7f 92       	push	r7
    2520:	8f 92       	push	r8
    2522:	9f 92       	push	r9
    2524:	af 92       	push	r10
    2526:	bf 92       	push	r11
    2528:	cf 92       	push	r12
    252a:	df 92       	push	r13
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	ca 1b       	sub	r28, r26
    253e:	db 0b       	sbc	r29, r27
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	09 94       	ijmp

0000254c <__epilogue_restores__>:
    254c:	2a 88       	ldd	r2, Y+18	; 0x12
    254e:	39 88       	ldd	r3, Y+17	; 0x11
    2550:	48 88       	ldd	r4, Y+16	; 0x10
    2552:	5f 84       	ldd	r5, Y+15	; 0x0f
    2554:	6e 84       	ldd	r6, Y+14	; 0x0e
    2556:	7d 84       	ldd	r7, Y+13	; 0x0d
    2558:	8c 84       	ldd	r8, Y+12	; 0x0c
    255a:	9b 84       	ldd	r9, Y+11	; 0x0b
    255c:	aa 84       	ldd	r10, Y+10	; 0x0a
    255e:	b9 84       	ldd	r11, Y+9	; 0x09
    2560:	c8 84       	ldd	r12, Y+8	; 0x08
    2562:	df 80       	ldd	r13, Y+7	; 0x07
    2564:	ee 80       	ldd	r14, Y+6	; 0x06
    2566:	fd 80       	ldd	r15, Y+5	; 0x05
    2568:	0c 81       	ldd	r16, Y+4	; 0x04
    256a:	1b 81       	ldd	r17, Y+3	; 0x03
    256c:	aa 81       	ldd	r26, Y+2	; 0x02
    256e:	b9 81       	ldd	r27, Y+1	; 0x01
    2570:	ce 0f       	add	r28, r30
    2572:	d1 1d       	adc	r29, r1
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	ed 01       	movw	r28, r26
    2580:	08 95       	ret

00002582 <_exit>:
    2582:	f8 94       	cli

00002584 <__stop_program>:
    2584:	ff cf       	rjmp	.-2      	; 0x2584 <__stop_program>
