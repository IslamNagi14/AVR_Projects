
Switch_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000f5c  00000fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000018cc  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ef1  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 38 07 	call	0xe70	; 0xe70 <main>
  7a:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	ea e3       	ldi	r30, 0x3A	; 58
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	80 83       	st	Z, r24
  98:	e7 e3       	ldi	r30, 0x37	; 55
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	86 eb       	ldi	r24, 0xB6	; 182
  9e:	80 83       	st	Z, r24
  a0:	e4 e3       	ldi	r30, 0x34	; 52
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	86 eb       	ldi	r24, 0xB6	; 182
  a6:	80 83       	st	Z, r24
  a8:	e1 e3       	ldi	r30, 0x31	; 49
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	86 eb       	ldi	r24, 0xB6	; 182
  ae:	80 83       	st	Z, r24
  b0:	eb e3       	ldi	r30, 0x3B	; 59
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
  b6:	e8 e3       	ldi	r30, 0x38	; 56
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	8a e3       	ldi	r24, 0x3A	; 58
  bc:	80 83       	st	Z, r24
  be:	e5 e3       	ldi	r30, 0x35	; 53
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	8a e3       	ldi	r24, 0x3A	; 58
  c4:	80 83       	st	Z, r24
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	8a e3       	ldi	r24, 0x3A	; 58
  cc:	80 83       	st	Z, r24
  ce:	19 82       	std	Y+1, r1	; 0x01
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	0f 90       	pop	r0
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSetPortDir+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <DIO_enuSetPortDir+0x8>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	a0 f5       	brcc	.+104    	; 0x15e <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	3d 83       	std	Y+5, r19	; 0x05
  fe:	2c 83       	std	Y+4, r18	; 0x04
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	9d 81       	ldd	r25, Y+5	; 0x05
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	d1 f0       	breq	.+52     	; 0x13e <DIO_enuSetPortDir+0x64>
 10a:	2c 81       	ldd	r18, Y+4	; 0x04
 10c:	3d 81       	ldd	r19, Y+5	; 0x05
 10e:	22 30       	cpi	r18, 0x02	; 2
 110:	31 05       	cpc	r19, r1
 112:	2c f4       	brge	.+10     	; 0x11e <DIO_enuSetPortDir+0x44>
 114:	8c 81       	ldd	r24, Y+4	; 0x04
 116:	9d 81       	ldd	r25, Y+5	; 0x05
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	61 f0       	breq	.+24     	; 0x134 <DIO_enuSetPortDir+0x5a>
 11c:	1e c0       	rjmp	.+60     	; 0x15a <DIO_enuSetPortDir+0x80>
 11e:	2c 81       	ldd	r18, Y+4	; 0x04
 120:	3d 81       	ldd	r19, Y+5	; 0x05
 122:	22 30       	cpi	r18, 0x02	; 2
 124:	31 05       	cpc	r19, r1
 126:	81 f0       	breq	.+32     	; 0x148 <DIO_enuSetPortDir+0x6e>
 128:	8c 81       	ldd	r24, Y+4	; 0x04
 12a:	9d 81       	ldd	r25, Y+5	; 0x05
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	91 05       	cpc	r25, r1
 130:	81 f0       	breq	.+32     	; 0x152 <DIO_enuSetPortDir+0x78>
 132:	13 c0       	rjmp	.+38     	; 0x15a <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
					DDRA = Copy_u8PortValue;break;
 134:	ea e3       	ldi	r30, 0x3A	; 58
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	80 83       	st	Z, r24
 13c:	0e c0       	rjmp	.+28     	; 0x15a <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
					DDRB = Copy_u8PortValue;break;
 13e:	e7 e3       	ldi	r30, 0x37	; 55
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	80 83       	st	Z, r24
 146:	09 c0       	rjmp	.+18     	; 0x15a <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
					DDRC= Copy_u8PortValue;break;
 148:	e4 e3       	ldi	r30, 0x34	; 52
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	80 83       	st	Z, r24
 150:	04 c0       	rjmp	.+8      	; 0x15a <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
					DDRD = Copy_u8PortValue;break;
 152:	e1 e3       	ldi	r30, 0x31	; 49
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
 15a:	19 82       	std	Y+1, r1	; 0x01
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
 162:	89 81       	ldd	r24, Y+1	; 0x01
}
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	08 95       	ret

00000174 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	00 d0       	rcall	.+0      	; 0x17a <DIO_enuSetPortVAL+0x6>
 17a:	00 d0       	rcall	.+0      	; 0x17c <DIO_enuSetPortVAL+0x8>
 17c:	0f 92       	push	r0
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	8a 83       	std	Y+2, r24	; 0x02
 184:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	a0 f5       	brcc	.+104    	; 0x1f8 <DIO_enuSetPortVAL+0x84>
		{
			switch(Copy_u8PortID)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	3d 83       	std	Y+5, r19	; 0x05
 198:	2c 83       	std	Y+4, r18	; 0x04
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	9d 81       	ldd	r25, Y+5	; 0x05
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	91 05       	cpc	r25, r1
 1a2:	d1 f0       	breq	.+52     	; 0x1d8 <DIO_enuSetPortVAL+0x64>
 1a4:	2c 81       	ldd	r18, Y+4	; 0x04
 1a6:	3d 81       	ldd	r19, Y+5	; 0x05
 1a8:	22 30       	cpi	r18, 0x02	; 2
 1aa:	31 05       	cpc	r19, r1
 1ac:	2c f4       	brge	.+10     	; 0x1b8 <DIO_enuSetPortVAL+0x44>
 1ae:	8c 81       	ldd	r24, Y+4	; 0x04
 1b0:	9d 81       	ldd	r25, Y+5	; 0x05
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	61 f0       	breq	.+24     	; 0x1ce <DIO_enuSetPortVAL+0x5a>
 1b6:	1e c0       	rjmp	.+60     	; 0x1f4 <DIO_enuSetPortVAL+0x80>
 1b8:	2c 81       	ldd	r18, Y+4	; 0x04
 1ba:	3d 81       	ldd	r19, Y+5	; 0x05
 1bc:	22 30       	cpi	r18, 0x02	; 2
 1be:	31 05       	cpc	r19, r1
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <DIO_enuSetPortVAL+0x6e>
 1c2:	8c 81       	ldd	r24, Y+4	; 0x04
 1c4:	9d 81       	ldd	r25, Y+5	; 0x05
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	91 05       	cpc	r25, r1
 1ca:	81 f0       	breq	.+32     	; 0x1ec <DIO_enuSetPortVAL+0x78>
 1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <DIO_enuSetPortVAL+0x80>
			{
			case DIO_PORTA:
						PORTA = Copy_u8PortValue;break;
 1ce:	eb e3       	ldi	r30, 0x3B	; 59
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	80 83       	st	Z, r24
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTB:
						PORTB = Copy_u8PortValue;break;
 1d8:	e8 e3       	ldi	r30, 0x38	; 56
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	80 83       	st	Z, r24
 1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTC:
						PORTC= Copy_u8PortValue;break;
 1e2:	e5 e3       	ldi	r30, 0x35	; 53
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	80 83       	st	Z, r24
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTD:
						PORTD = Copy_u8PortValue;break;
 1ec:	e2 e3       	ldi	r30, 0x32	; 50
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_enuSetPortVAL+0x88>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	cf 91       	pop	r28
 20a:	df 91       	pop	r29
 20c:	08 95       	ret

0000020e <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	00 d0       	rcall	.+0      	; 0x214 <DIO_enuToggelPort+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <DIO_enuToggelPort+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	08 f0       	brcs	.+2      	; 0x228 <DIO_enuToggelPort+0x1a>
 226:	40 c0       	rjmp	.+128    	; 0x2a8 <DIO_enuToggelPort+0x9a>
			{
				switch(Copy_u8PortID)
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	3c 83       	std	Y+4, r19	; 0x04
 230:	2b 83       	std	Y+3, r18	; 0x03
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	9c 81       	ldd	r25, Y+4	; 0x04
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 05       	cpc	r25, r1
 23a:	e9 f0       	breq	.+58     	; 0x276 <DIO_enuToggelPort+0x68>
 23c:	2b 81       	ldd	r18, Y+3	; 0x03
 23e:	3c 81       	ldd	r19, Y+4	; 0x04
 240:	22 30       	cpi	r18, 0x02	; 2
 242:	31 05       	cpc	r19, r1
 244:	2c f4       	brge	.+10     	; 0x250 <DIO_enuToggelPort+0x42>
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	9c 81       	ldd	r25, Y+4	; 0x04
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	61 f0       	breq	.+24     	; 0x266 <DIO_enuToggelPort+0x58>
 24e:	2a c0       	rjmp	.+84     	; 0x2a4 <DIO_enuToggelPort+0x96>
 250:	2b 81       	ldd	r18, Y+3	; 0x03
 252:	3c 81       	ldd	r19, Y+4	; 0x04
 254:	22 30       	cpi	r18, 0x02	; 2
 256:	31 05       	cpc	r19, r1
 258:	b1 f0       	breq	.+44     	; 0x286 <DIO_enuToggelPort+0x78>
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	9c 81       	ldd	r25, Y+4	; 0x04
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	91 05       	cpc	r25, r1
 262:	c9 f0       	breq	.+50     	; 0x296 <DIO_enuToggelPort+0x88>
 264:	1f c0       	rjmp	.+62     	; 0x2a4 <DIO_enuToggelPort+0x96>
				{
				case DIO_PORTA:
							PORTA = ~PORTA ;break;
 266:	ab e3       	ldi	r26, 0x3B	; 59
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	eb e3       	ldi	r30, 0x3B	; 59
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 95       	com	r24
 272:	8c 93       	st	X, r24
 274:	17 c0       	rjmp	.+46     	; 0x2a4 <DIO_enuToggelPort+0x96>
				case DIO_PORTB:
							PORTB = ~PORTB ;break;
 276:	a8 e3       	ldi	r26, 0x38	; 56
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	e8 e3       	ldi	r30, 0x38	; 56
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 95       	com	r24
 282:	8c 93       	st	X, r24
 284:	0f c0       	rjmp	.+30     	; 0x2a4 <DIO_enuToggelPort+0x96>
				case DIO_PORTC:
							PORTC = ~PORTC ;break;
 286:	a5 e3       	ldi	r26, 0x35	; 53
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e5 e3       	ldi	r30, 0x35	; 53
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 95       	com	r24
 292:	8c 93       	st	X, r24
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <DIO_enuToggelPort+0x96>
				case DIO_PORTD:
							PORTD = ~PORTD ;break;
 296:	a2 e3       	ldi	r26, 0x32	; 50
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e2 e3       	ldi	r30, 0x32	; 50
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	80 95       	com	r24
 2a2:	8c 93       	st	X, r24
				}
				Local_enuErrorStates = ES_OK;
 2a4:	19 82       	std	Y+1, r1	; 0x01
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_enuToggelPort+0x9e>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	89 83       	std	Y+1, r24	; 0x01
			}
	return Local_enuErrorStates;
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	cf 91       	pop	r28
 2b8:	df 91       	pop	r29
 2ba:	08 95       	ret

000002bc <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
 2bc:	df 93       	push	r29
 2be:	cf 93       	push	r28
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <DIO_enuGetPortVAL+0x6>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_enuGetPortVAL+0x8>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <DIO_enuGetPortVAL+0xa>
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	8a 83       	std	Y+2, r24	; 0x02
 2cc:	7c 83       	std	Y+4, r23	; 0x04
 2ce:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
 2d4:	8b 81       	ldd	r24, Y+3	; 0x03
 2d6:	9c 81       	ldd	r25, Y+4	; 0x04
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_enuGetPortVAL+0x22>
 2dc:	42 c0       	rjmp	.+132    	; 0x362 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	e0 f5       	brcc	.+120    	; 0x35c <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	28 2f       	mov	r18, r24
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	3e 83       	std	Y+6, r19	; 0x06
 2ec:	2d 83       	std	Y+5, r18	; 0x05
 2ee:	8d 81       	ldd	r24, Y+5	; 0x05
 2f0:	9e 81       	ldd	r25, Y+6	; 0x06
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	91 05       	cpc	r25, r1
 2f6:	e1 f0       	breq	.+56     	; 0x330 <DIO_enuGetPortVAL+0x74>
 2f8:	2d 81       	ldd	r18, Y+5	; 0x05
 2fa:	3e 81       	ldd	r19, Y+6	; 0x06
 2fc:	22 30       	cpi	r18, 0x02	; 2
 2fe:	31 05       	cpc	r19, r1
 300:	2c f4       	brge	.+10     	; 0x30c <DIO_enuGetPortVAL+0x50>
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	61 f0       	breq	.+24     	; 0x322 <DIO_enuGetPortVAL+0x66>
 30a:	26 c0       	rjmp	.+76     	; 0x358 <DIO_enuGetPortVAL+0x9c>
 30c:	2d 81       	ldd	r18, Y+5	; 0x05
 30e:	3e 81       	ldd	r19, Y+6	; 0x06
 310:	22 30       	cpi	r18, 0x02	; 2
 312:	31 05       	cpc	r19, r1
 314:	a1 f0       	breq	.+40     	; 0x33e <DIO_enuGetPortVAL+0x82>
 316:	8d 81       	ldd	r24, Y+5	; 0x05
 318:	9e 81       	ldd	r25, Y+6	; 0x06
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	91 05       	cpc	r25, r1
 31e:	b1 f0       	breq	.+44     	; 0x34c <DIO_enuGetPortVAL+0x90>
 320:	1b c0       	rjmp	.+54     	; 0x358 <DIO_enuGetPortVAL+0x9c>
			{
				case DIO_PORTA:
					*Copy_Pu8Value = PINA ;break;
 322:	e9 e3       	ldi	r30, 0x39	; 57
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	eb 81       	ldd	r30, Y+3	; 0x03
 32a:	fc 81       	ldd	r31, Y+4	; 0x04
 32c:	80 83       	st	Z, r24
 32e:	14 c0       	rjmp	.+40     	; 0x358 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTB:
					*Copy_Pu8Value = PINB ;break;
 330:	e6 e3       	ldi	r30, 0x36	; 54
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	eb 81       	ldd	r30, Y+3	; 0x03
 338:	fc 81       	ldd	r31, Y+4	; 0x04
 33a:	80 83       	st	Z, r24
 33c:	0d c0       	rjmp	.+26     	; 0x358 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTC:
					*Copy_Pu8Value = PINC ;break;
 33e:	e3 e3       	ldi	r30, 0x33	; 51
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	eb 81       	ldd	r30, Y+3	; 0x03
 346:	fc 81       	ldd	r31, Y+4	; 0x04
 348:	80 83       	st	Z, r24
 34a:	06 c0       	rjmp	.+12     	; 0x358 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTD:
					*Copy_Pu8Value = PIND ;break;
 34c:	e0 e3       	ldi	r30, 0x30	; 48
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	eb 81       	ldd	r30, Y+3	; 0x03
 354:	fc 81       	ldd	r31, Y+4	; 0x04
 356:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
 358:	19 82       	std	Y+1, r1	; 0x01
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		 Local_enuErrorStates = ES_NULLPOINTER;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
 366:	89 81       	ldd	r24, Y+1	; 0x01
}
 368:	26 96       	adiw	r28, 0x06	; 6
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	08 95       	ret

0000037a <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
 37a:	df 93       	push	r29
 37c:	cf 93       	push	r28
 37e:	00 d0       	rcall	.+0      	; 0x380 <DIO_enuSetPINDir+0x6>
 380:	00 d0       	rcall	.+0      	; 0x382 <DIO_enuSetPINDir+0x8>
 382:	00 d0       	rcall	.+0      	; 0x384 <DIO_enuSetPINDir+0xa>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	8a 83       	std	Y+2, r24	; 0x02
 38a:	6b 83       	std	Y+3, r22	; 0x03
 38c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	84 30       	cpi	r24, 0x04	; 4
 396:	08 f0       	brcs	.+2      	; 0x39a <DIO_enuSetPINDir+0x20>
 398:	d0 c0       	rjmp	.+416    	; 0x53a <DIO_enuSetPINDir+0x1c0>
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	88 30       	cpi	r24, 0x08	; 8
 39e:	08 f0       	brcs	.+2      	; 0x3a2 <DIO_enuSetPINDir+0x28>
 3a0:	cc c0       	rjmp	.+408    	; 0x53a <DIO_enuSetPINDir+0x1c0>
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <DIO_enuSetPINDir+0x30>
 3a8:	c8 c0       	rjmp	.+400    	; 0x53a <DIO_enuSetPINDir+0x1c0>
	{

			switch(Copy_u8PortID)
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	3e 83       	std	Y+6, r19	; 0x06
 3b2:	2d 83       	std	Y+5, r18	; 0x05
 3b4:	6d 81       	ldd	r22, Y+5	; 0x05
 3b6:	7e 81       	ldd	r23, Y+6	; 0x06
 3b8:	61 30       	cpi	r22, 0x01	; 1
 3ba:	71 05       	cpc	r23, r1
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <DIO_enuSetPINDir+0x46>
 3be:	41 c0       	rjmp	.+130    	; 0x442 <DIO_enuSetPINDir+0xc8>
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	9e 81       	ldd	r25, Y+6	; 0x06
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	91 05       	cpc	r25, r1
 3c8:	34 f4       	brge	.+12     	; 0x3d6 <DIO_enuSetPINDir+0x5c>
 3ca:	2d 81       	ldd	r18, Y+5	; 0x05
 3cc:	3e 81       	ldd	r19, Y+6	; 0x06
 3ce:	21 15       	cp	r18, r1
 3d0:	31 05       	cpc	r19, r1
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <DIO_enuSetPINDir+0x76>
 3d4:	b0 c0       	rjmp	.+352    	; 0x536 <DIO_enuSetPINDir+0x1bc>
 3d6:	6d 81       	ldd	r22, Y+5	; 0x05
 3d8:	7e 81       	ldd	r23, Y+6	; 0x06
 3da:	62 30       	cpi	r22, 0x02	; 2
 3dc:	71 05       	cpc	r23, r1
 3de:	09 f4       	brne	.+2      	; 0x3e2 <DIO_enuSetPINDir+0x68>
 3e0:	59 c0       	rjmp	.+178    	; 0x494 <DIO_enuSetPINDir+0x11a>
 3e2:	8d 81       	ldd	r24, Y+5	; 0x05
 3e4:	9e 81       	ldd	r25, Y+6	; 0x06
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	91 05       	cpc	r25, r1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_enuSetPINDir+0x74>
 3ec:	7c c0       	rjmp	.+248    	; 0x4e6 <DIO_enuSetPINDir+0x16c>
 3ee:	a3 c0       	rjmp	.+326    	; 0x536 <DIO_enuSetPINDir+0x1bc>
			{
				case DIO_PORTA:
							DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
 3f0:	aa e3       	ldi	r26, 0x3A	; 58
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	ea e3       	ldi	r30, 0x3A	; 58
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_enuSetPINDir+0x92>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	2a 95       	dec	r18
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_enuSetPINDir+0x8e>
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8c 93       	st	X, r24
							DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
 416:	aa e3       	ldi	r26, 0x3A	; 58
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	ea e3       	ldi	r30, 0x3A	; 58
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_enuSetPINDir+0xbc>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_enuSetPINDir+0xb8>
 43a:	cb 01       	movw	r24, r22
 43c:	84 2b       	or	r24, r20
 43e:	8c 93       	st	X, r24
 440:	7a c0       	rjmp	.+244    	; 0x536 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTB:
							DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
 442:	a7 e3       	ldi	r26, 0x37	; 55
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e7 e3       	ldi	r30, 0x37	; 55
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_enuSetPINDir+0xe4>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	2a 95       	dec	r18
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_enuSetPINDir+0xe0>
 462:	80 95       	com	r24
 464:	84 23       	and	r24, r20
 466:	8c 93       	st	X, r24
							DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
 468:	a7 e3       	ldi	r26, 0x37	; 55
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e7 e3       	ldi	r30, 0x37	; 55
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	48 2f       	mov	r20, r24
 474:	8c 81       	ldd	r24, Y+4	; 0x04
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	b9 01       	movw	r22, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_enuSetPINDir+0x10e>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_enuSetPINDir+0x10a>
 48c:	cb 01       	movw	r24, r22
 48e:	84 2b       	or	r24, r20
 490:	8c 93       	st	X, r24
 492:	51 c0       	rjmp	.+162    	; 0x536 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTC:
							DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
 494:	a4 e3       	ldi	r26, 0x34	; 52
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e4 e3       	ldi	r30, 0x34	; 52
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_enuSetPINDir+0x136>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	2a 95       	dec	r18
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_enuSetPINDir+0x132>
 4b4:	80 95       	com	r24
 4b6:	84 23       	and	r24, r20
 4b8:	8c 93       	st	X, r24
							DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
 4ba:	a4 e3       	ldi	r26, 0x34	; 52
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e4 e3       	ldi	r30, 0x34	; 52
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8c 81       	ldd	r24, Y+4	; 0x04
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_enuSetPINDir+0x160>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_enuSetPINDir+0x15c>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	28 c0       	rjmp	.+80     	; 0x536 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTD:
							DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
 4e6:	a1 e3       	ldi	r26, 0x31	; 49
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e1 e3       	ldi	r30, 0x31	; 49
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	48 2f       	mov	r20, r24
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_enuSetPINDir+0x188>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	2a 95       	dec	r18
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_enuSetPINDir+0x184>
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8c 93       	st	X, r24
							DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
 50c:	a1 e3       	ldi	r26, 0x31	; 49
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	e1 e3       	ldi	r30, 0x31	; 49
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	48 2f       	mov	r20, r24
 518:	8c 81       	ldd	r24, Y+4	; 0x04
 51a:	28 2f       	mov	r18, r24
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	88 2f       	mov	r24, r24
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	b9 01       	movw	r22, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_enuSetPINDir+0x1b2>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	8a 95       	dec	r24
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_enuSetPINDir+0x1ae>
 530:	cb 01       	movw	r24, r22
 532:	84 2b       	or	r24, r20
 534:	8c 93       	st	X, r24
							break;
			}
			Local_enuErrorStates = ES_OK;
 536:	19 82       	std	Y+1, r1	; 0x01
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
}
 540:	26 96       	adiw	r28, 0x06	; 6
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	cf 91       	pop	r28
 54e:	df 91       	pop	r29
 550:	08 95       	ret

00000552 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
 552:	df 93       	push	r29
 554:	cf 93       	push	r28
 556:	00 d0       	rcall	.+0      	; 0x558 <DIO_enuSetPINVAL+0x6>
 558:	00 d0       	rcall	.+0      	; 0x55a <DIO_enuSetPINVAL+0x8>
 55a:	00 d0       	rcall	.+0      	; 0x55c <DIO_enuSetPINVAL+0xa>
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	8a 83       	std	Y+2, r24	; 0x02
 562:	6b 83       	std	Y+3, r22	; 0x03
 564:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	84 30       	cpi	r24, 0x04	; 4
 56e:	08 f0       	brcs	.+2      	; 0x572 <DIO_enuSetPINVAL+0x20>
 570:	d0 c0       	rjmp	.+416    	; 0x712 <DIO_enuSetPINVAL+0x1c0>
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	88 30       	cpi	r24, 0x08	; 8
 576:	08 f0       	brcs	.+2      	; 0x57a <DIO_enuSetPINVAL+0x28>
 578:	cc c0       	rjmp	.+408    	; 0x712 <DIO_enuSetPINVAL+0x1c0>
 57a:	8c 81       	ldd	r24, Y+4	; 0x04
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_enuSetPINVAL+0x30>
 580:	c8 c0       	rjmp	.+400    	; 0x712 <DIO_enuSetPINVAL+0x1c0>
		{

				switch(Copy_u8PortID)
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	3e 83       	std	Y+6, r19	; 0x06
 58a:	2d 83       	std	Y+5, r18	; 0x05
 58c:	6d 81       	ldd	r22, Y+5	; 0x05
 58e:	7e 81       	ldd	r23, Y+6	; 0x06
 590:	61 30       	cpi	r22, 0x01	; 1
 592:	71 05       	cpc	r23, r1
 594:	09 f4       	brne	.+2      	; 0x598 <DIO_enuSetPINVAL+0x46>
 596:	41 c0       	rjmp	.+130    	; 0x61a <DIO_enuSetPINVAL+0xc8>
 598:	8d 81       	ldd	r24, Y+5	; 0x05
 59a:	9e 81       	ldd	r25, Y+6	; 0x06
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	91 05       	cpc	r25, r1
 5a0:	34 f4       	brge	.+12     	; 0x5ae <DIO_enuSetPINVAL+0x5c>
 5a2:	2d 81       	ldd	r18, Y+5	; 0x05
 5a4:	3e 81       	ldd	r19, Y+6	; 0x06
 5a6:	21 15       	cp	r18, r1
 5a8:	31 05       	cpc	r19, r1
 5aa:	71 f0       	breq	.+28     	; 0x5c8 <DIO_enuSetPINVAL+0x76>
 5ac:	b0 c0       	rjmp	.+352    	; 0x70e <DIO_enuSetPINVAL+0x1bc>
 5ae:	6d 81       	ldd	r22, Y+5	; 0x05
 5b0:	7e 81       	ldd	r23, Y+6	; 0x06
 5b2:	62 30       	cpi	r22, 0x02	; 2
 5b4:	71 05       	cpc	r23, r1
 5b6:	09 f4       	brne	.+2      	; 0x5ba <DIO_enuSetPINVAL+0x68>
 5b8:	59 c0       	rjmp	.+178    	; 0x66c <DIO_enuSetPINVAL+0x11a>
 5ba:	8d 81       	ldd	r24, Y+5	; 0x05
 5bc:	9e 81       	ldd	r25, Y+6	; 0x06
 5be:	83 30       	cpi	r24, 0x03	; 3
 5c0:	91 05       	cpc	r25, r1
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <DIO_enuSetPINVAL+0x74>
 5c4:	7c c0       	rjmp	.+248    	; 0x6be <DIO_enuSetPINVAL+0x16c>
 5c6:	a3 c0       	rjmp	.+326    	; 0x70e <DIO_enuSetPINVAL+0x1bc>
				{
					case DIO_PORTA:
								PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
 5c8:	ab e3       	ldi	r26, 0x3B	; 59
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	eb e3       	ldi	r30, 0x3B	; 59
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	48 2f       	mov	r20, r24
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_enuSetPINVAL+0x92>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	2a 95       	dec	r18
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_enuSetPINVAL+0x8e>
 5e8:	80 95       	com	r24
 5ea:	84 23       	and	r24, r20
 5ec:	8c 93       	st	X, r24
								PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
 5ee:	ab e3       	ldi	r26, 0x3B	; 59
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	eb e3       	ldi	r30, 0x3B	; 59
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	b9 01       	movw	r22, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_enuSetPINVAL+0xbc>
 60a:	66 0f       	add	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_enuSetPINVAL+0xb8>
 612:	cb 01       	movw	r24, r22
 614:	84 2b       	or	r24, r20
 616:	8c 93       	st	X, r24
 618:	7a c0       	rjmp	.+244    	; 0x70e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTB:
								PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
 61a:	a8 e3       	ldi	r26, 0x38	; 56
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	e8 e3       	ldi	r30, 0x38	; 56
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	48 2f       	mov	r20, r24
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_enuSetPINVAL+0xe4>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	2a 95       	dec	r18
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_enuSetPINVAL+0xe0>
 63a:	80 95       	com	r24
 63c:	84 23       	and	r24, r20
 63e:	8c 93       	st	X, r24
								PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
 640:	a8 e3       	ldi	r26, 0x38	; 56
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	e8 e3       	ldi	r30, 0x38	; 56
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	48 2f       	mov	r20, r24
 64c:	8c 81       	ldd	r24, Y+4	; 0x04
 64e:	28 2f       	mov	r18, r24
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	b9 01       	movw	r22, r18
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_enuSetPINVAL+0x10e>
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	8a 95       	dec	r24
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_enuSetPINVAL+0x10a>
 664:	cb 01       	movw	r24, r22
 666:	84 2b       	or	r24, r20
 668:	8c 93       	st	X, r24
 66a:	51 c0       	rjmp	.+162    	; 0x70e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTC:
								PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
 66c:	a5 e3       	ldi	r26, 0x35	; 53
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	e5 e3       	ldi	r30, 0x35	; 53
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	48 2f       	mov	r20, r24
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	28 2f       	mov	r18, r24
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_enuSetPINVAL+0x136>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	2a 95       	dec	r18
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_enuSetPINVAL+0x132>
 68c:	80 95       	com	r24
 68e:	84 23       	and	r24, r20
 690:	8c 93       	st	X, r24
								PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
 692:	a5 e3       	ldi	r26, 0x35	; 53
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	e5 e3       	ldi	r30, 0x35	; 53
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	48 2f       	mov	r20, r24
 69e:	8c 81       	ldd	r24, Y+4	; 0x04
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	88 2f       	mov	r24, r24
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	b9 01       	movw	r22, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_enuSetPINVAL+0x160>
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	8a 95       	dec	r24
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_enuSetPINVAL+0x15c>
 6b6:	cb 01       	movw	r24, r22
 6b8:	84 2b       	or	r24, r20
 6ba:	8c 93       	st	X, r24
 6bc:	28 c0       	rjmp	.+80     	; 0x70e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTD:
								PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
 6be:	a2 e3       	ldi	r26, 0x32	; 50
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	e2 e3       	ldi	r30, 0x32	; 50
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	48 2f       	mov	r20, r24
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_enuSetPINVAL+0x188>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	2a 95       	dec	r18
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_enuSetPINVAL+0x184>
 6de:	80 95       	com	r24
 6e0:	84 23       	and	r24, r20
 6e2:	8c 93       	st	X, r24
								PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
 6e4:	a2 e3       	ldi	r26, 0x32	; 50
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	e2 e3       	ldi	r30, 0x32	; 50
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	48 2f       	mov	r20, r24
 6f0:	8c 81       	ldd	r24, Y+4	; 0x04
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	b9 01       	movw	r22, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_enuSetPINVAL+0x1b2>
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	8a 95       	dec	r24
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_enuSetPINVAL+0x1ae>
 708:	cb 01       	movw	r24, r22
 70a:	84 2b       	or	r24, r20
 70c:	8c 93       	st	X, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
 70e:	19 82       	std	Y+1, r1	; 0x01
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_enuSetPINVAL+0x1c4>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorStates;
 716:	89 81       	ldd	r24, Y+1	; 0x01
}
 718:	26 96       	adiw	r28, 0x06	; 6
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
 724:	cf 91       	pop	r28
 726:	df 91       	pop	r29
 728:	08 95       	ret

0000072a <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	00 d0       	rcall	.+0      	; 0x730 <DIO_enuToggelPIN+0x6>
 730:	00 d0       	rcall	.+0      	; 0x732 <DIO_enuToggelPIN+0x8>
 732:	0f 92       	push	r0
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	8a 83       	std	Y+2, r24	; 0x02
 73a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	84 30       	cpi	r24, 0x04	; 4
 744:	08 f0       	brcs	.+2      	; 0x748 <DIO_enuToggelPIN+0x1e>
 746:	74 c0       	rjmp	.+232    	; 0x830 <DIO_enuToggelPIN+0x106>
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	88 30       	cpi	r24, 0x08	; 8
 74c:	08 f0       	brcs	.+2      	; 0x750 <DIO_enuToggelPIN+0x26>
 74e:	70 c0       	rjmp	.+224    	; 0x830 <DIO_enuToggelPIN+0x106>
			{

					switch(Copy_u8PortID)
 750:	8a 81       	ldd	r24, Y+2	; 0x02
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	3d 83       	std	Y+5, r19	; 0x05
 758:	2c 83       	std	Y+4, r18	; 0x04
 75a:	8c 81       	ldd	r24, Y+4	; 0x04
 75c:	9d 81       	ldd	r25, Y+5	; 0x05
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	91 05       	cpc	r25, r1
 762:	49 f1       	breq	.+82     	; 0x7b6 <DIO_enuToggelPIN+0x8c>
 764:	2c 81       	ldd	r18, Y+4	; 0x04
 766:	3d 81       	ldd	r19, Y+5	; 0x05
 768:	22 30       	cpi	r18, 0x02	; 2
 76a:	31 05       	cpc	r19, r1
 76c:	2c f4       	brge	.+10     	; 0x778 <DIO_enuToggelPIN+0x4e>
 76e:	8c 81       	ldd	r24, Y+4	; 0x04
 770:	9d 81       	ldd	r25, Y+5	; 0x05
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	61 f0       	breq	.+24     	; 0x78e <DIO_enuToggelPIN+0x64>
 776:	5a c0       	rjmp	.+180    	; 0x82c <DIO_enuToggelPIN+0x102>
 778:	2c 81       	ldd	r18, Y+4	; 0x04
 77a:	3d 81       	ldd	r19, Y+5	; 0x05
 77c:	22 30       	cpi	r18, 0x02	; 2
 77e:	31 05       	cpc	r19, r1
 780:	71 f1       	breq	.+92     	; 0x7de <DIO_enuToggelPIN+0xb4>
 782:	8c 81       	ldd	r24, Y+4	; 0x04
 784:	9d 81       	ldd	r25, Y+5	; 0x05
 786:	83 30       	cpi	r24, 0x03	; 3
 788:	91 05       	cpc	r25, r1
 78a:	e9 f1       	breq	.+122    	; 0x806 <DIO_enuToggelPIN+0xdc>
 78c:	4f c0       	rjmp	.+158    	; 0x82c <DIO_enuToggelPIN+0x102>
					{
						case DIO_PORTA:
									PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
 78e:	ab e3       	ldi	r26, 0x3B	; 59
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	eb e3       	ldi	r30, 0x3B	; 59
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	48 2f       	mov	r20, r24
 79a:	8b 81       	ldd	r24, Y+3	; 0x03
 79c:	28 2f       	mov	r18, r24
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 2e       	mov	r0, r18
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_enuToggelPIN+0x82>
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	0a 94       	dec	r0
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_enuToggelPIN+0x7e>
 7b0:	84 27       	eor	r24, r20
 7b2:	8c 93       	st	X, r24
 7b4:	3b c0       	rjmp	.+118    	; 0x82c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTB:
									PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
 7b6:	a8 e3       	ldi	r26, 0x38	; 56
 7b8:	b0 e0       	ldi	r27, 0x00	; 0
 7ba:	e8 e3       	ldi	r30, 0x38	; 56
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	48 2f       	mov	r20, r24
 7c2:	8b 81       	ldd	r24, Y+3	; 0x03
 7c4:	28 2f       	mov	r18, r24
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 2e       	mov	r0, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_enuToggelPIN+0xaa>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	0a 94       	dec	r0
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_enuToggelPIN+0xa6>
 7d8:	84 27       	eor	r24, r20
 7da:	8c 93       	st	X, r24
 7dc:	27 c0       	rjmp	.+78     	; 0x82c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTC:
									PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
 7de:	a5 e3       	ldi	r26, 0x35	; 53
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	e5 e3       	ldi	r30, 0x35	; 53
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	48 2f       	mov	r20, r24
 7ea:	8b 81       	ldd	r24, Y+3	; 0x03
 7ec:	28 2f       	mov	r18, r24
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	02 2e       	mov	r0, r18
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_enuToggelPIN+0xd2>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	0a 94       	dec	r0
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_enuToggelPIN+0xce>
 800:	84 27       	eor	r24, r20
 802:	8c 93       	st	X, r24
 804:	13 c0       	rjmp	.+38     	; 0x82c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTD:
									PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
 806:	a2 e3       	ldi	r26, 0x32	; 50
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	e2 e3       	ldi	r30, 0x32	; 50
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	48 2f       	mov	r20, r24
 812:	8b 81       	ldd	r24, Y+3	; 0x03
 814:	28 2f       	mov	r18, r24
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	02 2e       	mov	r0, r18
 81e:	02 c0       	rjmp	.+4      	; 0x824 <DIO_enuToggelPIN+0xfa>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	0a 94       	dec	r0
 826:	e2 f7       	brpl	.-8      	; 0x820 <DIO_enuToggelPIN+0xf6>
 828:	84 27       	eor	r24, r20
 82a:	8c 93       	st	X, r24
									break;
					}
					Local_enuErrorStates = ES_OK;
 82c:	19 82       	std	Y+1, r1	; 0x01
 82e:	02 c0       	rjmp	.+4      	; 0x834 <DIO_enuToggelPIN+0x10a>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorStates;
 834:	89 81       	ldd	r24, Y+1	; 0x01
}
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	cf 91       	pop	r28
 842:	df 91       	pop	r29
 844:	08 95       	ret

00000846 <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
 846:	df 93       	push	r29
 848:	cf 93       	push	r28
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
 84e:	27 97       	sbiw	r28, 0x07	; 7
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	8a 83       	std	Y+2, r24	; 0x02
 85c:	6b 83       	std	Y+3, r22	; 0x03
 85e:	5d 83       	std	Y+5, r21	; 0x05
 860:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
 866:	8c 81       	ldd	r24, Y+4	; 0x04
 868:	9d 81       	ldd	r25, Y+5	; 0x05
 86a:	00 97       	sbiw	r24, 0x00	; 0
 86c:	09 f4       	brne	.+2      	; 0x870 <__stack+0x11>
 86e:	7d c0       	rjmp	.+250    	; 0x96a <__stack+0x10b>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	84 30       	cpi	r24, 0x04	; 4
 874:	08 f0       	brcs	.+2      	; 0x878 <__stack+0x19>
 876:	76 c0       	rjmp	.+236    	; 0x964 <__stack+0x105>
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	88 30       	cpi	r24, 0x08	; 8
 87c:	08 f0       	brcs	.+2      	; 0x880 <__stack+0x21>
 87e:	72 c0       	rjmp	.+228    	; 0x964 <__stack+0x105>
		{

				switch(Copy_u8PortID)
 880:	8a 81       	ldd	r24, Y+2	; 0x02
 882:	28 2f       	mov	r18, r24
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	3f 83       	std	Y+7, r19	; 0x07
 888:	2e 83       	std	Y+6, r18	; 0x06
 88a:	4e 81       	ldd	r20, Y+6	; 0x06
 88c:	5f 81       	ldd	r21, Y+7	; 0x07
 88e:	41 30       	cpi	r20, 0x01	; 1
 890:	51 05       	cpc	r21, r1
 892:	59 f1       	breq	.+86     	; 0x8ea <__stack+0x8b>
 894:	8e 81       	ldd	r24, Y+6	; 0x06
 896:	9f 81       	ldd	r25, Y+7	; 0x07
 898:	82 30       	cpi	r24, 0x02	; 2
 89a:	91 05       	cpc	r25, r1
 89c:	34 f4       	brge	.+12     	; 0x8aa <__stack+0x4b>
 89e:	2e 81       	ldd	r18, Y+6	; 0x06
 8a0:	3f 81       	ldd	r19, Y+7	; 0x07
 8a2:	21 15       	cp	r18, r1
 8a4:	31 05       	cpc	r19, r1
 8a6:	69 f0       	breq	.+26     	; 0x8c2 <__stack+0x63>
 8a8:	5b c0       	rjmp	.+182    	; 0x960 <__stack+0x101>
 8aa:	4e 81       	ldd	r20, Y+6	; 0x06
 8ac:	5f 81       	ldd	r21, Y+7	; 0x07
 8ae:	42 30       	cpi	r20, 0x02	; 2
 8b0:	51 05       	cpc	r21, r1
 8b2:	79 f1       	breq	.+94     	; 0x912 <__stack+0xb3>
 8b4:	8e 81       	ldd	r24, Y+6	; 0x06
 8b6:	9f 81       	ldd	r25, Y+7	; 0x07
 8b8:	83 30       	cpi	r24, 0x03	; 3
 8ba:	91 05       	cpc	r25, r1
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <__stack+0x61>
 8be:	3d c0       	rjmp	.+122    	; 0x93a <__stack+0xdb>
 8c0:	4f c0       	rjmp	.+158    	; 0x960 <__stack+0x101>
				{
					case DIO_PORTA:
						*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
 8c2:	e9 e3       	ldi	r30, 0x39	; 57
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	28 2f       	mov	r18, r24
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	8b 81       	ldd	r24, Y+3	; 0x03
 8ce:	88 2f       	mov	r24, r24
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	a9 01       	movw	r20, r18
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	55 95       	asr	r21
 8d8:	47 95       	ror	r20
 8da:	8a 95       	dec	r24
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
 8de:	ca 01       	movw	r24, r20
 8e0:	81 70       	andi	r24, 0x01	; 1
 8e2:	ec 81       	ldd	r30, Y+4	; 0x04
 8e4:	fd 81       	ldd	r31, Y+5	; 0x05
 8e6:	80 83       	st	Z, r24
 8e8:	3b c0       	rjmp	.+118    	; 0x960 <__stack+0x101>
								break;
					case DIO_PORTB:
						*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
 8ea:	e6 e3       	ldi	r30, 0x36	; 54
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	28 2f       	mov	r18, r24
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	8b 81       	ldd	r24, Y+3	; 0x03
 8f6:	88 2f       	mov	r24, r24
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	a9 01       	movw	r20, r18
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
 8fe:	55 95       	asr	r21
 900:	47 95       	ror	r20
 902:	8a 95       	dec	r24
 904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
 906:	ca 01       	movw	r24, r20
 908:	81 70       	andi	r24, 0x01	; 1
 90a:	ec 81       	ldd	r30, Y+4	; 0x04
 90c:	fd 81       	ldd	r31, Y+5	; 0x05
 90e:	80 83       	st	Z, r24
 910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x101>
								break;
					case DIO_PORTC:
						*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
 912:	e3 e3       	ldi	r30, 0x33	; 51
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	28 2f       	mov	r18, r24
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	88 2f       	mov	r24, r24
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	a9 01       	movw	r20, r18
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0xcb>
 926:	55 95       	asr	r21
 928:	47 95       	ror	r20
 92a:	8a 95       	dec	r24
 92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0xc7>
 92e:	ca 01       	movw	r24, r20
 930:	81 70       	andi	r24, 0x01	; 1
 932:	ec 81       	ldd	r30, Y+4	; 0x04
 934:	fd 81       	ldd	r31, Y+5	; 0x05
 936:	80 83       	st	Z, r24
 938:	13 c0       	rjmp	.+38     	; 0x960 <__stack+0x101>
								break;
					case DIO_PORTD:
						*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
 93a:	e0 e3       	ldi	r30, 0x30	; 48
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	28 2f       	mov	r18, r24
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	88 2f       	mov	r24, r24
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	a9 01       	movw	r20, r18
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0xf3>
 94e:	55 95       	asr	r21
 950:	47 95       	ror	r20
 952:	8a 95       	dec	r24
 954:	e2 f7       	brpl	.-8      	; 0x94e <__stack+0xef>
 956:	ca 01       	movw	r24, r20
 958:	81 70       	andi	r24, 0x01	; 1
 95a:	ec 81       	ldd	r30, Y+4	; 0x04
 95c:	fd 81       	ldd	r31, Y+5	; 0x05
 95e:	80 83       	st	Z, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
 960:	19 82       	std	Y+1, r1	; 0x01
 962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x10f>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
 964:	83 e0       	ldi	r24, 0x03	; 3
 966:	89 83       	std	Y+1, r24	; 0x01
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x10f>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
 96a:	82 e0       	ldi	r24, 0x02	; 2
 96c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
 96e:	89 81       	ldd	r24, Y+1	; 0x01
}
 970:	27 96       	adiw	r28, 0x07	; 7
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	f8 94       	cli
 976:	de bf       	out	0x3e, r29	; 62
 978:	0f be       	out	0x3f, r0	; 63
 97a:	cd bf       	out	0x3d, r28	; 61
 97c:	cf 91       	pop	r28
 97e:	df 91       	pop	r29
 980:	08 95       	ret

00000982 <SW_enuINIT>:
#include"../../LIB/StdTypes.h"
#include"../../MCAL/DIO_int.h"
#include"SW_Config.h"
#include"SW_Private.h"
ES_t SW_enuINIT(SW_t * Copy_enuSWITCHs)
{
 982:	df 93       	push	r29
 984:	cf 93       	push	r28
 986:	00 d0       	rcall	.+0      	; 0x988 <SW_enuINIT+0x6>
 988:	00 d0       	rcall	.+0      	; 0x98a <SW_enuINIT+0x8>
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	9c 83       	std	Y+4, r25	; 0x04
 990:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_enuSWITCHs)
 996:	8b 81       	ldd	r24, Y+3	; 0x03
 998:	9c 81       	ldd	r25, Y+4	; 0x04
 99a:	00 97       	sbiw	r24, 0x00	; 0
 99c:	09 f4       	brne	.+2      	; 0x9a0 <SW_enuINIT+0x1e>
 99e:	5d c0       	rjmp	.+186    	; 0xa5a <SW_enuINIT+0xd8>
	{
		u8 iterator = 0;
 9a0:	19 82       	std	Y+1, r1	; 0x01
		for(iterator = 0;iterator <= SW_u8SwNUMS;iterator++)
 9a2:	19 82       	std	Y+1, r1	; 0x01
 9a4:	55 c0       	rjmp	.+170    	; 0xa50 <SW_enuINIT+0xce>
		{
		Local_enuErrorState = DIO_enuSetPINDir(Copy_enuSWITCHs[iterator].SW_u8PortID,Copy_enuSWITCHs[iterator].SW_u8PinID,DIO_INPUT);
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	28 2f       	mov	r18, r24
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	c9 01       	movw	r24, r18
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	28 0f       	add	r18, r24
 9b4:	39 1f       	adc	r19, r25
 9b6:	8b 81       	ldd	r24, Y+3	; 0x03
 9b8:	9c 81       	ldd	r25, Y+4	; 0x04
 9ba:	fc 01       	movw	r30, r24
 9bc:	e2 0f       	add	r30, r18
 9be:	f3 1f       	adc	r31, r19
 9c0:	40 81       	ld	r20, Z
 9c2:	89 81       	ldd	r24, Y+1	; 0x01
 9c4:	28 2f       	mov	r18, r24
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	c9 01       	movw	r24, r18
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	28 0f       	add	r18, r24
 9d0:	39 1f       	adc	r19, r25
 9d2:	8b 81       	ldd	r24, Y+3	; 0x03
 9d4:	9c 81       	ldd	r25, Y+4	; 0x04
 9d6:	fc 01       	movw	r30, r24
 9d8:	e2 0f       	add	r30, r18
 9da:	f3 1f       	adc	r31, r19
 9dc:	91 81       	ldd	r25, Z+1	; 0x01
 9de:	84 2f       	mov	r24, r20
 9e0:	69 2f       	mov	r22, r25
 9e2:	40 e0       	ldi	r20, 0x00	; 0
 9e4:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPINDir>
 9e8:	8a 83       	std	Y+2, r24	; 0x02
		Local_enuErrorState = DIO_enuSetPINVAL(Copy_enuSWITCHs[iterator].SW_u8PortID,Copy_enuSWITCHs[iterator].SW_u8PinID,Copy_enuSWITCHs[iterator].SW_u8SWconnection);
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
 9ec:	28 2f       	mov	r18, r24
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	c9 01       	movw	r24, r18
 9f2:	88 0f       	add	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	28 0f       	add	r18, r24
 9f8:	39 1f       	adc	r19, r25
 9fa:	8b 81       	ldd	r24, Y+3	; 0x03
 9fc:	9c 81       	ldd	r25, Y+4	; 0x04
 9fe:	fc 01       	movw	r30, r24
 a00:	e2 0f       	add	r30, r18
 a02:	f3 1f       	adc	r31, r19
 a04:	50 81       	ld	r21, Z
 a06:	89 81       	ldd	r24, Y+1	; 0x01
 a08:	28 2f       	mov	r18, r24
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	c9 01       	movw	r24, r18
 a0e:	88 0f       	add	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	28 0f       	add	r18, r24
 a14:	39 1f       	adc	r19, r25
 a16:	8b 81       	ldd	r24, Y+3	; 0x03
 a18:	9c 81       	ldd	r25, Y+4	; 0x04
 a1a:	fc 01       	movw	r30, r24
 a1c:	e2 0f       	add	r30, r18
 a1e:	f3 1f       	adc	r31, r19
 a20:	41 81       	ldd	r20, Z+1	; 0x01
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	28 2f       	mov	r18, r24
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	c9 01       	movw	r24, r18
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	28 0f       	add	r18, r24
 a30:	39 1f       	adc	r19, r25
 a32:	8b 81       	ldd	r24, Y+3	; 0x03
 a34:	9c 81       	ldd	r25, Y+4	; 0x04
 a36:	fc 01       	movw	r30, r24
 a38:	e2 0f       	add	r30, r18
 a3a:	f3 1f       	adc	r31, r19
 a3c:	92 81       	ldd	r25, Z+2	; 0x02
 a3e:	85 2f       	mov	r24, r21
 a40:	64 2f       	mov	r22, r20
 a42:	49 2f       	mov	r20, r25
 a44:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
 a48:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_enuSWITCHs)
	{
		u8 iterator = 0;
		for(iterator = 0;iterator <= SW_u8SwNUMS;iterator++)
 a4a:	89 81       	ldd	r24, Y+1	; 0x01
 a4c:	8f 5f       	subi	r24, 0xFF	; 255
 a4e:	89 83       	std	Y+1, r24	; 0x01
 a50:	89 81       	ldd	r24, Y+1	; 0x01
 a52:	84 30       	cpi	r24, 0x04	; 4
 a54:	08 f4       	brcc	.+2      	; 0xa58 <SW_enuINIT+0xd6>
 a56:	a7 cf       	rjmp	.-178    	; 0x9a6 <SW_enuINIT+0x24>
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <SW_enuINIT+0xdc>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
 a5a:	82 e0       	ldi	r24, 0x02	; 2
 a5c:	8a 83       	std	Y+2, r24	; 0x02
	}



	return Local_enuErrorState;
 a5e:	8a 81       	ldd	r24, Y+2	; 0x02

}
 a60:	0f 90       	pop	r0
 a62:	0f 90       	pop	r0
 a64:	0f 90       	pop	r0
 a66:	0f 90       	pop	r0
 a68:	cf 91       	pop	r28
 a6a:	df 91       	pop	r29
 a6c:	08 95       	ret

00000a6e <SW_enuSETUP>:
ES_t SW_enuSETUP(SW_t  *Copy_StrSWITCH,SW_t Copy_StrINFO)
{
 a6e:	df 93       	push	r29
 a70:	cf 93       	push	r28
 a72:	00 d0       	rcall	.+0      	; 0xa74 <SW_enuSETUP+0x6>
 a74:	00 d0       	rcall	.+0      	; 0xa76 <SW_enuSETUP+0x8>
 a76:	00 d0       	rcall	.+0      	; 0xa78 <SW_enuSETUP+0xa>
 a78:	cd b7       	in	r28, 0x3d	; 61
 a7a:	de b7       	in	r29, 0x3e	; 62
 a7c:	9b 83       	std	Y+3, r25	; 0x03
 a7e:	8a 83       	std	Y+2, r24	; 0x02
 a80:	4c 83       	std	Y+4, r20	; 0x04
 a82:	5d 83       	std	Y+5, r21	; 0x05
 a84:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_StrSWITCH)
 a8a:	8a 81       	ldd	r24, Y+2	; 0x02
 a8c:	9b 81       	ldd	r25, Y+3	; 0x03
 a8e:	00 97       	sbiw	r24, 0x00	; 0
 a90:	69 f1       	breq	.+90     	; 0xaec <SW_enuSETUP+0x7e>
		{
			if(Copy_StrSWITCH->SW_u8PortID <= DIO_u8PORTD &&
 a92:	ea 81       	ldd	r30, Y+2	; 0x02
 a94:	fb 81       	ldd	r31, Y+3	; 0x03
 a96:	80 81       	ld	r24, Z
 a98:	84 30       	cpi	r24, 0x04	; 4
 a9a:	28 f5       	brcc	.+74     	; 0xae6 <SW_enuSETUP+0x78>
 a9c:	8c 81       	ldd	r24, Y+4	; 0x04
 a9e:	84 30       	cpi	r24, 0x04	; 4
 aa0:	10 f5       	brcc	.+68     	; 0xae6 <SW_enuSETUP+0x78>
 aa2:	ea 81       	ldd	r30, Y+2	; 0x02
 aa4:	fb 81       	ldd	r31, Y+3	; 0x03
 aa6:	81 81       	ldd	r24, Z+1	; 0x01
 aa8:	88 30       	cpi	r24, 0x08	; 8
 aaa:	e8 f4       	brcc	.+58     	; 0xae6 <SW_enuSETUP+0x78>
 aac:	8d 81       	ldd	r24, Y+5	; 0x05
 aae:	88 30       	cpi	r24, 0x08	; 8
 ab0:	d0 f4       	brcc	.+52     	; 0xae6 <SW_enuSETUP+0x78>
 ab2:	8e 81       	ldd	r24, Y+6	; 0x06
 ab4:	81 30       	cpi	r24, 0x01	; 1
 ab6:	19 f0       	breq	.+6      	; 0xabe <SW_enuSETUP+0x50>
 ab8:	8e 81       	ldd	r24, Y+6	; 0x06
 aba:	88 23       	and	r24, r24
 abc:	a1 f4       	brne	.+40     	; 0xae6 <SW_enuSETUP+0x78>
			   Copy_StrINFO.SW_u8PortID <= DIO_u8PORTD &&
			   Copy_StrSWITCH->SW_u8PinID <= DIO_u8PIN7 &&
			   Copy_StrINFO.SW_u8PinID<= DIO_u8PIN7 &&
			   (Copy_StrINFO.SW_u8SWconnection == DIO_PULLUP || Copy_StrINFO.SW_u8SWconnection == DIO_FLOAT))
			{
				Local_enuErrorState = DIO_enuSetPINDir(Copy_StrINFO.SW_u8PortID,Copy_StrINFO.SW_u8PinID,DIO_INPUT);
 abe:	8c 81       	ldd	r24, Y+4	; 0x04
 ac0:	9d 81       	ldd	r25, Y+5	; 0x05
 ac2:	69 2f       	mov	r22, r25
 ac4:	40 e0       	ldi	r20, 0x00	; 0
 ac6:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPINDir>
 aca:	89 83       	std	Y+1, r24	; 0x01

			Copy_StrSWITCH->SW_u8PortID = Copy_StrINFO.SW_u8PortID;
 acc:	8c 81       	ldd	r24, Y+4	; 0x04
 ace:	ea 81       	ldd	r30, Y+2	; 0x02
 ad0:	fb 81       	ldd	r31, Y+3	; 0x03
 ad2:	80 83       	st	Z, r24
			Copy_StrSWITCH->SW_u8PinID = Copy_StrINFO.SW_u8PinID;
 ad4:	8d 81       	ldd	r24, Y+5	; 0x05
 ad6:	ea 81       	ldd	r30, Y+2	; 0x02
 ad8:	fb 81       	ldd	r31, Y+3	; 0x03
 ada:	81 83       	std	Z+1, r24	; 0x01
			Copy_StrSWITCH->SW_u8SWconnection = Copy_StrINFO.SW_u8SWconnection;
 adc:	8e 81       	ldd	r24, Y+6	; 0x06
 ade:	ea 81       	ldd	r30, Y+2	; 0x02
 ae0:	fb 81       	ldd	r31, Y+3	; 0x03
 ae2:	82 83       	std	Z+2, r24	; 0x02
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <SW_enuSETUP+0x82>

			}
			else
			{
				Local_enuErrorState = ES_Out_Of_Range;
 ae6:	83 e0       	ldi	r24, 0x03	; 3
 ae8:	89 83       	std	Y+1, r24	; 0x01
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <SW_enuSETUP+0x82>
			}

		}
		else
		{
			Local_enuErrorState = ES_NULLPOINTER;
 aec:	82 e0       	ldi	r24, 0x02	; 2
 aee:	89 83       	std	Y+1, r24	; 0x01
		}



		return Local_enuErrorState;
 af0:	89 81       	ldd	r24, Y+1	; 0x01
}
 af2:	26 96       	adiw	r28, 0x06	; 6
 af4:	0f b6       	in	r0, 0x3f	; 63
 af6:	f8 94       	cli
 af8:	de bf       	out	0x3e, r29	; 62
 afa:	0f be       	out	0x3f, r0	; 63
 afc:	cd bf       	out	0x3d, r28	; 61
 afe:	cf 91       	pop	r28
 b00:	df 91       	pop	r29
 b02:	08 95       	ret

00000b04 <SW_enuGetState>:
ES_t SW_enuGetState(SW_t  *Copy_StrSWITCH,u8 *Copy_u8SWVal)
{
 b04:	df 93       	push	r29
 b06:	cf 93       	push	r28
 b08:	00 d0       	rcall	.+0      	; 0xb0a <SW_enuGetState+0x6>
 b0a:	00 d0       	rcall	.+0      	; 0xb0c <SW_enuGetState+0x8>
 b0c:	00 d0       	rcall	.+0      	; 0xb0e <SW_enuGetState+0xa>
 b0e:	cd b7       	in	r28, 0x3d	; 61
 b10:	de b7       	in	r29, 0x3e	; 62
 b12:	9b 83       	std	Y+3, r25	; 0x03
 b14:	8a 83       	std	Y+2, r24	; 0x02
 b16:	7d 83       	std	Y+5, r23	; 0x05
 b18:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_StrSWITCH)
 b1e:	8a 81       	ldd	r24, Y+2	; 0x02
 b20:	9b 81       	ldd	r25, Y+3	; 0x03
 b22:	00 97       	sbiw	r24, 0x00	; 0
 b24:	f9 f0       	breq	.+62     	; 0xb64 <SW_enuGetState+0x60>
			{
				Local_enuErrorState = DIO_enuGetPINVAL(Copy_StrSWITCH->SW_u8PortID,Copy_StrSWITCH->SW_u8PinID,Copy_u8SWVal);
 b26:	ea 81       	ldd	r30, Y+2	; 0x02
 b28:	fb 81       	ldd	r31, Y+3	; 0x03
 b2a:	80 81       	ld	r24, Z
 b2c:	ea 81       	ldd	r30, Y+2	; 0x02
 b2e:	fb 81       	ldd	r31, Y+3	; 0x03
 b30:	91 81       	ldd	r25, Z+1	; 0x01
 b32:	2c 81       	ldd	r18, Y+4	; 0x04
 b34:	3d 81       	ldd	r19, Y+5	; 0x05
 b36:	69 2f       	mov	r22, r25
 b38:	a9 01       	movw	r20, r18
 b3a:	0e 94 23 04 	call	0x846	; 0x846 <DIO_enuGetPINVAL>
 b3e:	89 83       	std	Y+1, r24	; 0x01
				if(Copy_StrSWITCH->SW_u8SWconnection == DIO_FLOAT)
 b40:	ea 81       	ldd	r30, Y+2	; 0x02
 b42:	fb 81       	ldd	r31, Y+3	; 0x03
 b44:	82 81       	ldd	r24, Z+2	; 0x02
 b46:	88 23       	and	r24, r24
 b48:	79 f4       	brne	.+30     	; 0xb68 <SW_enuGetState+0x64>
					*Copy_u8SWVal = ! *Copy_u8SWVal;
 b4a:	ec 81       	ldd	r30, Y+4	; 0x04
 b4c:	fd 81       	ldd	r31, Y+5	; 0x05
 b4e:	80 81       	ld	r24, Z
 b50:	1e 82       	std	Y+6, r1	; 0x06
 b52:	88 23       	and	r24, r24
 b54:	11 f4       	brne	.+4      	; 0xb5a <SW_enuGetState+0x56>
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	8e 83       	std	Y+6, r24	; 0x06
 b5a:	ec 81       	ldd	r30, Y+4	; 0x04
 b5c:	fd 81       	ldd	r31, Y+5	; 0x05
 b5e:	8e 81       	ldd	r24, Y+6	; 0x06
 b60:	80 83       	st	Z, r24
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <SW_enuGetState+0x64>


			}
			else
			{
				Local_enuErrorState = ES_NULLPOINTER;
 b64:	82 e0       	ldi	r24, 0x02	; 2
 b66:	89 83       	std	Y+1, r24	; 0x01
			}



			return Local_enuErrorState;
 b68:	89 81       	ldd	r24, Y+1	; 0x01
}
 b6a:	26 96       	adiw	r28, 0x06	; 6
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	f8 94       	cli
 b70:	de bf       	out	0x3e, r29	; 62
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	cd bf       	out	0x3d, r28	; 61
 b76:	cf 91       	pop	r28
 b78:	df 91       	pop	r29
 b7a:	08 95       	ret

00000b7c <LED_enuINIT>:
#include"../../LIB/StdTypes.h"
#include"../../MCAL/DIO_int.h"
#include "LED_config.h"
#include"LED_private.h"
ES_t LED_enuINIT(LED_t *Copy_AStr_LEDs)
{
 b7c:	df 93       	push	r29
 b7e:	cf 93       	push	r28
 b80:	cd b7       	in	r28, 0x3d	; 61
 b82:	de b7       	in	r29, 0x3e	; 62
 b84:	27 97       	sbiw	r28, 0x07	; 7
 b86:	0f b6       	in	r0, 0x3f	; 63
 b88:	f8 94       	cli
 b8a:	de bf       	out	0x3e, r29	; 62
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	cd bf       	out	0x3d, r28	; 61
 b90:	9c 83       	std	Y+4, r25	; 0x04
 b92:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_AStr_LEDs)
 b98:	8b 81       	ldd	r24, Y+3	; 0x03
 b9a:	9c 81       	ldd	r25, Y+4	; 0x04
 b9c:	00 97       	sbiw	r24, 0x00	; 0
 b9e:	09 f4       	brne	.+2      	; 0xba2 <LED_enuINIT+0x26>
 ba0:	b7 c0       	rjmp	.+366    	; 0xd10 <LED_enuINIT+0x194>
	{
		u8 Local_u8Irerator ;
		for(Local_u8Irerator = 0;Local_u8Irerator<LED_NUMBER;Local_u8Irerator++)
 ba2:	19 82       	std	Y+1, r1	; 0x01
 ba4:	b0 c0       	rjmp	.+352    	; 0xd06 <LED_enuINIT+0x18a>
		{
			Local_enuErrorState = DIO_enuSetPINDir(Copy_AStr_LEDs[Local_u8Irerator].LED_u8PortID,Copy_AStr_LEDs[Local_u8Irerator].LED_u8PinID,DIO_OUTPUT);
 ba6:	89 81       	ldd	r24, Y+1	; 0x01
 ba8:	88 2f       	mov	r24, r24
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	9c 01       	movw	r18, r24
 bae:	22 0f       	add	r18, r18
 bb0:	33 1f       	adc	r19, r19
 bb2:	22 0f       	add	r18, r18
 bb4:	33 1f       	adc	r19, r19
 bb6:	8b 81       	ldd	r24, Y+3	; 0x03
 bb8:	9c 81       	ldd	r25, Y+4	; 0x04
 bba:	fc 01       	movw	r30, r24
 bbc:	e2 0f       	add	r30, r18
 bbe:	f3 1f       	adc	r31, r19
 bc0:	40 81       	ld	r20, Z
 bc2:	89 81       	ldd	r24, Y+1	; 0x01
 bc4:	88 2f       	mov	r24, r24
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	9c 01       	movw	r18, r24
 bca:	22 0f       	add	r18, r18
 bcc:	33 1f       	adc	r19, r19
 bce:	22 0f       	add	r18, r18
 bd0:	33 1f       	adc	r19, r19
 bd2:	8b 81       	ldd	r24, Y+3	; 0x03
 bd4:	9c 81       	ldd	r25, Y+4	; 0x04
 bd6:	fc 01       	movw	r30, r24
 bd8:	e2 0f       	add	r30, r18
 bda:	f3 1f       	adc	r31, r19
 bdc:	91 81       	ldd	r25, Z+1	; 0x01
 bde:	84 2f       	mov	r24, r20
 be0:	69 2f       	mov	r22, r25
 be2:	41 e0       	ldi	r20, 0x01	; 1
 be4:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPINDir>
 be8:	8a 83       	std	Y+2, r24	; 0x02
			if(Copy_AStr_LEDs[Local_u8Irerator].LED_u8Connection == SINK)
 bea:	89 81       	ldd	r24, Y+1	; 0x01
 bec:	88 2f       	mov	r24, r24
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	9c 01       	movw	r18, r24
 bf2:	22 0f       	add	r18, r18
 bf4:	33 1f       	adc	r19, r19
 bf6:	22 0f       	add	r18, r18
 bf8:	33 1f       	adc	r19, r19
 bfa:	8b 81       	ldd	r24, Y+3	; 0x03
 bfc:	9c 81       	ldd	r25, Y+4	; 0x04
 bfe:	fc 01       	movw	r30, r24
 c00:	e2 0f       	add	r30, r18
 c02:	f3 1f       	adc	r31, r19
 c04:	82 81       	ldd	r24, Z+2	; 0x02
 c06:	88 23       	and	r24, r24
 c08:	c1 f5       	brne	.+112    	; 0xc7a <LED_enuINIT+0xfe>
			{
			Local_enuErrorState = DIO_enuSetPINVAL(Copy_AStr_LEDs[Local_u8Irerator].LED_u8PortID,Copy_AStr_LEDs[Local_u8Irerator].LED_u8PinID,!Copy_AStr_LEDs[Local_u8Irerator].LED_u8Val);
 c0a:	89 81       	ldd	r24, Y+1	; 0x01
 c0c:	88 2f       	mov	r24, r24
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	9c 01       	movw	r18, r24
 c12:	22 0f       	add	r18, r18
 c14:	33 1f       	adc	r19, r19
 c16:	22 0f       	add	r18, r18
 c18:	33 1f       	adc	r19, r19
 c1a:	8b 81       	ldd	r24, Y+3	; 0x03
 c1c:	9c 81       	ldd	r25, Y+4	; 0x04
 c1e:	fc 01       	movw	r30, r24
 c20:	e2 0f       	add	r30, r18
 c22:	f3 1f       	adc	r31, r19
 c24:	80 81       	ld	r24, Z
 c26:	8f 83       	std	Y+7, r24	; 0x07
 c28:	89 81       	ldd	r24, Y+1	; 0x01
 c2a:	88 2f       	mov	r24, r24
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	9c 01       	movw	r18, r24
 c30:	22 0f       	add	r18, r18
 c32:	33 1f       	adc	r19, r19
 c34:	22 0f       	add	r18, r18
 c36:	33 1f       	adc	r19, r19
 c38:	8b 81       	ldd	r24, Y+3	; 0x03
 c3a:	9c 81       	ldd	r25, Y+4	; 0x04
 c3c:	fc 01       	movw	r30, r24
 c3e:	e2 0f       	add	r30, r18
 c40:	f3 1f       	adc	r31, r19
 c42:	81 81       	ldd	r24, Z+1	; 0x01
 c44:	8e 83       	std	Y+6, r24	; 0x06
 c46:	89 81       	ldd	r24, Y+1	; 0x01
 c48:	88 2f       	mov	r24, r24
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	9c 01       	movw	r18, r24
 c4e:	22 0f       	add	r18, r18
 c50:	33 1f       	adc	r19, r19
 c52:	22 0f       	add	r18, r18
 c54:	33 1f       	adc	r19, r19
 c56:	8b 81       	ldd	r24, Y+3	; 0x03
 c58:	9c 81       	ldd	r25, Y+4	; 0x04
 c5a:	fc 01       	movw	r30, r24
 c5c:	e2 0f       	add	r30, r18
 c5e:	f3 1f       	adc	r31, r19
 c60:	83 81       	ldd	r24, Z+3	; 0x03
 c62:	1d 82       	std	Y+5, r1	; 0x05
 c64:	88 23       	and	r24, r24
 c66:	11 f4       	brne	.+4      	; 0xc6c <LED_enuINIT+0xf0>
 c68:	81 e0       	ldi	r24, 0x01	; 1
 c6a:	8d 83       	std	Y+5, r24	; 0x05
 c6c:	8f 81       	ldd	r24, Y+7	; 0x07
 c6e:	6e 81       	ldd	r22, Y+6	; 0x06
 c70:	4d 81       	ldd	r20, Y+5	; 0x05
 c72:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
 c76:	8a 83       	std	Y+2, r24	; 0x02
 c78:	43 c0       	rjmp	.+134    	; 0xd00 <LED_enuINIT+0x184>
			}
			else if(Copy_AStr_LEDs[Local_u8Irerator].LED_u8Connection == SOURCE)
 c7a:	89 81       	ldd	r24, Y+1	; 0x01
 c7c:	88 2f       	mov	r24, r24
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	9c 01       	movw	r18, r24
 c82:	22 0f       	add	r18, r18
 c84:	33 1f       	adc	r19, r19
 c86:	22 0f       	add	r18, r18
 c88:	33 1f       	adc	r19, r19
 c8a:	8b 81       	ldd	r24, Y+3	; 0x03
 c8c:	9c 81       	ldd	r25, Y+4	; 0x04
 c8e:	fc 01       	movw	r30, r24
 c90:	e2 0f       	add	r30, r18
 c92:	f3 1f       	adc	r31, r19
 c94:	82 81       	ldd	r24, Z+2	; 0x02
 c96:	81 30       	cpi	r24, 0x01	; 1
 c98:	89 f5       	brne	.+98     	; 0xcfc <LED_enuINIT+0x180>
			{
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_AStr_LEDs[Local_u8Irerator].LED_u8PortID,Copy_AStr_LEDs[Local_u8Irerator].LED_u8PinID,Copy_AStr_LEDs[Local_u8Irerator].LED_u8Val);
 c9a:	89 81       	ldd	r24, Y+1	; 0x01
 c9c:	88 2f       	mov	r24, r24
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	9c 01       	movw	r18, r24
 ca2:	22 0f       	add	r18, r18
 ca4:	33 1f       	adc	r19, r19
 ca6:	22 0f       	add	r18, r18
 ca8:	33 1f       	adc	r19, r19
 caa:	8b 81       	ldd	r24, Y+3	; 0x03
 cac:	9c 81       	ldd	r25, Y+4	; 0x04
 cae:	fc 01       	movw	r30, r24
 cb0:	e2 0f       	add	r30, r18
 cb2:	f3 1f       	adc	r31, r19
 cb4:	50 81       	ld	r21, Z
 cb6:	89 81       	ldd	r24, Y+1	; 0x01
 cb8:	88 2f       	mov	r24, r24
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	9c 01       	movw	r18, r24
 cbe:	22 0f       	add	r18, r18
 cc0:	33 1f       	adc	r19, r19
 cc2:	22 0f       	add	r18, r18
 cc4:	33 1f       	adc	r19, r19
 cc6:	8b 81       	ldd	r24, Y+3	; 0x03
 cc8:	9c 81       	ldd	r25, Y+4	; 0x04
 cca:	fc 01       	movw	r30, r24
 ccc:	e2 0f       	add	r30, r18
 cce:	f3 1f       	adc	r31, r19
 cd0:	41 81       	ldd	r20, Z+1	; 0x01
 cd2:	89 81       	ldd	r24, Y+1	; 0x01
 cd4:	88 2f       	mov	r24, r24
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	9c 01       	movw	r18, r24
 cda:	22 0f       	add	r18, r18
 cdc:	33 1f       	adc	r19, r19
 cde:	22 0f       	add	r18, r18
 ce0:	33 1f       	adc	r19, r19
 ce2:	8b 81       	ldd	r24, Y+3	; 0x03
 ce4:	9c 81       	ldd	r25, Y+4	; 0x04
 ce6:	fc 01       	movw	r30, r24
 ce8:	e2 0f       	add	r30, r18
 cea:	f3 1f       	adc	r31, r19
 cec:	93 81       	ldd	r25, Z+3	; 0x03
 cee:	85 2f       	mov	r24, r21
 cf0:	64 2f       	mov	r22, r20
 cf2:	49 2f       	mov	r20, r25
 cf4:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
 cf8:	8a 83       	std	Y+2, r24	; 0x02
 cfa:	02 c0       	rjmp	.+4      	; 0xd00 <LED_enuINIT+0x184>
			}
			else
			{
				Local_enuErrorState = ES_Out_Of_Range;
 cfc:	83 e0       	ldi	r24, 0x03	; 3
 cfe:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_AStr_LEDs)
	{
		u8 Local_u8Irerator ;
		for(Local_u8Irerator = 0;Local_u8Irerator<LED_NUMBER;Local_u8Irerator++)
 d00:	89 81       	ldd	r24, Y+1	; 0x01
 d02:	8f 5f       	subi	r24, 0xFF	; 255
 d04:	89 83       	std	Y+1, r24	; 0x01
 d06:	89 81       	ldd	r24, Y+1	; 0x01
 d08:	83 30       	cpi	r24, 0x03	; 3
 d0a:	08 f4       	brcc	.+2      	; 0xd0e <LED_enuINIT+0x192>
 d0c:	4c cf       	rjmp	.-360    	; 0xba6 <LED_enuINIT+0x2a>
 d0e:	02 c0       	rjmp	.+4      	; 0xd14 <LED_enuINIT+0x198>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
 d10:	82 e0       	ldi	r24, 0x02	; 2
 d12:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
 d14:	8a 81       	ldd	r24, Y+2	; 0x02
}
 d16:	27 96       	adiw	r28, 0x07	; 7
 d18:	0f b6       	in	r0, 0x3f	; 63
 d1a:	f8 94       	cli
 d1c:	de bf       	out	0x3e, r29	; 62
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	cd bf       	out	0x3d, r28	; 61
 d22:	cf 91       	pop	r28
 d24:	df 91       	pop	r29
 d26:	08 95       	ret

00000d28 <LED_enuSetState>:
ES_t LED_enuSetState(LED_t *Copy_A_LED,u8 Copy_u8Led_SVal)
{
 d28:	df 93       	push	r29
 d2a:	cf 93       	push	r28
 d2c:	cd b7       	in	r28, 0x3d	; 61
 d2e:	de b7       	in	r29, 0x3e	; 62
 d30:	27 97       	sbiw	r28, 0x07	; 7
 d32:	0f b6       	in	r0, 0x3f	; 63
 d34:	f8 94       	cli
 d36:	de bf       	out	0x3e, r29	; 62
 d38:	0f be       	out	0x3f, r0	; 63
 d3a:	cd bf       	out	0x3d, r28	; 61
 d3c:	9b 83       	std	Y+3, r25	; 0x03
 d3e:	8a 83       	std	Y+2, r24	; 0x02
 d40:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 d42:	81 e0       	ldi	r24, 0x01	; 1
 d44:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_A_LED)
 d46:	8a 81       	ldd	r24, Y+2	; 0x02
 d48:	9b 81       	ldd	r25, Y+3	; 0x03
 d4a:	00 97       	sbiw	r24, 0x00	; 0
 d4c:	71 f1       	breq	.+92     	; 0xdaa <LED_enuSetState+0x82>
		{
			if(Copy_A_LED->LED_u8Connection == SINK)
 d4e:	ea 81       	ldd	r30, Y+2	; 0x02
 d50:	fb 81       	ldd	r31, Y+3	; 0x03
 d52:	82 81       	ldd	r24, Z+2	; 0x02
 d54:	88 23       	and	r24, r24
 d56:	a9 f4       	brne	.+42     	; 0xd82 <LED_enuSetState+0x5a>
				{
					Local_enuErrorState = DIO_enuSetPINVAL(Copy_A_LED->LED_u8PortID,Copy_A_LED->LED_u8PinID,!Copy_u8Led_SVal);
 d58:	ea 81       	ldd	r30, Y+2	; 0x02
 d5a:	fb 81       	ldd	r31, Y+3	; 0x03
 d5c:	80 81       	ld	r24, Z
 d5e:	8f 83       	std	Y+7, r24	; 0x07
 d60:	ea 81       	ldd	r30, Y+2	; 0x02
 d62:	fb 81       	ldd	r31, Y+3	; 0x03
 d64:	81 81       	ldd	r24, Z+1	; 0x01
 d66:	8e 83       	std	Y+6, r24	; 0x06
 d68:	1d 82       	std	Y+5, r1	; 0x05
 d6a:	8c 81       	ldd	r24, Y+4	; 0x04
 d6c:	88 23       	and	r24, r24
 d6e:	11 f4       	brne	.+4      	; 0xd74 <LED_enuSetState+0x4c>
 d70:	81 e0       	ldi	r24, 0x01	; 1
 d72:	8d 83       	std	Y+5, r24	; 0x05
 d74:	8f 81       	ldd	r24, Y+7	; 0x07
 d76:	6e 81       	ldd	r22, Y+6	; 0x06
 d78:	4d 81       	ldd	r20, Y+5	; 0x05
 d7a:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
 d7e:	89 83       	std	Y+1, r24	; 0x01
 d80:	16 c0       	rjmp	.+44     	; 0xdae <LED_enuSetState+0x86>
				}
				else if(Copy_A_LED->LED_u8Connection == SOURCE)
 d82:	ea 81       	ldd	r30, Y+2	; 0x02
 d84:	fb 81       	ldd	r31, Y+3	; 0x03
 d86:	82 81       	ldd	r24, Z+2	; 0x02
 d88:	81 30       	cpi	r24, 0x01	; 1
 d8a:	61 f4       	brne	.+24     	; 0xda4 <LED_enuSetState+0x7c>
				{
					Local_enuErrorState = DIO_enuSetPINVAL(Copy_A_LED->LED_u8PortID,Copy_A_LED->LED_u8PinID,Copy_u8Led_SVal);
 d8c:	ea 81       	ldd	r30, Y+2	; 0x02
 d8e:	fb 81       	ldd	r31, Y+3	; 0x03
 d90:	80 81       	ld	r24, Z
 d92:	ea 81       	ldd	r30, Y+2	; 0x02
 d94:	fb 81       	ldd	r31, Y+3	; 0x03
 d96:	91 81       	ldd	r25, Z+1	; 0x01
 d98:	69 2f       	mov	r22, r25
 d9a:	4c 81       	ldd	r20, Y+4	; 0x04
 d9c:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
 da0:	89 83       	std	Y+1, r24	; 0x01
 da2:	05 c0       	rjmp	.+10     	; 0xdae <LED_enuSetState+0x86>
				}
				else
				{
					Local_enuErrorState = ES_Out_Of_Range;
 da4:	83 e0       	ldi	r24, 0x03	; 3
 da6:	89 83       	std	Y+1, r24	; 0x01
 da8:	02 c0       	rjmp	.+4      	; 0xdae <LED_enuSetState+0x86>
				}

		}
		else
		{
			Local_enuErrorState = ES_NULLPOINTER;
 daa:	82 e0       	ldi	r24, 0x02	; 2
 dac:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
 dae:	89 81       	ldd	r24, Y+1	; 0x01
}
 db0:	27 96       	adiw	r28, 0x07	; 7
 db2:	0f b6       	in	r0, 0x3f	; 63
 db4:	f8 94       	cli
 db6:	de bf       	out	0x3e, r29	; 62
 db8:	0f be       	out	0x3f, r0	; 63
 dba:	cd bf       	out	0x3d, r28	; 61
 dbc:	cf 91       	pop	r28
 dbe:	df 91       	pop	r29
 dc0:	08 95       	ret

00000dc2 <LED_enuSETUP>:


ES_t LED_enuSETUP(LED_t *Copy_StrLED,LED_t Copy_StrINFO)
{
 dc2:	df 93       	push	r29
 dc4:	cf 93       	push	r28
 dc6:	cd b7       	in	r28, 0x3d	; 61
 dc8:	de b7       	in	r29, 0x3e	; 62
 dca:	27 97       	sbiw	r28, 0x07	; 7
 dcc:	0f b6       	in	r0, 0x3f	; 63
 dce:	f8 94       	cli
 dd0:	de bf       	out	0x3e, r29	; 62
 dd2:	0f be       	out	0x3f, r0	; 63
 dd4:	cd bf       	out	0x3d, r28	; 61
 dd6:	9b 83       	std	Y+3, r25	; 0x03
 dd8:	8a 83       	std	Y+2, r24	; 0x02
 dda:	4c 83       	std	Y+4, r20	; 0x04
 ddc:	5d 83       	std	Y+5, r21	; 0x05
 dde:	6e 83       	std	Y+6, r22	; 0x06
 de0:	7f 83       	std	Y+7, r23	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
 de2:	81 e0       	ldi	r24, 0x01	; 1
 de4:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_StrLED)
 de6:	8a 81       	ldd	r24, Y+2	; 0x02
 de8:	9b 81       	ldd	r25, Y+3	; 0x03
 dea:	00 97       	sbiw	r24, 0x00	; 0
 dec:	a9 f1       	breq	.+106    	; 0xe58 <LED_enuSETUP+0x96>
			{
				if(Copy_StrLED->LED_u8PortID <= DIO_u8PORTD &&
 dee:	ea 81       	ldd	r30, Y+2	; 0x02
 df0:	fb 81       	ldd	r31, Y+3	; 0x03
 df2:	80 81       	ld	r24, Z
 df4:	84 30       	cpi	r24, 0x04	; 4
 df6:	68 f5       	brcc	.+90     	; 0xe52 <LED_enuSETUP+0x90>
 df8:	8c 81       	ldd	r24, Y+4	; 0x04
 dfa:	84 30       	cpi	r24, 0x04	; 4
 dfc:	50 f5       	brcc	.+84     	; 0xe52 <LED_enuSETUP+0x90>
 dfe:	ea 81       	ldd	r30, Y+2	; 0x02
 e00:	fb 81       	ldd	r31, Y+3	; 0x03
 e02:	81 81       	ldd	r24, Z+1	; 0x01
 e04:	88 30       	cpi	r24, 0x08	; 8
 e06:	28 f5       	brcc	.+74     	; 0xe52 <LED_enuSETUP+0x90>
 e08:	8d 81       	ldd	r24, Y+5	; 0x05
 e0a:	88 30       	cpi	r24, 0x08	; 8
 e0c:	10 f5       	brcc	.+68     	; 0xe52 <LED_enuSETUP+0x90>
 e0e:	8e 81       	ldd	r24, Y+6	; 0x06
 e10:	88 23       	and	r24, r24
 e12:	19 f0       	breq	.+6      	; 0xe1a <LED_enuSETUP+0x58>
 e14:	8e 81       	ldd	r24, Y+6	; 0x06
 e16:	81 30       	cpi	r24, 0x01	; 1
 e18:	e1 f4       	brne	.+56     	; 0xe52 <LED_enuSETUP+0x90>
				   Copy_StrINFO.LED_u8PortID <= DIO_u8PORTD &&
				   Copy_StrLED->LED_u8PinID <= DIO_u8PIN7 &&
				   Copy_StrINFO.LED_u8PinID<= DIO_u8PIN7 &&
				   (Copy_StrINFO.LED_u8Connection == SINK || Copy_StrINFO.LED_u8Connection == SOURCE))
				{
					Local_enuErrorState = DIO_enuSetPINDir(Copy_StrINFO.LED_u8PortID,Copy_StrINFO.LED_u8PinID,DIO_OUTPUT);
 e1a:	8c 81       	ldd	r24, Y+4	; 0x04
 e1c:	9d 81       	ldd	r25, Y+5	; 0x05
 e1e:	69 2f       	mov	r22, r25
 e20:	41 e0       	ldi	r20, 0x01	; 1
 e22:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPINDir>
 e26:	89 83       	std	Y+1, r24	; 0x01
				Copy_StrLED->LED_u8PortID = Copy_StrINFO.LED_u8PortID;
 e28:	8c 81       	ldd	r24, Y+4	; 0x04
 e2a:	ea 81       	ldd	r30, Y+2	; 0x02
 e2c:	fb 81       	ldd	r31, Y+3	; 0x03
 e2e:	80 83       	st	Z, r24
				Copy_StrLED->LED_u8PinID = Copy_StrINFO.LED_u8PinID;
 e30:	8d 81       	ldd	r24, Y+5	; 0x05
 e32:	ea 81       	ldd	r30, Y+2	; 0x02
 e34:	fb 81       	ldd	r31, Y+3	; 0x03
 e36:	81 83       	std	Z+1, r24	; 0x01
				Copy_StrLED->LED_u8Connection = Copy_StrINFO.LED_u8Connection;
 e38:	8e 81       	ldd	r24, Y+6	; 0x06
 e3a:	ea 81       	ldd	r30, Y+2	; 0x02
 e3c:	fb 81       	ldd	r31, Y+3	; 0x03
 e3e:	82 83       	std	Z+2, r24	; 0x02
				Local_enuErrorState = DIO_enuSetPINVAL(Copy_StrINFO.LED_u8PortID,Copy_StrINFO.LED_u8PinID,Copy_StrINFO.LED_u8Val);
 e40:	8c 81       	ldd	r24, Y+4	; 0x04
 e42:	9d 81       	ldd	r25, Y+5	; 0x05
 e44:	2f 81       	ldd	r18, Y+7	; 0x07
 e46:	69 2f       	mov	r22, r25
 e48:	42 2f       	mov	r20, r18
 e4a:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPINVAL>
 e4e:	89 83       	std	Y+1, r24	; 0x01
 e50:	05 c0       	rjmp	.+10     	; 0xe5c <LED_enuSETUP+0x9a>

				}
				else
				{
					Local_enuErrorState = ES_Out_Of_Range;
 e52:	83 e0       	ldi	r24, 0x03	; 3
 e54:	89 83       	std	Y+1, r24	; 0x01
 e56:	02 c0       	rjmp	.+4      	; 0xe5c <LED_enuSETUP+0x9a>
				}

			}
			else
			{
				Local_enuErrorState = ES_NULLPOINTER;
 e58:	82 e0       	ldi	r24, 0x02	; 2
 e5a:	89 83       	std	Y+1, r24	; 0x01
			}



			return Local_enuErrorState;
 e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
 e5e:	27 96       	adiw	r28, 0x07	; 7
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	cf 91       	pop	r28
 e6c:	df 91       	pop	r29
 e6e:	08 95       	ret

00000e70 <main>:
#include<util/delay.h>
extern SW_t Switches[SW_u8SwNUMS] ;
extern LED_t LEDsARR[LED_NUMBER] ;

int main()
{
 e70:	df 93       	push	r29
 e72:	cf 93       	push	r28
 e74:	cd b7       	in	r28, 0x3d	; 61
 e76:	de b7       	in	r29, 0x3e	; 62
 e78:	2f 97       	sbiw	r28, 0x0f	; 15
 e7a:	0f b6       	in	r0, 0x3f	; 63
 e7c:	f8 94       	cli
 e7e:	de bf       	out	0x3e, r29	; 62
 e80:	0f be       	out	0x3f, r0	; 63
 e82:	cd bf       	out	0x3d, r28	; 61

	SW_t SWitCH_0 = {DIO_u8PORTD,DIO_u8PIN0,DIO_PULLUP};
 e84:	9e 01       	movw	r18, r28
 e86:	2f 5f       	subi	r18, 0xFF	; 255
 e88:	3f 4f       	sbci	r19, 0xFF	; 255
 e8a:	3c 87       	std	Y+12, r19	; 0x0c
 e8c:	2b 87       	std	Y+11, r18	; 0x0b
 e8e:	85 e7       	ldi	r24, 0x75	; 117
 e90:	90 e0       	ldi	r25, 0x00	; 0
 e92:	9e 87       	std	Y+14, r25	; 0x0e
 e94:	8d 87       	std	Y+13, r24	; 0x0d
 e96:	93 e0       	ldi	r25, 0x03	; 3
 e98:	9f 87       	std	Y+15, r25	; 0x0f
 e9a:	ed 85       	ldd	r30, Y+13	; 0x0d
 e9c:	fe 85       	ldd	r31, Y+14	; 0x0e
 e9e:	00 80       	ld	r0, Z
 ea0:	2d 85       	ldd	r18, Y+13	; 0x0d
 ea2:	3e 85       	ldd	r19, Y+14	; 0x0e
 ea4:	2f 5f       	subi	r18, 0xFF	; 255
 ea6:	3f 4f       	sbci	r19, 0xFF	; 255
 ea8:	3e 87       	std	Y+14, r19	; 0x0e
 eaa:	2d 87       	std	Y+13, r18	; 0x0d
 eac:	eb 85       	ldd	r30, Y+11	; 0x0b
 eae:	fc 85       	ldd	r31, Y+12	; 0x0c
 eb0:	00 82       	st	Z, r0
 eb2:	2b 85       	ldd	r18, Y+11	; 0x0b
 eb4:	3c 85       	ldd	r19, Y+12	; 0x0c
 eb6:	2f 5f       	subi	r18, 0xFF	; 255
 eb8:	3f 4f       	sbci	r19, 0xFF	; 255
 eba:	3c 87       	std	Y+12, r19	; 0x0c
 ebc:	2b 87       	std	Y+11, r18	; 0x0b
 ebe:	3f 85       	ldd	r19, Y+15	; 0x0f
 ec0:	31 50       	subi	r19, 0x01	; 1
 ec2:	3f 87       	std	Y+15, r19	; 0x0f
 ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
 ec6:	88 23       	and	r24, r24
 ec8:	41 f7       	brne	.-48     	; 0xe9a <main+0x2a>

	LED_t LED_0   = {DIO_u8PORTA,DIO_u8PIN3,LED_u8SOURCE,LED_u8OFF};
 eca:	1c 82       	std	Y+4, r1	; 0x04
 ecc:	83 e0       	ldi	r24, 0x03	; 3
 ece:	8d 83       	std	Y+5, r24	; 0x05
 ed0:	81 e0       	ldi	r24, 0x01	; 1
 ed2:	8e 83       	std	Y+6, r24	; 0x06
 ed4:	1f 82       	std	Y+7, r1	; 0x07

	DIO_enuInit();
 ed6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	SW_enuINIT(Switches);
 eda:	80 e6       	ldi	r24, 0x60	; 96
 edc:	90 e0       	ldi	r25, 0x00	; 0
 ede:	0e 94 c1 04 	call	0x982	; 0x982 <SW_enuINIT>
	LED_enuINIT(LEDsARR);
 ee2:	89 e6       	ldi	r24, 0x69	; 105
 ee4:	90 e0       	ldi	r25, 0x00	; 0
 ee6:	0e 94 be 05 	call	0xb7c	; 0xb7c <LED_enuINIT>
	SW_enuSETUP(&Switches[0],SWitCH_0);
 eea:	80 e6       	ldi	r24, 0x60	; 96
 eec:	90 e0       	ldi	r25, 0x00	; 0
 eee:	49 81       	ldd	r20, Y+1	; 0x01
 ef0:	5a 81       	ldd	r21, Y+2	; 0x02
 ef2:	6b 81       	ldd	r22, Y+3	; 0x03
 ef4:	0e 94 37 05 	call	0xa6e	; 0xa6e <SW_enuSETUP>

	LED_enuSETUP(&LEDsARR[0],LED_0);
 ef8:	89 e6       	ldi	r24, 0x69	; 105
 efa:	90 e0       	ldi	r25, 0x00	; 0
 efc:	2c 81       	ldd	r18, Y+4	; 0x04
 efe:	3d 81       	ldd	r19, Y+5	; 0x05
 f00:	4e 81       	ldd	r20, Y+6	; 0x06
 f02:	5f 81       	ldd	r21, Y+7	; 0x07
 f04:	ba 01       	movw	r22, r20
 f06:	a9 01       	movw	r20, r18
 f08:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LED_enuSETUP>


	u8 PressedKey_0 = SW_u8SwNPressed;
 f0c:	81 e0       	ldi	r24, 0x01	; 1
 f0e:	88 87       	std	Y+8, r24	; 0x08

	while(1)
	{

		SW_enuGetState(&Switches[0],&PressedKey_0);
 f10:	80 e6       	ldi	r24, 0x60	; 96
 f12:	90 e0       	ldi	r25, 0x00	; 0
 f14:	9e 01       	movw	r18, r28
 f16:	28 5f       	subi	r18, 0xF8	; 248
 f18:	3f 4f       	sbci	r19, 0xFF	; 255
 f1a:	b9 01       	movw	r22, r18
 f1c:	0e 94 82 05 	call	0xb04	; 0xb04 <SW_enuGetState>
		switch(PressedKey_0)
 f20:	88 85       	ldd	r24, Y+8	; 0x08
 f22:	e8 2f       	mov	r30, r24
 f24:	f0 e0       	ldi	r31, 0x00	; 0
 f26:	fa 87       	std	Y+10, r31	; 0x0a
 f28:	e9 87       	std	Y+9, r30	; 0x09
 f2a:	29 85       	ldd	r18, Y+9	; 0x09
 f2c:	3a 85       	ldd	r19, Y+10	; 0x0a
 f2e:	21 15       	cp	r18, r1
 f30:	31 05       	cpc	r19, r1
 f32:	31 f0       	breq	.+12     	; 0xf40 <main+0xd0>
 f34:	89 85       	ldd	r24, Y+9	; 0x09
 f36:	9a 85       	ldd	r25, Y+10	; 0x0a
 f38:	81 30       	cpi	r24, 0x01	; 1
 f3a:	91 05       	cpc	r25, r1
 f3c:	39 f0       	breq	.+14     	; 0xf4c <main+0xdc>
 f3e:	e8 cf       	rjmp	.-48     	; 0xf10 <main+0xa0>
		{
		case SW_u8SwPressed:
			LED_enuSetState(&LEDsARR[0],LED_u8OFF);break;
 f40:	89 e6       	ldi	r24, 0x69	; 105
 f42:	90 e0       	ldi	r25, 0x00	; 0
 f44:	60 e0       	ldi	r22, 0x00	; 0
 f46:	0e 94 94 06 	call	0xd28	; 0xd28 <LED_enuSetState>
 f4a:	e2 cf       	rjmp	.-60     	; 0xf10 <main+0xa0>
		case SW_u8SwNPressed:
			LED_enuSetState(&LEDsARR[0],LED_u8ON);break;
 f4c:	89 e6       	ldi	r24, 0x69	; 105
 f4e:	90 e0       	ldi	r25, 0x00	; 0
 f50:	61 e0       	ldi	r22, 0x01	; 1
 f52:	0e 94 94 06 	call	0xd28	; 0xd28 <LED_enuSetState>
 f56:	dc cf       	rjmp	.-72     	; 0xf10 <main+0xa0>

00000f58 <_exit>:
 f58:	f8 94       	cli

00000f5a <__stop_program>:
 f5a:	ff cf       	rjmp	.-2      	; 0xf5a <__stop_program>
