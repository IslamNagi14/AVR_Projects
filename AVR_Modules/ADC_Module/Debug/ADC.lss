
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00002fde  00003072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800066  00800066  00003078  2**0
                  ALLOC
  3 .stab         00003108  00000000  00000000  00003078  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110d  00000000  00000000  00006180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_1>
       8:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_2>
       c:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <main>
      8a:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GEI_enuEnableGINT>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	af e5       	ldi	r26, 0x5F	; 95
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	ef e5       	ldi	r30, 0x5F	; 95
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	80 68       	ori	r24, 0x80	; 128
      ac:	8c 93       	st	X, r24
      ae:	89 81       	ldd	r24, Y+1	; 0x01
      b0:	0f 90       	pop	r0
      b2:	cf 91       	pop	r28
      b4:	df 91       	pop	r29
      b6:	08 95       	ret

000000b8 <GEI_enuDisableGINT>:
	ES_t Local_enuErrorState = ES_NOK;
	SREG|=(1<<7);
	return Local_enuErrorState;
}
ES_t GEI_enuDisableGINT(void)
{
      b8:	df 93       	push	r29
      ba:	cf 93       	push	r28
      bc:	0f 92       	push	r0
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	89 83       	std	Y+1, r24	; 0x01
	SREG|=(1<<7);
      c6:	af e5       	ldi	r26, 0x5F	; 95
      c8:	b0 e0       	ldi	r27, 0x00	; 0
      ca:	ef e5       	ldi	r30, 0x5F	; 95
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	80 68       	ori	r24, 0x80	; 128
      d2:	8c 93       	st	X, r24
	return Local_enuErrorState;
      d4:	89 81       	ldd	r24, Y+1	; 0x01
}
      d6:	0f 90       	pop	r0
      d8:	cf 91       	pop	r28
      da:	df 91       	pop	r29
      dc:	08 95       	ret

000000de <EXTI_enuINIT>:

static volatile void (*EXTI_PvidGLOfun[INT_NUMBERS])(void*) = {NULL,NULL,NULL};
static volatile void *EXTI_PvidGLOPara[INT_NUMBERS] = {NULL,NULL,NULL};

ES_t EXTI_enuINIT(EXTI_t * Copy_PAryOFINT)
{
      de:	df 93       	push	r29
      e0:	cf 93       	push	r28
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	2c 97       	sbiw	r28, 0x0c	; 12
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	f8 94       	cli
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	9c 83       	std	Y+4, r25	; 0x04
      f4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState  = ES_NOK;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_PAryOFINT)
      fa:	8b 81       	ldd	r24, Y+3	; 0x03
      fc:	9c 81       	ldd	r25, Y+4	; 0x04
      fe:	00 97       	sbiw	r24, 0x00	; 0
     100:	09 f4       	brne	.+2      	; 0x104 <EXTI_enuINIT+0x26>
     102:	52 c1       	rjmp	.+676    	; 0x3a8 <EXTI_enuINIT+0x2ca>
	{
		u8 Local_u8Iterator = 0;
     104:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator = 0; INT_NUMBERS >Local_u8Iterator;Local_u8Iterator++)
     106:	19 82       	std	Y+1, r1	; 0x01
     108:	4a c1       	rjmp	.+660    	; 0x39e <EXTI_enuINIT+0x2c0>
		{
			if(Copy_PAryOFINT[Local_u8Iterator].State == ACTIVE)
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	9c 01       	movw	r18, r24
     112:	22 0f       	add	r18, r18
     114:	33 1f       	adc	r19, r19
     116:	8b 81       	ldd	r24, Y+3	; 0x03
     118:	9c 81       	ldd	r25, Y+4	; 0x04
     11a:	fc 01       	movw	r30, r24
     11c:	e2 0f       	add	r30, r18
     11e:	f3 1f       	adc	r31, r19
     120:	80 81       	ld	r24, Z
     122:	8a 30       	cpi	r24, 0x0A	; 10
     124:	09 f0       	breq	.+2      	; 0x128 <EXTI_enuINIT+0x4a>
     126:	38 c1       	rjmp	.+624    	; 0x398 <EXTI_enuINIT+0x2ba>
			{
				switch(Local_u8Iterator)
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	3c 87       	std	Y+12, r19	; 0x0c
     130:	2b 87       	std	Y+11, r18	; 0x0b
     132:	8b 85       	ldd	r24, Y+11	; 0x0b
     134:	9c 85       	ldd	r25, Y+12	; 0x0c
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	91 05       	cpc	r25, r1
     13a:	09 f4       	brne	.+2      	; 0x13e <EXTI_enuINIT+0x60>
     13c:	80 c0       	rjmp	.+256    	; 0x23e <EXTI_enuINIT+0x160>
     13e:	2b 85       	ldd	r18, Y+11	; 0x0b
     140:	3c 85       	ldd	r19, Y+12	; 0x0c
     142:	22 30       	cpi	r18, 0x02	; 2
     144:	31 05       	cpc	r19, r1
     146:	09 f4       	brne	.+2      	; 0x14a <EXTI_enuINIT+0x6c>
     148:	ef c0       	rjmp	.+478    	; 0x328 <EXTI_enuINIT+0x24a>
     14a:	8b 85       	ldd	r24, Y+11	; 0x0b
     14c:	9c 85       	ldd	r25, Y+12	; 0x0c
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	09 f0       	breq	.+2      	; 0x154 <EXTI_enuINIT+0x76>
     152:	20 c1       	rjmp	.+576    	; 0x394 <EXTI_enuINIT+0x2b6>
				{
				case INT0:
					GICR|=(MASK_NUM<<GICR_INT0);
     154:	ab e5       	ldi	r26, 0x5B	; 91
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	eb e5       	ldi	r30, 0x5B	; 91
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	80 64       	ori	r24, 0x40	; 64
     160:	8c 93       	st	X, r24
					switch(Copy_PAryOFINT[Local_u8Iterator].SenseLevel)
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	88 2f       	mov	r24, r24
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	9c 01       	movw	r18, r24
     16a:	22 0f       	add	r18, r18
     16c:	33 1f       	adc	r19, r19
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	9c 81       	ldd	r25, Y+4	; 0x04
     172:	fc 01       	movw	r30, r24
     174:	e2 0f       	add	r30, r18
     176:	f3 1f       	adc	r31, r19
     178:	81 81       	ldd	r24, Z+1	; 0x01
     17a:	28 2f       	mov	r18, r24
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	3a 87       	std	Y+10, r19	; 0x0a
     180:	29 87       	std	Y+9, r18	; 0x09
     182:	89 85       	ldd	r24, Y+9	; 0x09
     184:	9a 85       	ldd	r25, Y+10	; 0x0a
     186:	84 31       	cpi	r24, 0x14	; 20
     188:	91 05       	cpc	r25, r1
     18a:	b1 f0       	breq	.+44     	; 0x1b8 <EXTI_enuINIT+0xda>
     18c:	29 85       	ldd	r18, Y+9	; 0x09
     18e:	3a 85       	ldd	r19, Y+10	; 0x0a
     190:	25 31       	cpi	r18, 0x15	; 21
     192:	31 05       	cpc	r19, r1
     194:	34 f4       	brge	.+12     	; 0x1a2 <EXTI_enuINIT+0xc4>
     196:	89 85       	ldd	r24, Y+9	; 0x09
     198:	9a 85       	ldd	r25, Y+10	; 0x0a
     19a:	8c 30       	cpi	r24, 0x0C	; 12
     19c:	91 05       	cpc	r25, r1
     19e:	e1 f1       	breq	.+120    	; 0x218 <EXTI_enuINIT+0x13a>
     1a0:	4b c0       	rjmp	.+150    	; 0x238 <EXTI_enuINIT+0x15a>
     1a2:	29 85       	ldd	r18, Y+9	; 0x09
     1a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     1a6:	28 33       	cpi	r18, 0x38	; 56
     1a8:	31 05       	cpc	r19, r1
     1aa:	31 f1       	breq	.+76     	; 0x1f8 <EXTI_enuINIT+0x11a>
     1ac:	89 85       	ldd	r24, Y+9	; 0x09
     1ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b0:	89 35       	cpi	r24, 0x59	; 89
     1b2:	91 05       	cpc	r25, r1
     1b4:	89 f0       	breq	.+34     	; 0x1d8 <EXTI_enuINIT+0xfa>
     1b6:	40 c0       	rjmp	.+128    	; 0x238 <EXTI_enuINIT+0x15a>
					{

					case LOWLEVEL:
						MCUCR&=~(MASK_NUM<<ISC00);
     1b8:	a5 e5       	ldi	r26, 0x55	; 85
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	e5 e5       	ldi	r30, 0x55	; 85
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	8e 7f       	andi	r24, 0xFE	; 254
     1c4:	8c 93       	st	X, r24
						MCUCR&=~(MASK_NUM<<ISC01);
     1c6:	a5 e5       	ldi	r26, 0x55	; 85
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e5 e5       	ldi	r30, 0x55	; 85
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	8d 7f       	andi	r24, 0xFD	; 253
     1d2:	8c 93       	st	X, r24
						Local_enuErrorState  = ES_OK;break;
     1d4:	1a 82       	std	Y+2, r1	; 0x02
     1d6:	e0 c0       	rjmp	.+448    	; 0x398 <EXTI_enuINIT+0x2ba>
					case ANY_LOGIC_CHANGE:
						MCUCR|=(MASK_NUM<<ISC00);
     1d8:	a5 e5       	ldi	r26, 0x55	; 85
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e5 e5       	ldi	r30, 0x55	; 85
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	81 60       	ori	r24, 0x01	; 1
     1e4:	8c 93       	st	X, r24
						MCUCR&=~(MASK_NUM<<ISC01);
     1e6:	a5 e5       	ldi	r26, 0x55	; 85
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	e5 e5       	ldi	r30, 0x55	; 85
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	8d 7f       	andi	r24, 0xFD	; 253
     1f2:	8c 93       	st	X, r24
						Local_enuErrorState  = ES_OK;break;
     1f4:	1a 82       	std	Y+2, r1	; 0x02
     1f6:	d0 c0       	rjmp	.+416    	; 0x398 <EXTI_enuINIT+0x2ba>
					case FALLINGEDGE:
						MCUCR&=~(MASK_NUM<<ISC00);
     1f8:	a5 e5       	ldi	r26, 0x55	; 85
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e5 e5       	ldi	r30, 0x55	; 85
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8e 7f       	andi	r24, 0xFE	; 254
     204:	8c 93       	st	X, r24
						MCUCR|=(MASK_NUM<<ISC01);
     206:	a5 e5       	ldi	r26, 0x55	; 85
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e5 e5       	ldi	r30, 0x55	; 85
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	82 60       	ori	r24, 0x02	; 2
     212:	8c 93       	st	X, r24
						Local_enuErrorState  = ES_OK;break;
     214:	1a 82       	std	Y+2, r1	; 0x02
     216:	c0 c0       	rjmp	.+384    	; 0x398 <EXTI_enuINIT+0x2ba>
					case RISINGEDGE:
						MCUCR|=(MASK_NUM<<ISC00);
     218:	a5 e5       	ldi	r26, 0x55	; 85
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e5 e5       	ldi	r30, 0x55	; 85
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	81 60       	ori	r24, 0x01	; 1
     224:	8c 93       	st	X, r24
						MCUCR|=(MASK_NUM<<ISC01);
     226:	a5 e5       	ldi	r26, 0x55	; 85
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	e5 e5       	ldi	r30, 0x55	; 85
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	82 60       	ori	r24, 0x02	; 2
     232:	8c 93       	st	X, r24
						Local_enuErrorState  = ES_OK;break;
     234:	1a 82       	std	Y+2, r1	; 0x02
     236:	b0 c0       	rjmp	.+352    	; 0x398 <EXTI_enuINIT+0x2ba>
					default:
						Local_enuErrorState  = ES_Out_Of_Range;break;
     238:	83 e0       	ldi	r24, 0x03	; 3
     23a:	8a 83       	std	Y+2, r24	; 0x02
     23c:	ad c0       	rjmp	.+346    	; 0x398 <EXTI_enuINIT+0x2ba>

					}
					break;
					case INT1:
						GICR|=(MASK_NUM<<GICR_INT1);
     23e:	ab e5       	ldi	r26, 0x5B	; 91
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	eb e5       	ldi	r30, 0x5B	; 91
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	80 68       	ori	r24, 0x80	; 128
     24a:	8c 93       	st	X, r24
						switch(Copy_PAryOFINT[Local_u8Iterator].SenseLevel)
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	88 2f       	mov	r24, r24
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9c 01       	movw	r18, r24
     254:	22 0f       	add	r18, r18
     256:	33 1f       	adc	r19, r19
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	fc 01       	movw	r30, r24
     25e:	e2 0f       	add	r30, r18
     260:	f3 1f       	adc	r31, r19
     262:	81 81       	ldd	r24, Z+1	; 0x01
     264:	28 2f       	mov	r18, r24
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	38 87       	std	Y+8, r19	; 0x08
     26a:	2f 83       	std	Y+7, r18	; 0x07
     26c:	8f 81       	ldd	r24, Y+7	; 0x07
     26e:	98 85       	ldd	r25, Y+8	; 0x08
     270:	84 31       	cpi	r24, 0x14	; 20
     272:	91 05       	cpc	r25, r1
     274:	b1 f0       	breq	.+44     	; 0x2a2 <EXTI_enuINIT+0x1c4>
     276:	2f 81       	ldd	r18, Y+7	; 0x07
     278:	38 85       	ldd	r19, Y+8	; 0x08
     27a:	25 31       	cpi	r18, 0x15	; 21
     27c:	31 05       	cpc	r19, r1
     27e:	34 f4       	brge	.+12     	; 0x28c <EXTI_enuINIT+0x1ae>
     280:	8f 81       	ldd	r24, Y+7	; 0x07
     282:	98 85       	ldd	r25, Y+8	; 0x08
     284:	8c 30       	cpi	r24, 0x0C	; 12
     286:	91 05       	cpc	r25, r1
     288:	e1 f1       	breq	.+120    	; 0x302 <EXTI_enuINIT+0x224>
     28a:	4b c0       	rjmp	.+150    	; 0x322 <EXTI_enuINIT+0x244>
     28c:	2f 81       	ldd	r18, Y+7	; 0x07
     28e:	38 85       	ldd	r19, Y+8	; 0x08
     290:	28 33       	cpi	r18, 0x38	; 56
     292:	31 05       	cpc	r19, r1
     294:	31 f1       	breq	.+76     	; 0x2e2 <EXTI_enuINIT+0x204>
     296:	8f 81       	ldd	r24, Y+7	; 0x07
     298:	98 85       	ldd	r25, Y+8	; 0x08
     29a:	89 35       	cpi	r24, 0x59	; 89
     29c:	91 05       	cpc	r25, r1
     29e:	89 f0       	breq	.+34     	; 0x2c2 <EXTI_enuINIT+0x1e4>
     2a0:	40 c0       	rjmp	.+128    	; 0x322 <EXTI_enuINIT+0x244>
						{

						case LOWLEVEL:
							MCUCR&=~(MASK_NUM<<ISC10);
     2a2:	a5 e5       	ldi	r26, 0x55	; 85
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e5 e5       	ldi	r30, 0x55	; 85
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8b 7f       	andi	r24, 0xFB	; 251
     2ae:	8c 93       	st	X, r24
							MCUCR&=~(MASK_NUM<<ISC11);
     2b0:	a5 e5       	ldi	r26, 0x55	; 85
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	e5 e5       	ldi	r30, 0x55	; 85
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	87 7f       	andi	r24, 0xF7	; 247
     2bc:	8c 93       	st	X, r24
							Local_enuErrorState  = ES_OK;break;
     2be:	1a 82       	std	Y+2, r1	; 0x02
     2c0:	6b c0       	rjmp	.+214    	; 0x398 <EXTI_enuINIT+0x2ba>
						case ANY_LOGIC_CHANGE:
							MCUCR|=(MASK_NUM<<ISC10);
     2c2:	a5 e5       	ldi	r26, 0x55	; 85
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e5 e5       	ldi	r30, 0x55	; 85
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	84 60       	ori	r24, 0x04	; 4
     2ce:	8c 93       	st	X, r24
							MCUCR&=~(MASK_NUM<<ISC11);
     2d0:	a5 e5       	ldi	r26, 0x55	; 85
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e5 e5       	ldi	r30, 0x55	; 85
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	87 7f       	andi	r24, 0xF7	; 247
     2dc:	8c 93       	st	X, r24
							Local_enuErrorState  = ES_OK;break;
     2de:	1a 82       	std	Y+2, r1	; 0x02
     2e0:	5b c0       	rjmp	.+182    	; 0x398 <EXTI_enuINIT+0x2ba>
						case FALLINGEDGE:
							MCUCR&=~(MASK_NUM<<ISC10);
     2e2:	a5 e5       	ldi	r26, 0x55	; 85
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	e5 e5       	ldi	r30, 0x55	; 85
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8b 7f       	andi	r24, 0xFB	; 251
     2ee:	8c 93       	st	X, r24
							MCUCR|=(MASK_NUM<<ISC11);
     2f0:	a5 e5       	ldi	r26, 0x55	; 85
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	e5 e5       	ldi	r30, 0x55	; 85
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	88 60       	ori	r24, 0x08	; 8
     2fc:	8c 93       	st	X, r24
							Local_enuErrorState  = ES_OK;break;
     2fe:	1a 82       	std	Y+2, r1	; 0x02
     300:	4b c0       	rjmp	.+150    	; 0x398 <EXTI_enuINIT+0x2ba>
						case RISINGEDGE:
							MCUCR|=(MASK_NUM<<ISC10);
     302:	a5 e5       	ldi	r26, 0x55	; 85
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	e5 e5       	ldi	r30, 0x55	; 85
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	84 60       	ori	r24, 0x04	; 4
     30e:	8c 93       	st	X, r24
							MCUCR|=(MASK_NUM<<ISC11);
     310:	a5 e5       	ldi	r26, 0x55	; 85
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	e5 e5       	ldi	r30, 0x55	; 85
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	88 60       	ori	r24, 0x08	; 8
     31c:	8c 93       	st	X, r24
							Local_enuErrorState  = ES_OK;break;
     31e:	1a 82       	std	Y+2, r1	; 0x02
     320:	3b c0       	rjmp	.+118    	; 0x398 <EXTI_enuINIT+0x2ba>
						default:
							Local_enuErrorState  = ES_Out_Of_Range;break;
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	8a 83       	std	Y+2, r24	; 0x02
     326:	38 c0       	rjmp	.+112    	; 0x398 <EXTI_enuINIT+0x2ba>
						}
						break;
						case INT2:
							GICR|=(MASK_NUM<<GICR_INT2);
     328:	ab e5       	ldi	r26, 0x5B	; 91
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	eb e5       	ldi	r30, 0x5B	; 91
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	80 62       	ori	r24, 0x20	; 32
     334:	8c 93       	st	X, r24
							switch(Copy_PAryOFINT[Local_u8Iterator].SenseLevel)
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9c 01       	movw	r18, r24
     33e:	22 0f       	add	r18, r18
     340:	33 1f       	adc	r19, r19
     342:	8b 81       	ldd	r24, Y+3	; 0x03
     344:	9c 81       	ldd	r25, Y+4	; 0x04
     346:	fc 01       	movw	r30, r24
     348:	e2 0f       	add	r30, r18
     34a:	f3 1f       	adc	r31, r19
     34c:	81 81       	ldd	r24, Z+1	; 0x01
     34e:	28 2f       	mov	r18, r24
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	3e 83       	std	Y+6, r19	; 0x06
     354:	2d 83       	std	Y+5, r18	; 0x05
     356:	8d 81       	ldd	r24, Y+5	; 0x05
     358:	9e 81       	ldd	r25, Y+6	; 0x06
     35a:	8c 30       	cpi	r24, 0x0C	; 12
     35c:	91 05       	cpc	r25, r1
     35e:	71 f0       	breq	.+28     	; 0x37c <EXTI_enuINIT+0x29e>
     360:	2d 81       	ldd	r18, Y+5	; 0x05
     362:	3e 81       	ldd	r19, Y+6	; 0x06
     364:	28 33       	cpi	r18, 0x38	; 56
     366:	31 05       	cpc	r19, r1
     368:	91 f4       	brne	.+36     	; 0x38e <EXTI_enuINIT+0x2b0>
							{
							case FALLINGEDGE:
								MCUCSR&=~(MASK_NUM<<ISC2);
     36a:	a4 e5       	ldi	r26, 0x54	; 84
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	e4 e5       	ldi	r30, 0x54	; 84
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	8f 7b       	andi	r24, 0xBF	; 191
     376:	8c 93       	st	X, r24
								Local_enuErrorState  = ES_OK;break;
     378:	1a 82       	std	Y+2, r1	; 0x02
     37a:	0e c0       	rjmp	.+28     	; 0x398 <EXTI_enuINIT+0x2ba>
							case RISINGEDGE:
								MCUCSR|=(MASK_NUM<<ISC2);
     37c:	a4 e5       	ldi	r26, 0x54	; 84
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	e4 e5       	ldi	r30, 0x54	; 84
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	80 64       	ori	r24, 0x40	; 64
     388:	8c 93       	st	X, r24
								Local_enuErrorState  = ES_OK;break;
     38a:	1a 82       	std	Y+2, r1	; 0x02
     38c:	05 c0       	rjmp	.+10     	; 0x398 <EXTI_enuINIT+0x2ba>
							default:
								Local_enuErrorState  = ES_Out_Of_Range;break;
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	8a 83       	std	Y+2, r24	; 0x02
     392:	02 c0       	rjmp	.+4      	; 0x398 <EXTI_enuINIT+0x2ba>
							}
							break;
							default:
								Local_enuErrorState  = ES_Out_Of_Range;break;
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK;

	if(Copy_PAryOFINT)
	{
		u8 Local_u8Iterator = 0;
		for(Local_u8Iterator = 0; INT_NUMBERS >Local_u8Iterator;Local_u8Iterator++)
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	8f 5f       	subi	r24, 0xFF	; 255
     39c:	89 83       	std	Y+1, r24	; 0x01
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	83 30       	cpi	r24, 0x03	; 3
     3a2:	08 f4       	brcc	.+2      	; 0x3a6 <EXTI_enuINIT+0x2c8>
     3a4:	b2 ce       	rjmp	.-668    	; 0x10a <EXTI_enuINIT+0x2c>
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <EXTI_enuINIT+0x2ce>
			}
		}
	}
	else
	{
		Local_enuErrorState  = ES_NULLPOINTER;
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState ;
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3ae:	2c 96       	adiw	r28, 0x0c	; 12
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	cf 91       	pop	r28
     3bc:	df 91       	pop	r29
     3be:	08 95       	ret

000003c0 <EXTI_enuSetSenseLevel>:
ES_t EXTI_enuSetSenseLevel(u8 Copy_u8INT_ID,u8 Copy_u8State)
{
     3c0:	df 93       	push	r29
     3c2:	cf 93       	push	r28
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	2b 97       	sbiw	r28, 0x0b	; 11
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	8a 83       	std	Y+2, r24	; 0x02
     3d6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8INT_ID)
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	3b 87       	std	Y+11, r19	; 0x0b
     3e4:	2a 87       	std	Y+10, r18	; 0x0a
     3e6:	8a 85       	ldd	r24, Y+10	; 0x0a
     3e8:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	91 05       	cpc	r25, r1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <EXTI_enuSetSenseLevel+0x32>
     3f0:	75 c0       	rjmp	.+234    	; 0x4dc <EXTI_enuSetSenseLevel+0x11c>
     3f2:	2a 85       	ldd	r18, Y+10	; 0x0a
     3f4:	3b 85       	ldd	r19, Y+11	; 0x0b
     3f6:	22 30       	cpi	r18, 0x02	; 2
     3f8:	31 05       	cpc	r19, r1
     3fa:	09 f4       	brne	.+2      	; 0x3fe <EXTI_enuSetSenseLevel+0x3e>
     3fc:	d9 c0       	rjmp	.+434    	; 0x5b0 <EXTI_enuSetSenseLevel+0x1f0>
     3fe:	8a 85       	ldd	r24, Y+10	; 0x0a
     400:	9b 85       	ldd	r25, Y+11	; 0x0b
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	09 f0       	breq	.+2      	; 0x408 <EXTI_enuSetSenseLevel+0x48>
     406:	ff c0       	rjmp	.+510    	; 0x606 <EXTI_enuSetSenseLevel+0x246>
	{
	case INT0:
		GICR|=(MASK_NUM<<GICR_INT0);
     408:	ab e5       	ldi	r26, 0x5B	; 91
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	eb e5       	ldi	r30, 0x5B	; 91
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 64       	ori	r24, 0x40	; 64
     414:	8c 93       	st	X, r24
		switch(Copy_u8State)
     416:	8b 81       	ldd	r24, Y+3	; 0x03
     418:	28 2f       	mov	r18, r24
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	39 87       	std	Y+9, r19	; 0x09
     41e:	28 87       	std	Y+8, r18	; 0x08
     420:	88 85       	ldd	r24, Y+8	; 0x08
     422:	99 85       	ldd	r25, Y+9	; 0x09
     424:	84 31       	cpi	r24, 0x14	; 20
     426:	91 05       	cpc	r25, r1
     428:	b1 f0       	breq	.+44     	; 0x456 <EXTI_enuSetSenseLevel+0x96>
     42a:	28 85       	ldd	r18, Y+8	; 0x08
     42c:	39 85       	ldd	r19, Y+9	; 0x09
     42e:	25 31       	cpi	r18, 0x15	; 21
     430:	31 05       	cpc	r19, r1
     432:	34 f4       	brge	.+12     	; 0x440 <EXTI_enuSetSenseLevel+0x80>
     434:	88 85       	ldd	r24, Y+8	; 0x08
     436:	99 85       	ldd	r25, Y+9	; 0x09
     438:	8c 30       	cpi	r24, 0x0C	; 12
     43a:	91 05       	cpc	r25, r1
     43c:	e1 f1       	breq	.+120    	; 0x4b6 <EXTI_enuSetSenseLevel+0xf6>
     43e:	4b c0       	rjmp	.+150    	; 0x4d6 <EXTI_enuSetSenseLevel+0x116>
     440:	28 85       	ldd	r18, Y+8	; 0x08
     442:	39 85       	ldd	r19, Y+9	; 0x09
     444:	28 33       	cpi	r18, 0x38	; 56
     446:	31 05       	cpc	r19, r1
     448:	31 f1       	breq	.+76     	; 0x496 <EXTI_enuSetSenseLevel+0xd6>
     44a:	88 85       	ldd	r24, Y+8	; 0x08
     44c:	99 85       	ldd	r25, Y+9	; 0x09
     44e:	89 35       	cpi	r24, 0x59	; 89
     450:	91 05       	cpc	r25, r1
     452:	89 f0       	breq	.+34     	; 0x476 <EXTI_enuSetSenseLevel+0xb6>
     454:	40 c0       	rjmp	.+128    	; 0x4d6 <EXTI_enuSetSenseLevel+0x116>
		{
		case LOWLEVEL:
			MCUCR&=~(MASK_NUM<<ISC00);
     456:	a5 e5       	ldi	r26, 0x55	; 85
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	e5 e5       	ldi	r30, 0x55	; 85
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	8e 7f       	andi	r24, 0xFE	; 254
     462:	8c 93       	st	X, r24
			MCUCR&=~(MASK_NUM<<ISC01);
     464:	a5 e5       	ldi	r26, 0x55	; 85
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	e5 e5       	ldi	r30, 0x55	; 85
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	8d 7f       	andi	r24, 0xFD	; 253
     470:	8c 93       	st	X, r24
			Local_enuErrorState  = ES_OK;break;
     472:	19 82       	std	Y+1, r1	; 0x01
     474:	ca c0       	rjmp	.+404    	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
		case ANY_LOGIC_CHANGE:
			MCUCR|=(MASK_NUM<<ISC00);
     476:	a5 e5       	ldi	r26, 0x55	; 85
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	e5 e5       	ldi	r30, 0x55	; 85
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	81 60       	ori	r24, 0x01	; 1
     482:	8c 93       	st	X, r24
			MCUCR&=~(MASK_NUM<<ISC01);
     484:	a5 e5       	ldi	r26, 0x55	; 85
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	e5 e5       	ldi	r30, 0x55	; 85
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	8d 7f       	andi	r24, 0xFD	; 253
     490:	8c 93       	st	X, r24
			Local_enuErrorState  = ES_OK;break;
     492:	19 82       	std	Y+1, r1	; 0x01
     494:	ba c0       	rjmp	.+372    	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
		case FALLINGEDGE:
			MCUCR&=~(MASK_NUM<<ISC00);
     496:	a5 e5       	ldi	r26, 0x55	; 85
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e5 e5       	ldi	r30, 0x55	; 85
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8e 7f       	andi	r24, 0xFE	; 254
     4a2:	8c 93       	st	X, r24
			MCUCR|=(MASK_NUM<<ISC01);
     4a4:	a5 e5       	ldi	r26, 0x55	; 85
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e5 e5       	ldi	r30, 0x55	; 85
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	8c 93       	st	X, r24
			Local_enuErrorState  = ES_OK;break;
     4b2:	19 82       	std	Y+1, r1	; 0x01
     4b4:	aa c0       	rjmp	.+340    	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
		case RISINGEDGE:
			MCUCR|=(MASK_NUM<<ISC00);
     4b6:	a5 e5       	ldi	r26, 0x55	; 85
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e5 e5       	ldi	r30, 0x55	; 85
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	8c 93       	st	X, r24
			MCUCR|=(MASK_NUM<<ISC01);
     4c4:	a5 e5       	ldi	r26, 0x55	; 85
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e5 e5       	ldi	r30, 0x55	; 85
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	82 60       	ori	r24, 0x02	; 2
     4d0:	8c 93       	st	X, r24
			Local_enuErrorState  = ES_OK;break;
     4d2:	19 82       	std	Y+1, r1	; 0x01
     4d4:	9a c0       	rjmp	.+308    	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
		default:
			Local_enuErrorState  = ES_Out_Of_Range;break;
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	89 83       	std	Y+1, r24	; 0x01
     4da:	97 c0       	rjmp	.+302    	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
		}
		break;
		case INT1:
			GICR|=(MASK_NUM<<GICR_INT1);
     4dc:	ab e5       	ldi	r26, 0x5B	; 91
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	eb e5       	ldi	r30, 0x5B	; 91
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	80 68       	ori	r24, 0x80	; 128
     4e8:	8c 93       	st	X, r24
			switch(Copy_u8State)
     4ea:	8b 81       	ldd	r24, Y+3	; 0x03
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	3f 83       	std	Y+7, r19	; 0x07
     4f2:	2e 83       	std	Y+6, r18	; 0x06
     4f4:	8e 81       	ldd	r24, Y+6	; 0x06
     4f6:	9f 81       	ldd	r25, Y+7	; 0x07
     4f8:	84 31       	cpi	r24, 0x14	; 20
     4fa:	91 05       	cpc	r25, r1
     4fc:	b1 f0       	breq	.+44     	; 0x52a <EXTI_enuSetSenseLevel+0x16a>
     4fe:	2e 81       	ldd	r18, Y+6	; 0x06
     500:	3f 81       	ldd	r19, Y+7	; 0x07
     502:	25 31       	cpi	r18, 0x15	; 21
     504:	31 05       	cpc	r19, r1
     506:	34 f4       	brge	.+12     	; 0x514 <EXTI_enuSetSenseLevel+0x154>
     508:	8e 81       	ldd	r24, Y+6	; 0x06
     50a:	9f 81       	ldd	r25, Y+7	; 0x07
     50c:	8c 30       	cpi	r24, 0x0C	; 12
     50e:	91 05       	cpc	r25, r1
     510:	e1 f1       	breq	.+120    	; 0x58a <EXTI_enuSetSenseLevel+0x1ca>
     512:	4b c0       	rjmp	.+150    	; 0x5aa <EXTI_enuSetSenseLevel+0x1ea>
     514:	2e 81       	ldd	r18, Y+6	; 0x06
     516:	3f 81       	ldd	r19, Y+7	; 0x07
     518:	28 33       	cpi	r18, 0x38	; 56
     51a:	31 05       	cpc	r19, r1
     51c:	31 f1       	breq	.+76     	; 0x56a <EXTI_enuSetSenseLevel+0x1aa>
     51e:	8e 81       	ldd	r24, Y+6	; 0x06
     520:	9f 81       	ldd	r25, Y+7	; 0x07
     522:	89 35       	cpi	r24, 0x59	; 89
     524:	91 05       	cpc	r25, r1
     526:	89 f0       	breq	.+34     	; 0x54a <EXTI_enuSetSenseLevel+0x18a>
     528:	40 c0       	rjmp	.+128    	; 0x5aa <EXTI_enuSetSenseLevel+0x1ea>
			{
			case LOWLEVEL:
				MCUCR&=~(MASK_NUM<<ISC10);
     52a:	a5 e5       	ldi	r26, 0x55	; 85
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	e5 e5       	ldi	r30, 0x55	; 85
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	8b 7f       	andi	r24, 0xFB	; 251
     536:	8c 93       	st	X, r24
				MCUCR&=~(MASK_NUM<<ISC11);
     538:	a5 e5       	ldi	r26, 0x55	; 85
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e5 e5       	ldi	r30, 0x55	; 85
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	87 7f       	andi	r24, 0xF7	; 247
     544:	8c 93       	st	X, r24
				Local_enuErrorState  = ES_OK;break;
     546:	19 82       	std	Y+1, r1	; 0x01
     548:	60 c0       	rjmp	.+192    	; 0x60a <EXTI_enuSetSenseLevel+0x24a>

			case ANY_LOGIC_CHANGE:
				MCUCR|=(MASK_NUM<<ISC10);
     54a:	a5 e5       	ldi	r26, 0x55	; 85
     54c:	b0 e0       	ldi	r27, 0x00	; 0
     54e:	e5 e5       	ldi	r30, 0x55	; 85
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	84 60       	ori	r24, 0x04	; 4
     556:	8c 93       	st	X, r24
				MCUCR&=~(MASK_NUM<<ISC11);
     558:	a5 e5       	ldi	r26, 0x55	; 85
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	e5 e5       	ldi	r30, 0x55	; 85
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	87 7f       	andi	r24, 0xF7	; 247
     564:	8c 93       	st	X, r24
				Local_enuErrorState  = ES_OK;break;
     566:	19 82       	std	Y+1, r1	; 0x01
     568:	50 c0       	rjmp	.+160    	; 0x60a <EXTI_enuSetSenseLevel+0x24a>

			case FALLINGEDGE:
				MCUCR&=~(MASK_NUM<<ISC10);
     56a:	a5 e5       	ldi	r26, 0x55	; 85
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	e5 e5       	ldi	r30, 0x55	; 85
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	8b 7f       	andi	r24, 0xFB	; 251
     576:	8c 93       	st	X, r24
				MCUCR|=(MASK_NUM<<ISC11);
     578:	a5 e5       	ldi	r26, 0x55	; 85
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	e5 e5       	ldi	r30, 0x55	; 85
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	88 60       	ori	r24, 0x08	; 8
     584:	8c 93       	st	X, r24
				Local_enuErrorState  = ES_OK;break;
     586:	19 82       	std	Y+1, r1	; 0x01
     588:	40 c0       	rjmp	.+128    	; 0x60a <EXTI_enuSetSenseLevel+0x24a>

			case RISINGEDGE:
				MCUCR|=(MASK_NUM<<ISC10);
     58a:	a5 e5       	ldi	r26, 0x55	; 85
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	e5 e5       	ldi	r30, 0x55	; 85
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	84 60       	ori	r24, 0x04	; 4
     596:	8c 93       	st	X, r24
				MCUCR|=(MASK_NUM<<ISC11);
     598:	a5 e5       	ldi	r26, 0x55	; 85
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	e5 e5       	ldi	r30, 0x55	; 85
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	88 60       	ori	r24, 0x08	; 8
     5a4:	8c 93       	st	X, r24
				Local_enuErrorState  = ES_OK;break;
     5a6:	19 82       	std	Y+1, r1	; 0x01
     5a8:	30 c0       	rjmp	.+96     	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
			default:
				Local_enuErrorState  = ES_Out_Of_Range;break;
     5aa:	83 e0       	ldi	r24, 0x03	; 3
     5ac:	89 83       	std	Y+1, r24	; 0x01
     5ae:	2d c0       	rjmp	.+90     	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
			}
			break;
			case INT2:
				GICR|=(MASK_NUM<<GICR_INT2);
     5b0:	ab e5       	ldi	r26, 0x5B	; 91
     5b2:	b0 e0       	ldi	r27, 0x00	; 0
     5b4:	eb e5       	ldi	r30, 0x5B	; 91
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	80 62       	ori	r24, 0x20	; 32
     5bc:	8c 93       	st	X, r24
				switch(Copy_u8State)
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	28 2f       	mov	r18, r24
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	3d 83       	std	Y+5, r19	; 0x05
     5c6:	2c 83       	std	Y+4, r18	; 0x04
     5c8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ca:	9d 81       	ldd	r25, Y+5	; 0x05
     5cc:	8c 30       	cpi	r24, 0x0C	; 12
     5ce:	91 05       	cpc	r25, r1
     5d0:	71 f0       	breq	.+28     	; 0x5ee <EXTI_enuSetSenseLevel+0x22e>
     5d2:	2c 81       	ldd	r18, Y+4	; 0x04
     5d4:	3d 81       	ldd	r19, Y+5	; 0x05
     5d6:	28 33       	cpi	r18, 0x38	; 56
     5d8:	31 05       	cpc	r19, r1
     5da:	91 f4       	brne	.+36     	; 0x600 <EXTI_enuSetSenseLevel+0x240>
				{
				case FALLINGEDGE:
					MCUCSR&=~(MASK_NUM<<ISC2);Local_enuErrorState  = ES_OK;break;
     5dc:	a4 e5       	ldi	r26, 0x54	; 84
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	e4 e5       	ldi	r30, 0x54	; 84
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 7b       	andi	r24, 0xBF	; 191
     5e8:	8c 93       	st	X, r24
     5ea:	19 82       	std	Y+1, r1	; 0x01
     5ec:	0e c0       	rjmp	.+28     	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
				case RISINGEDGE:
					MCUCSR|=(MASK_NUM<<ISC2);Local_enuErrorState  = ES_OK;break;
     5ee:	a4 e5       	ldi	r26, 0x54	; 84
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	e4 e5       	ldi	r30, 0x54	; 84
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	80 64       	ori	r24, 0x40	; 64
     5fa:	8c 93       	st	X, r24
     5fc:	19 82       	std	Y+1, r1	; 0x01
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
				default:
					Local_enuErrorState  = ES_Out_Of_Range;break;
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	02 c0       	rjmp	.+4      	; 0x60a <EXTI_enuSetSenseLevel+0x24a>
				}
				break;
				default:
					Local_enuErrorState  = ES_Out_Of_Range;break;
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState ;
     60a:	89 81       	ldd	r24, Y+1	; 0x01
}
     60c:	2b 96       	adiw	r28, 0x0b	; 11
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <EXTI_enuEnableEXINT>:
ES_t EXTI_enuEnableEXINT(u8 Copy_u8INT_ID)
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	00 d0       	rcall	.+0      	; 0x624 <EXTI_enuEnableEXINT+0x6>
     624:	00 d0       	rcall	.+0      	; 0x626 <EXTI_enuEnableEXINT+0x8>
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8INT_ID)
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	28 2f       	mov	r18, r24
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	3c 83       	std	Y+4, r19	; 0x04
     638:	2b 83       	std	Y+3, r18	; 0x03
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	91 05       	cpc	r25, r1
     642:	91 f0       	breq	.+36     	; 0x668 <EXTI_enuEnableEXINT+0x4a>
     644:	2b 81       	ldd	r18, Y+3	; 0x03
     646:	3c 81       	ldd	r19, Y+4	; 0x04
     648:	22 30       	cpi	r18, 0x02	; 2
     64a:	31 05       	cpc	r19, r1
     64c:	b1 f0       	breq	.+44     	; 0x67a <EXTI_enuEnableEXINT+0x5c>
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	9c 81       	ldd	r25, Y+4	; 0x04
     652:	00 97       	sbiw	r24, 0x00	; 0
     654:	d9 f4       	brne	.+54     	; 0x68c <EXTI_enuEnableEXINT+0x6e>
	{
	case INT0:
		GICR|=(MASK_NUM<<GICR_INT0);Local_enuErrorState  = ES_OK;break;
     656:	ab e5       	ldi	r26, 0x5B	; 91
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	eb e5       	ldi	r30, 0x5B	; 91
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	80 64       	ori	r24, 0x40	; 64
     662:	8c 93       	st	X, r24
     664:	19 82       	std	Y+1, r1	; 0x01
     666:	14 c0       	rjmp	.+40     	; 0x690 <EXTI_enuEnableEXINT+0x72>
	case INT1:
		GICR|=(MASK_NUM<<GICR_INT1);Local_enuErrorState  = ES_OK;break;
     668:	ab e5       	ldi	r26, 0x5B	; 91
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	eb e5       	ldi	r30, 0x5B	; 91
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	80 68       	ori	r24, 0x80	; 128
     674:	8c 93       	st	X, r24
     676:	19 82       	std	Y+1, r1	; 0x01
     678:	0b c0       	rjmp	.+22     	; 0x690 <EXTI_enuEnableEXINT+0x72>
	case INT2:
		GICR|=(MASK_NUM<<GICR_INT2);Local_enuErrorState  = ES_OK;break;
     67a:	ab e5       	ldi	r26, 0x5B	; 91
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	eb e5       	ldi	r30, 0x5B	; 91
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	80 62       	ori	r24, 0x20	; 32
     686:	8c 93       	st	X, r24
     688:	19 82       	std	Y+1, r1	; 0x01
     68a:	02 c0       	rjmp	.+4      	; 0x690 <EXTI_enuEnableEXINT+0x72>
	default:
		Local_enuErrorState  = ES_Out_Of_Range;break;
     68c:	83 e0       	ldi	r24, 0x03	; 3
     68e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     690:	89 81       	ldd	r24, Y+1	; 0x01
}
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	cf 91       	pop	r28
     69c:	df 91       	pop	r29
     69e:	08 95       	ret

000006a0 <EXTI_enuDisableEXINT>:
ES_t EXTI_enuDisableEXINT(u8 Copy_u8INT_ID)
{
     6a0:	df 93       	push	r29
     6a2:	cf 93       	push	r28
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <EXTI_enuDisableEXINT+0x6>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <EXTI_enuDisableEXINT+0x8>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8INT_ID)
     6b2:	8a 81       	ldd	r24, Y+2	; 0x02
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	3c 83       	std	Y+4, r19	; 0x04
     6ba:	2b 83       	std	Y+3, r18	; 0x03
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	91 05       	cpc	r25, r1
     6c4:	91 f0       	breq	.+36     	; 0x6ea <EXTI_enuDisableEXINT+0x4a>
     6c6:	2b 81       	ldd	r18, Y+3	; 0x03
     6c8:	3c 81       	ldd	r19, Y+4	; 0x04
     6ca:	22 30       	cpi	r18, 0x02	; 2
     6cc:	31 05       	cpc	r19, r1
     6ce:	b1 f0       	breq	.+44     	; 0x6fc <EXTI_enuDisableEXINT+0x5c>
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	9c 81       	ldd	r25, Y+4	; 0x04
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	d9 f4       	brne	.+54     	; 0x70e <EXTI_enuDisableEXINT+0x6e>
	{
	case INT0:
		GICR&=~(MASK_NUM<<GICR_INT0);Local_enuErrorState  = ES_OK;break;
     6d8:	ab e5       	ldi	r26, 0x5B	; 91
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	eb e5       	ldi	r30, 0x5B	; 91
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	8f 7b       	andi	r24, 0xBF	; 191
     6e4:	8c 93       	st	X, r24
     6e6:	19 82       	std	Y+1, r1	; 0x01
     6e8:	14 c0       	rjmp	.+40     	; 0x712 <EXTI_enuDisableEXINT+0x72>
	case INT1:
		GICR&=~(MASK_NUM<<GICR_INT1);Local_enuErrorState  = ES_OK;break;
     6ea:	ab e5       	ldi	r26, 0x5B	; 91
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	eb e5       	ldi	r30, 0x5B	; 91
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	8f 77       	andi	r24, 0x7F	; 127
     6f6:	8c 93       	st	X, r24
     6f8:	19 82       	std	Y+1, r1	; 0x01
     6fa:	0b c0       	rjmp	.+22     	; 0x712 <EXTI_enuDisableEXINT+0x72>
	case INT2:
		GICR&=~(MASK_NUM<<GICR_INT2);Local_enuErrorState  = ES_OK;break;
     6fc:	ab e5       	ldi	r26, 0x5B	; 91
     6fe:	b0 e0       	ldi	r27, 0x00	; 0
     700:	eb e5       	ldi	r30, 0x5B	; 91
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	8f 7d       	andi	r24, 0xDF	; 223
     708:	8c 93       	st	X, r24
     70a:	19 82       	std	Y+1, r1	; 0x01
     70c:	02 c0       	rjmp	.+4      	; 0x712 <EXTI_enuDisableEXINT+0x72>
	default:
		Local_enuErrorState  = ES_Out_Of_Range;break;
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     712:	89 81       	ldd	r24, Y+1	; 0x01
}
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	cf 91       	pop	r28
     71e:	df 91       	pop	r29
     720:	08 95       	ret

00000722 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(void * Copy_PvidFun,void * Copy_enuPvidPara,u8 Copy_u8INT_ID)
{
     722:	df 93       	push	r29
     724:	cf 93       	push	r28
     726:	00 d0       	rcall	.+0      	; 0x728 <EXTI_enuCallBack+0x6>
     728:	00 d0       	rcall	.+0      	; 0x72a <EXTI_enuCallBack+0x8>
     72a:	00 d0       	rcall	.+0      	; 0x72c <EXTI_enuCallBack+0xa>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	9b 83       	std	Y+3, r25	; 0x03
     732:	8a 83       	std	Y+2, r24	; 0x02
     734:	7d 83       	std	Y+5, r23	; 0x05
     736:	6c 83       	std	Y+4, r22	; 0x04
     738:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState  = ES_NOK;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_PvidFun)
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	9b 81       	ldd	r25, Y+3	; 0x03
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	c9 f0       	breq	.+50     	; 0x778 <EXTI_enuCallBack+0x56>
	{

		EXTI_PvidGLOfun[Copy_u8INT_ID] = Copy_PvidFun;
     746:	8e 81       	ldd	r24, Y+6	; 0x06
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	2a 81       	ldd	r18, Y+2	; 0x02
     74e:	3b 81       	ldd	r19, Y+3	; 0x03
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	fc 01       	movw	r30, r24
     756:	ea 59       	subi	r30, 0x9A	; 154
     758:	ff 4f       	sbci	r31, 0xFF	; 255
     75a:	31 83       	std	Z+1, r19	; 0x01
     75c:	20 83       	st	Z, r18
		EXTI_PvidGLOPara[Copy_u8INT_ID] = Copy_enuPvidPara;
     75e:	8e 81       	ldd	r24, Y+6	; 0x06
     760:	88 2f       	mov	r24, r24
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	fc 01       	movw	r30, r24
     76a:	e4 59       	subi	r30, 0x94	; 148
     76c:	ff 4f       	sbci	r31, 0xFF	; 255
     76e:	8c 81       	ldd	r24, Y+4	; 0x04
     770:	9d 81       	ldd	r25, Y+5	; 0x05
     772:	91 83       	std	Z+1, r25	; 0x01
     774:	80 83       	st	Z, r24
     776:	02 c0       	rjmp	.+4      	; 0x77c <EXTI_enuCallBack+0x5a>


	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER ;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     77c:	89 81       	ldd	r24, Y+1	; 0x01
}
     77e:	26 96       	adiw	r28, 0x06	; 6
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	08 95       	ret

00000790 <__vector_1>:

ISR(VECT_INT0)
{
     790:	1f 92       	push	r1
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	0f 92       	push	r0
     798:	11 24       	eor	r1, r1
     79a:	2f 93       	push	r18
     79c:	3f 93       	push	r19
     79e:	4f 93       	push	r20
     7a0:	5f 93       	push	r21
     7a2:	6f 93       	push	r22
     7a4:	7f 93       	push	r23
     7a6:	8f 93       	push	r24
     7a8:	9f 93       	push	r25
     7aa:	af 93       	push	r26
     7ac:	bf 93       	push	r27
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
     7b2:	df 93       	push	r29
     7b4:	cf 93       	push	r28
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PvidGLOfun[0])
     7ba:	80 91 66 00 	lds	r24, 0x0066
     7be:	90 91 67 00 	lds	r25, 0x0067
     7c2:	00 97       	sbiw	r24, 0x00	; 0
     7c4:	49 f0       	breq	.+18     	; 0x7d8 <__vector_1+0x48>
	{
		EXTI_PvidGLOfun[0]((void*)EXTI_PvidGLOPara[0]);
     7c6:	e0 91 66 00 	lds	r30, 0x0066
     7ca:	f0 91 67 00 	lds	r31, 0x0067
     7ce:	80 91 6c 00 	lds	r24, 0x006C
     7d2:	90 91 6d 00 	lds	r25, 0x006D
     7d6:	09 95       	icall
	}
}
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <__vector_2>:

ISR(VECT_INT1)
{
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	2f 93       	push	r18
     80a:	3f 93       	push	r19
     80c:	4f 93       	push	r20
     80e:	5f 93       	push	r21
     810:	6f 93       	push	r22
     812:	7f 93       	push	r23
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
     818:	af 93       	push	r26
     81a:	bf 93       	push	r27
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PvidGLOfun[1])
     828:	80 91 68 00 	lds	r24, 0x0068
     82c:	90 91 69 00 	lds	r25, 0x0069
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	49 f0       	breq	.+18     	; 0x846 <__vector_2+0x48>
	{
		EXTI_PvidGLOfun[1]((void*)EXTI_PvidGLOPara[1]);
     834:	e0 91 68 00 	lds	r30, 0x0068
     838:	f0 91 69 00 	lds	r31, 0x0069
     83c:	80 91 6e 00 	lds	r24, 0x006E
     840:	90 91 6f 00 	lds	r25, 0x006F
     844:	09 95       	icall
	}
}
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_3>:
ISR(VECT_INT2)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
     88e:	df 93       	push	r29
     890:	cf 93       	push	r28
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PvidGLOfun[2])
     896:	80 91 6a 00 	lds	r24, 0x006A
     89a:	90 91 6b 00 	lds	r25, 0x006B
     89e:	00 97       	sbiw	r24, 0x00	; 0
     8a0:	49 f0       	breq	.+18     	; 0x8b4 <__vector_3+0x48>
	{
		EXTI_PvidGLOfun[2]((void*)EXTI_PvidGLOPara[2]);
     8a2:	e0 91 6a 00 	lds	r30, 0x006A
     8a6:	f0 91 6b 00 	lds	r31, 0x006B
     8aa:	80 91 70 00 	lds	r24, 0x0070
     8ae:	90 91 71 00 	lds	r25, 0x0071
     8b2:	09 95       	icall
	}
}
     8b4:	cf 91       	pop	r28
     8b6:	df 91       	pop	r29
     8b8:	ff 91       	pop	r31
     8ba:	ef 91       	pop	r30
     8bc:	bf 91       	pop	r27
     8be:	af 91       	pop	r26
     8c0:	9f 91       	pop	r25
     8c2:	8f 91       	pop	r24
     8c4:	7f 91       	pop	r23
     8c6:	6f 91       	pop	r22
     8c8:	5f 91       	pop	r21
     8ca:	4f 91       	pop	r20
     8cc:	3f 91       	pop	r19
     8ce:	2f 91       	pop	r18
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	0f 90       	pop	r0
     8d6:	1f 90       	pop	r1
     8d8:	18 95       	reti

000008da <DIO_enuINIT>:
#include"../../LIB/StdTypes.h"
#include"../../LIB/errorStatuse.h"
#include"DIO_config.h"
#include"DIO_prive.h"
ES_t DIO_enuINIT(void)
{
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	0f 92       	push	r0
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	89 83       	std	Y+1, r24	; 0x01
	/*DIRECTION INITIALIZATION*/
	DDRA = CONC(PA_PIN0_DIR,PA_PIN1_DIR,PA_PIN2_DIR,PA_PIN3_DIR,PA_PIN4_DIR,PA_PIN5_DIR,PA_PIN6_DIR,PA_PIN7_DIR);
     8e8:	ea e3       	ldi	r30, 0x3A	; 58
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	8c ed       	ldi	r24, 0xDC	; 220
     8ee:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN0_DIR,PB_PIN1_DIR,PB_PIN2_DIR,PB_PIN3_DIR,PB_PIN4_DIR,PB_PIN5_DIR,PB_PIN6_DIR,PB_PIN7_DIR);
     8f0:	e7 e3       	ldi	r30, 0x37	; 55
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	8d ee       	ldi	r24, 0xED	; 237
     8f6:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN0_DIR,PC_PIN1_DIR,PC_PIN2_DIR,PC_PIN3_DIR,PC_PIN4_DIR,PC_PIN5_DIR,PC_PIN6_DIR,PC_PIN7_DIR);
     8f8:	e4 e3       	ldi	r30, 0x34	; 52
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	8b ed       	ldi	r24, 0xDB	; 219
     8fe:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN0_DIR,PD_PIN1_DIR,PD_PIN2_DIR,PD_PIN3_DIR,PD_PIN4_DIR,PD_PIN5_DIR,PD_PIN6_DIR,PD_PIN7_DIR);
     900:	e1 e3       	ldi	r30, 0x31	; 49
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	8f ee       	ldi	r24, 0xEF	; 239
     906:	80 83       	st	Z, r24
	/*VALUE INITIALIZATION*/
	PORTA = CONC(PA_PIN0_VAL,PA_PIN1_VAL,PA_PIN2_VAL,PA_PIN3_VAL,PA_PIN4_VAL,PA_PIN5_VAL,PA_PIN6_VAL,PA_PIN7_VAL);
     908:	eb e3       	ldi	r30, 0x3B	; 59
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	85 ef       	ldi	r24, 0xF5	; 245
     90e:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN0_VAL,PB_PIN1_VAL,PB_PIN2_VAL,PB_PIN3_VAL,PB_PIN4_VAL,PB_PIN5_VAL,PB_PIN6_VAL,PB_PIN7_VAL);
     910:	e8 e3       	ldi	r30, 0x38	; 56
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	8f ea       	ldi	r24, 0xAF	; 175
     916:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN0_VAL,PC_PIN1_VAL,PC_PIN2_VAL,PC_PIN3_VAL,PC_PIN4_VAL,PC_PIN5_VAL,PC_PIN6_VAL,PC_PIN7_VAL);
     918:	e5 e3       	ldi	r30, 0x35	; 53
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	87 ef       	ldi	r24, 0xF7	; 247
     91e:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN0_VAL,PD_PIN1_VAL,PD_PIN2_VAL,PD_PIN3_VAL,PD_PIN4_VAL,PD_PIN5_VAL,PD_PIN6_VAL,PD_PIN7_VAL);
     920:	e2 e3       	ldi	r30, 0x32	; 50
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	8b ea       	ldi	r24, 0xAB	; 171
     926:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
     928:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     92a:	89 81       	ldd	r24, Y+1	; 0x01
}
     92c:	0f 90       	pop	r0
     92e:	cf 91       	pop	r28
     930:	df 91       	pop	r29
     932:	08 95       	ret

00000934 <DIO_enuSetPinDir>:
ES_t DIO_enuSetPinDir(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8Direction)
{
     934:	df 93       	push	r29
     936:	cf 93       	push	r28
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	2e 97       	sbiw	r28, 0x0e	; 14
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	8a 83       	std	Y+2, r24	; 0x02
     94a:	6b 83       	std	Y+3, r22	; 0x03
     94c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortId <= DIO_PORTD && Copy_u8PinId<= DIO_PIN7)
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	84 30       	cpi	r24, 0x04	; 4
     956:	08 f0       	brcs	.+2      	; 0x95a <DIO_enuSetPinDir+0x26>
     958:	ff c3       	rjmp	.+2046   	; 0x1158 <DIO_enuSetPinDir+0x824>
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	88 30       	cpi	r24, 0x08	; 8
     95e:	08 f0       	brcs	.+2      	; 0x962 <DIO_enuSetPinDir+0x2e>
     960:	fb c3       	rjmp	.+2038   	; 0x1158 <DIO_enuSetPinDir+0x824>
	{
		switch(Copy_u8PortId)
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	28 2f       	mov	r18, r24
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	3e 87       	std	Y+14, r19	; 0x0e
     96a:	2d 87       	std	Y+13, r18	; 0x0d
     96c:	8d 85       	ldd	r24, Y+13	; 0x0d
     96e:	9e 85       	ldd	r25, Y+14	; 0x0e
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	91 05       	cpc	r25, r1
     974:	09 f4       	brne	.+2      	; 0x978 <DIO_enuSetPinDir+0x44>
     976:	0d c1       	rjmp	.+538    	; 0xb92 <DIO_enuSetPinDir+0x25e>
     978:	2d 85       	ldd	r18, Y+13	; 0x0d
     97a:	3e 85       	ldd	r19, Y+14	; 0x0e
     97c:	22 30       	cpi	r18, 0x02	; 2
     97e:	31 05       	cpc	r19, r1
     980:	2c f4       	brge	.+10     	; 0x98c <DIO_enuSetPinDir+0x58>
     982:	8d 85       	ldd	r24, Y+13	; 0x0d
     984:	9e 85       	ldd	r25, Y+14	; 0x0e
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	71 f0       	breq	.+28     	; 0x9a6 <DIO_enuSetPinDir+0x72>
     98a:	e4 c3       	rjmp	.+1992   	; 0x1154 <DIO_enuSetPinDir+0x820>
     98c:	2d 85       	ldd	r18, Y+13	; 0x0d
     98e:	3e 85       	ldd	r19, Y+14	; 0x0e
     990:	22 30       	cpi	r18, 0x02	; 2
     992:	31 05       	cpc	r19, r1
     994:	09 f4       	brne	.+2      	; 0x998 <DIO_enuSetPinDir+0x64>
     996:	f3 c1       	rjmp	.+998    	; 0xd7e <DIO_enuSetPinDir+0x44a>
     998:	8d 85       	ldd	r24, Y+13	; 0x0d
     99a:	9e 85       	ldd	r25, Y+14	; 0x0e
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	91 05       	cpc	r25, r1
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <DIO_enuSetPinDir+0x70>
     9a2:	e3 c2       	rjmp	.+1478   	; 0xf6a <DIO_enuSetPinDir+0x636>
     9a4:	d7 c3       	rjmp	.+1966   	; 0x1154 <DIO_enuSetPinDir+0x820>
		{
		case DIO_PORTA://SelectFromPortA
			switch(Copy_u8PinId)
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	28 2f       	mov	r18, r24
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	3c 87       	std	Y+12, r19	; 0x0c
     9ae:	2b 87       	std	Y+11, r18	; 0x0b
     9b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	91 05       	cpc	r25, r1
     9b8:	09 f4       	brne	.+2      	; 0x9bc <DIO_enuSetPinDir+0x88>
     9ba:	6a c0       	rjmp	.+212    	; 0xa90 <DIO_enuSetPinDir+0x15c>
     9bc:	2b 85       	ldd	r18, Y+11	; 0x0b
     9be:	3c 85       	ldd	r19, Y+12	; 0x0c
     9c0:	24 30       	cpi	r18, 0x04	; 4
     9c2:	31 05       	cpc	r19, r1
     9c4:	84 f4       	brge	.+32     	; 0x9e6 <DIO_enuSetPinDir+0xb2>
     9c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	91 05       	cpc	r25, r1
     9ce:	a1 f1       	breq	.+104    	; 0xa38 <DIO_enuSetPinDir+0x104>
     9d0:	2b 85       	ldd	r18, Y+11	; 0x0b
     9d2:	3c 85       	ldd	r19, Y+12	; 0x0c
     9d4:	22 30       	cpi	r18, 0x02	; 2
     9d6:	31 05       	cpc	r19, r1
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <DIO_enuSetPinDir+0xa8>
     9da:	43 c0       	rjmp	.+134    	; 0xa62 <DIO_enuSetPinDir+0x12e>
     9dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     9de:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	d1 f0       	breq	.+52     	; 0xa18 <DIO_enuSetPinDir+0xe4>
     9e4:	b7 c3       	rjmp	.+1902   	; 0x1154 <DIO_enuSetPinDir+0x820>
     9e6:	2b 85       	ldd	r18, Y+11	; 0x0b
     9e8:	3c 85       	ldd	r19, Y+12	; 0x0c
     9ea:	25 30       	cpi	r18, 0x05	; 5
     9ec:	31 05       	cpc	r19, r1
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <DIO_enuSetPinDir+0xbe>
     9f0:	81 c0       	rjmp	.+258    	; 0xaf4 <DIO_enuSetPinDir+0x1c0>
     9f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     9f6:	85 30       	cpi	r24, 0x05	; 5
     9f8:	91 05       	cpc	r25, r1
     9fa:	0c f4       	brge	.+2      	; 0x9fe <DIO_enuSetPinDir+0xca>
     9fc:	62 c0       	rjmp	.+196    	; 0xac2 <DIO_enuSetPinDir+0x18e>
     9fe:	2b 85       	ldd	r18, Y+11	; 0x0b
     a00:	3c 85       	ldd	r19, Y+12	; 0x0c
     a02:	26 30       	cpi	r18, 0x06	; 6
     a04:	31 05       	cpc	r19, r1
     a06:	09 f4       	brne	.+2      	; 0xa0a <DIO_enuSetPinDir+0xd6>
     a08:	90 c0       	rjmp	.+288    	; 0xb2a <DIO_enuSetPinDir+0x1f6>
     a0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a0e:	87 30       	cpi	r24, 0x07	; 7
     a10:	91 05       	cpc	r25, r1
     a12:	09 f4       	brne	.+2      	; 0xa16 <DIO_enuSetPinDir+0xe2>
     a14:	a6 c0       	rjmp	.+332    	; 0xb62 <DIO_enuSetPinDir+0x22e>
     a16:	9e c3       	rjmp	.+1852   	; 0x1154 <DIO_enuSetPinDir+0x820>
			{
			case DIO_PIN0:
				DDRA &= ~(1<<DIO_PIN0);
     a18:	aa e3       	ldi	r26, 0x3A	; 58
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	ea e3       	ldi	r30, 0x3A	; 58
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Direction<<DIO_PIN0);break;
     a26:	aa e3       	ldi	r26, 0x3A	; 58
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	ea e3       	ldi	r30, 0x3A	; 58
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	90 81       	ld	r25, Z
     a30:	8c 81       	ldd	r24, Y+4	; 0x04
     a32:	89 2b       	or	r24, r25
     a34:	8c 93       	st	X, r24
     a36:	8e c3       	rjmp	.+1820   	; 0x1154 <DIO_enuSetPinDir+0x820>
			case DIO_PIN1:
				DDRA &= ~(1<<DIO_PIN1);
     a38:	aa e3       	ldi	r26, 0x3A	; 58
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	ea e3       	ldi	r30, 0x3A	; 58
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	8d 7f       	andi	r24, 0xFD	; 253
     a44:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Direction<<DIO_PIN1);break;
     a46:	aa e3       	ldi	r26, 0x3A	; 58
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	ea e3       	ldi	r30, 0x3A	; 58
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	28 2f       	mov	r18, r24
     a52:	8c 81       	ldd	r24, Y+4	; 0x04
     a54:	88 2f       	mov	r24, r24
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	82 2b       	or	r24, r18
     a5e:	8c 93       	st	X, r24
     a60:	79 c3       	rjmp	.+1778   	; 0x1154 <DIO_enuSetPinDir+0x820>
			case DIO_PIN2:
				DDRA &= ~(1<<DIO_PIN2);
     a62:	aa e3       	ldi	r26, 0x3A	; 58
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	ea e3       	ldi	r30, 0x3A	; 58
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8b 7f       	andi	r24, 0xFB	; 251
     a6e:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Direction<<DIO_PIN2);break;
     a70:	aa e3       	ldi	r26, 0x3A	; 58
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	ea e3       	ldi	r30, 0x3A	; 58
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	28 2f       	mov	r18, r24
     a7c:	8c 81       	ldd	r24, Y+4	; 0x04
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	82 2b       	or	r24, r18
     a8c:	8c 93       	st	X, r24
     a8e:	62 c3       	rjmp	.+1732   	; 0x1154 <DIO_enuSetPinDir+0x820>
			case DIO_PIN3:
				DDRA &= ~(1<<DIO_PIN3);
     a90:	aa e3       	ldi	r26, 0x3A	; 58
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ea e3       	ldi	r30, 0x3A	; 58
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	87 7f       	andi	r24, 0xF7	; 247
     a9c:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Direction<<DIO_PIN3);break;
     a9e:	aa e3       	ldi	r26, 0x3A	; 58
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	ea e3       	ldi	r30, 0x3A	; 58
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	28 2f       	mov	r18, r24
     aaa:	8c 81       	ldd	r24, Y+4	; 0x04
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	82 2b       	or	r24, r18
     abe:	8c 93       	st	X, r24
     ac0:	49 c3       	rjmp	.+1682   	; 0x1154 <DIO_enuSetPinDir+0x820>
			case DIO_PIN4:
				DDRA &= ~(1<<DIO_PIN4);
     ac2:	aa e3       	ldi	r26, 0x3A	; 58
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	ea e3       	ldi	r30, 0x3A	; 58
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	8f 7e       	andi	r24, 0xEF	; 239
     ace:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Direction<<DIO_PIN4);break;
     ad0:	aa e3       	ldi	r26, 0x3A	; 58
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	ea e3       	ldi	r30, 0x3A	; 58
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	28 2f       	mov	r18, r24
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	82 95       	swap	r24
     ae4:	92 95       	swap	r25
     ae6:	90 7f       	andi	r25, 0xF0	; 240
     ae8:	98 27       	eor	r25, r24
     aea:	80 7f       	andi	r24, 0xF0	; 240
     aec:	98 27       	eor	r25, r24
     aee:	82 2b       	or	r24, r18
     af0:	8c 93       	st	X, r24
     af2:	30 c3       	rjmp	.+1632   	; 0x1154 <DIO_enuSetPinDir+0x820>
			case DIO_PIN5:
				DDRA &= ~(1<<DIO_PIN5);
     af4:	aa e3       	ldi	r26, 0x3A	; 58
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	ea e3       	ldi	r30, 0x3A	; 58
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	8f 7d       	andi	r24, 0xDF	; 223
     b00:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Direction<<DIO_PIN5);break;
     b02:	aa e3       	ldi	r26, 0x3A	; 58
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	ea e3       	ldi	r30, 0x3A	; 58
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	28 2f       	mov	r18, r24
     b0e:	8c 81       	ldd	r24, Y+4	; 0x04
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	82 95       	swap	r24
     b1a:	92 95       	swap	r25
     b1c:	90 7f       	andi	r25, 0xF0	; 240
     b1e:	98 27       	eor	r25, r24
     b20:	80 7f       	andi	r24, 0xF0	; 240
     b22:	98 27       	eor	r25, r24
     b24:	82 2b       	or	r24, r18
     b26:	8c 93       	st	X, r24
     b28:	15 c3       	rjmp	.+1578   	; 0x1154 <DIO_enuSetPinDir+0x820>
			case DIO_PIN6:
				DDRA &= ~(1<<DIO_PIN6);
     b2a:	aa e3       	ldi	r26, 0x3A	; 58
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	ea e3       	ldi	r30, 0x3A	; 58
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	8f 7b       	andi	r24, 0xBF	; 191
     b36:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Direction<<DIO_PIN6);break;
     b38:	aa e3       	ldi	r26, 0x3A	; 58
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	ea e3       	ldi	r30, 0x3A	; 58
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	28 2f       	mov	r18, r24
     b44:	8c 81       	ldd	r24, Y+4	; 0x04
     b46:	88 2f       	mov	r24, r24
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	00 24       	eor	r0, r0
     b4c:	96 95       	lsr	r25
     b4e:	87 95       	ror	r24
     b50:	07 94       	ror	r0
     b52:	96 95       	lsr	r25
     b54:	87 95       	ror	r24
     b56:	07 94       	ror	r0
     b58:	98 2f       	mov	r25, r24
     b5a:	80 2d       	mov	r24, r0
     b5c:	82 2b       	or	r24, r18
     b5e:	8c 93       	st	X, r24
     b60:	f9 c2       	rjmp	.+1522   	; 0x1154 <DIO_enuSetPinDir+0x820>
			case DIO_PIN7:
				DDRA &= ~(1<<DIO_PIN7);
     b62:	aa e3       	ldi	r26, 0x3A	; 58
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	ea e3       	ldi	r30, 0x3A	; 58
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 77       	andi	r24, 0x7F	; 127
     b6e:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Direction<<DIO_PIN7);break;
     b70:	aa e3       	ldi	r26, 0x3A	; 58
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	ea e3       	ldi	r30, 0x3A	; 58
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	28 2f       	mov	r18, r24
     b7c:	8c 81       	ldd	r24, Y+4	; 0x04
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	96 95       	lsr	r25
     b84:	98 2f       	mov	r25, r24
     b86:	88 27       	eor	r24, r24
     b88:	97 95       	ror	r25
     b8a:	87 95       	ror	r24
     b8c:	82 2b       	or	r24, r18
     b8e:	8c 93       	st	X, r24
     b90:	e1 c2       	rjmp	.+1474   	; 0x1154 <DIO_enuSetPinDir+0x820>

			}
			break;
			case DIO_PORTB://SelectFromPortB
				switch(Copy_u8PinId)
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	3a 87       	std	Y+10, r19	; 0x0a
     b9a:	29 87       	std	Y+9, r18	; 0x09
     b9c:	89 85       	ldd	r24, Y+9	; 0x09
     b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <DIO_enuSetPinDir+0x274>
     ba6:	6a c0       	rjmp	.+212    	; 0xc7c <DIO_enuSetPinDir+0x348>
     ba8:	29 85       	ldd	r18, Y+9	; 0x09
     baa:	3a 85       	ldd	r19, Y+10	; 0x0a
     bac:	24 30       	cpi	r18, 0x04	; 4
     bae:	31 05       	cpc	r19, r1
     bb0:	84 f4       	brge	.+32     	; 0xbd2 <DIO_enuSetPinDir+0x29e>
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	91 05       	cpc	r25, r1
     bba:	a1 f1       	breq	.+104    	; 0xc24 <DIO_enuSetPinDir+0x2f0>
     bbc:	29 85       	ldd	r18, Y+9	; 0x09
     bbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	31 05       	cpc	r19, r1
     bc4:	0c f0       	brlt	.+2      	; 0xbc8 <DIO_enuSetPinDir+0x294>
     bc6:	43 c0       	rjmp	.+134    	; 0xc4e <DIO_enuSetPinDir+0x31a>
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	d1 f0       	breq	.+52     	; 0xc04 <DIO_enuSetPinDir+0x2d0>
     bd0:	c1 c2       	rjmp	.+1410   	; 0x1154 <DIO_enuSetPinDir+0x820>
     bd2:	29 85       	ldd	r18, Y+9	; 0x09
     bd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     bd6:	25 30       	cpi	r18, 0x05	; 5
     bd8:	31 05       	cpc	r19, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <DIO_enuSetPinDir+0x2aa>
     bdc:	81 c0       	rjmp	.+258    	; 0xce0 <DIO_enuSetPinDir+0x3ac>
     bde:	89 85       	ldd	r24, Y+9	; 0x09
     be0:	9a 85       	ldd	r25, Y+10	; 0x0a
     be2:	85 30       	cpi	r24, 0x05	; 5
     be4:	91 05       	cpc	r25, r1
     be6:	0c f4       	brge	.+2      	; 0xbea <DIO_enuSetPinDir+0x2b6>
     be8:	62 c0       	rjmp	.+196    	; 0xcae <DIO_enuSetPinDir+0x37a>
     bea:	29 85       	ldd	r18, Y+9	; 0x09
     bec:	3a 85       	ldd	r19, Y+10	; 0x0a
     bee:	26 30       	cpi	r18, 0x06	; 6
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_enuSetPinDir+0x2c2>
     bf4:	90 c0       	rjmp	.+288    	; 0xd16 <DIO_enuSetPinDir+0x3e2>
     bf6:	89 85       	ldd	r24, Y+9	; 0x09
     bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfa:	87 30       	cpi	r24, 0x07	; 7
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <DIO_enuSetPinDir+0x2ce>
     c00:	a6 c0       	rjmp	.+332    	; 0xd4e <DIO_enuSetPinDir+0x41a>
     c02:	a8 c2       	rjmp	.+1360   	; 0x1154 <DIO_enuSetPinDir+0x820>
				{
				case DIO_PIN0:
					DDRB &= ~(1<<DIO_PIN0);
     c04:	a7 e3       	ldi	r26, 0x37	; 55
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e7 e3       	ldi	r30, 0x37	; 55
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8e 7f       	andi	r24, 0xFE	; 254
     c10:	8c 93       	st	X, r24
					DDRB |=(Copy_u8Direction<<DIO_PIN0);break;
     c12:	a7 e3       	ldi	r26, 0x37	; 55
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e7 e3       	ldi	r30, 0x37	; 55
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	90 81       	ld	r25, Z
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
     c1e:	89 2b       	or	r24, r25
     c20:	8c 93       	st	X, r24
     c22:	98 c2       	rjmp	.+1328   	; 0x1154 <DIO_enuSetPinDir+0x820>
				case DIO_PIN1:
					DDRB &= ~(1<<DIO_PIN1);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	8d 7f       	andi	r24, 0xFD	; 253
     c30:	8c 93       	st	X, r24
					DDRB |=(Copy_u8Direction<<DIO_PIN1);break;
     c32:	a7 e3       	ldi	r26, 0x37	; 55
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e3       	ldi	r30, 0x37	; 55
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	28 2f       	mov	r18, r24
     c3e:	8c 81       	ldd	r24, Y+4	; 0x04
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	82 2b       	or	r24, r18
     c4a:	8c 93       	st	X, r24
     c4c:	83 c2       	rjmp	.+1286   	; 0x1154 <DIO_enuSetPinDir+0x820>
				case DIO_PIN2:
					DDRB &= ~(1<<DIO_PIN2);
     c4e:	a7 e3       	ldi	r26, 0x37	; 55
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e7 e3       	ldi	r30, 0x37	; 55
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8b 7f       	andi	r24, 0xFB	; 251
     c5a:	8c 93       	st	X, r24
					DDRB |=(Copy_u8Direction<<DIO_PIN2);break;
     c5c:	a7 e3       	ldi	r26, 0x37	; 55
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e7 e3       	ldi	r30, 0x37	; 55
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	28 2f       	mov	r18, r24
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	82 2b       	or	r24, r18
     c78:	8c 93       	st	X, r24
     c7a:	6c c2       	rjmp	.+1240   	; 0x1154 <DIO_enuSetPinDir+0x820>
				case DIO_PIN3:
					DDRB &= ~(1<<DIO_PIN3);
     c7c:	a7 e3       	ldi	r26, 0x37	; 55
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e7 e3       	ldi	r30, 0x37	; 55
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	87 7f       	andi	r24, 0xF7	; 247
     c88:	8c 93       	st	X, r24
					DDRB |=(Copy_u8Direction<<DIO_PIN3);break;
     c8a:	a7 e3       	ldi	r26, 0x37	; 55
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e7 e3       	ldi	r30, 0x37	; 55
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	28 2f       	mov	r18, r24
     c96:	8c 81       	ldd	r24, Y+4	; 0x04
     c98:	88 2f       	mov	r24, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	82 2b       	or	r24, r18
     caa:	8c 93       	st	X, r24
     cac:	53 c2       	rjmp	.+1190   	; 0x1154 <DIO_enuSetPinDir+0x820>
				case DIO_PIN4:
					DDRB &= ~(1<<DIO_PIN4);
     cae:	a7 e3       	ldi	r26, 0x37	; 55
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e7 e3       	ldi	r30, 0x37	; 55
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 7e       	andi	r24, 0xEF	; 239
     cba:	8c 93       	st	X, r24
					DDRB |=(Copy_u8Direction<<DIO_PIN4);break;
     cbc:	a7 e3       	ldi	r26, 0x37	; 55
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e7 e3       	ldi	r30, 0x37	; 55
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	28 2f       	mov	r18, r24
     cc8:	8c 81       	ldd	r24, Y+4	; 0x04
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	82 95       	swap	r24
     cd0:	92 95       	swap	r25
     cd2:	90 7f       	andi	r25, 0xF0	; 240
     cd4:	98 27       	eor	r25, r24
     cd6:	80 7f       	andi	r24, 0xF0	; 240
     cd8:	98 27       	eor	r25, r24
     cda:	82 2b       	or	r24, r18
     cdc:	8c 93       	st	X, r24
     cde:	3a c2       	rjmp	.+1140   	; 0x1154 <DIO_enuSetPinDir+0x820>
				case DIO_PIN5:
					DDRB &= ~(1<<DIO_PIN5);
     ce0:	a7 e3       	ldi	r26, 0x37	; 55
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e7 e3       	ldi	r30, 0x37	; 55
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	8f 7d       	andi	r24, 0xDF	; 223
     cec:	8c 93       	st	X, r24
					DDRB |=(Copy_u8Direction<<DIO_PIN5);break;
     cee:	a7 e3       	ldi	r26, 0x37	; 55
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e7 e3       	ldi	r30, 0x37	; 55
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	28 2f       	mov	r18, r24
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	82 95       	swap	r24
     d06:	92 95       	swap	r25
     d08:	90 7f       	andi	r25, 0xF0	; 240
     d0a:	98 27       	eor	r25, r24
     d0c:	80 7f       	andi	r24, 0xF0	; 240
     d0e:	98 27       	eor	r25, r24
     d10:	82 2b       	or	r24, r18
     d12:	8c 93       	st	X, r24
     d14:	1f c2       	rjmp	.+1086   	; 0x1154 <DIO_enuSetPinDir+0x820>
				case DIO_PIN6:
					DDRB &= ~(1<<DIO_PIN6);
     d16:	a7 e3       	ldi	r26, 0x37	; 55
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e3       	ldi	r30, 0x37	; 55
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8f 7b       	andi	r24, 0xBF	; 191
     d22:	8c 93       	st	X, r24
					DDRB |=(Copy_u8Direction<<DIO_PIN6);break;
     d24:	a7 e3       	ldi	r26, 0x37	; 55
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e7 e3       	ldi	r30, 0x37	; 55
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	28 2f       	mov	r18, r24
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	00 24       	eor	r0, r0
     d38:	96 95       	lsr	r25
     d3a:	87 95       	ror	r24
     d3c:	07 94       	ror	r0
     d3e:	96 95       	lsr	r25
     d40:	87 95       	ror	r24
     d42:	07 94       	ror	r0
     d44:	98 2f       	mov	r25, r24
     d46:	80 2d       	mov	r24, r0
     d48:	82 2b       	or	r24, r18
     d4a:	8c 93       	st	X, r24
     d4c:	03 c2       	rjmp	.+1030   	; 0x1154 <DIO_enuSetPinDir+0x820>
				case DIO_PIN7:
					DDRB &= ~(1<<DIO_PIN7);
     d4e:	a7 e3       	ldi	r26, 0x37	; 55
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e7 e3       	ldi	r30, 0x37	; 55
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 77       	andi	r24, 0x7F	; 127
     d5a:	8c 93       	st	X, r24
					DDRB |=(Copy_u8Direction<<DIO_PIN7);break;
     d5c:	a7 e3       	ldi	r26, 0x37	; 55
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e7 e3       	ldi	r30, 0x37	; 55
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	28 2f       	mov	r18, r24
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	96 95       	lsr	r25
     d70:	98 2f       	mov	r25, r24
     d72:	88 27       	eor	r24, r24
     d74:	97 95       	ror	r25
     d76:	87 95       	ror	r24
     d78:	82 2b       	or	r24, r18
     d7a:	8c 93       	st	X, r24
     d7c:	eb c1       	rjmp	.+982    	; 0x1154 <DIO_enuSetPinDir+0x820>
				}
				break;
				case DIO_PORTC://SelectFromPortC
					switch(Copy_u8PinId)
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	38 87       	std	Y+8, r19	; 0x08
     d86:	2f 83       	std	Y+7, r18	; 0x07
     d88:	8f 81       	ldd	r24, Y+7	; 0x07
     d8a:	98 85       	ldd	r25, Y+8	; 0x08
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	91 05       	cpc	r25, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <DIO_enuSetPinDir+0x460>
     d92:	6a c0       	rjmp	.+212    	; 0xe68 <DIO_enuSetPinDir+0x534>
     d94:	2f 81       	ldd	r18, Y+7	; 0x07
     d96:	38 85       	ldd	r19, Y+8	; 0x08
     d98:	24 30       	cpi	r18, 0x04	; 4
     d9a:	31 05       	cpc	r19, r1
     d9c:	84 f4       	brge	.+32     	; 0xdbe <DIO_enuSetPinDir+0x48a>
     d9e:	8f 81       	ldd	r24, Y+7	; 0x07
     da0:	98 85       	ldd	r25, Y+8	; 0x08
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	a1 f1       	breq	.+104    	; 0xe10 <DIO_enuSetPinDir+0x4dc>
     da8:	2f 81       	ldd	r18, Y+7	; 0x07
     daa:	38 85       	ldd	r19, Y+8	; 0x08
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	0c f0       	brlt	.+2      	; 0xdb4 <DIO_enuSetPinDir+0x480>
     db2:	43 c0       	rjmp	.+134    	; 0xe3a <DIO_enuSetPinDir+0x506>
     db4:	8f 81       	ldd	r24, Y+7	; 0x07
     db6:	98 85       	ldd	r25, Y+8	; 0x08
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	d1 f0       	breq	.+52     	; 0xdf0 <DIO_enuSetPinDir+0x4bc>
     dbc:	cb c1       	rjmp	.+918    	; 0x1154 <DIO_enuSetPinDir+0x820>
     dbe:	2f 81       	ldd	r18, Y+7	; 0x07
     dc0:	38 85       	ldd	r19, Y+8	; 0x08
     dc2:	25 30       	cpi	r18, 0x05	; 5
     dc4:	31 05       	cpc	r19, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <DIO_enuSetPinDir+0x496>
     dc8:	81 c0       	rjmp	.+258    	; 0xecc <DIO_enuSetPinDir+0x598>
     dca:	8f 81       	ldd	r24, Y+7	; 0x07
     dcc:	98 85       	ldd	r25, Y+8	; 0x08
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	91 05       	cpc	r25, r1
     dd2:	0c f4       	brge	.+2      	; 0xdd6 <DIO_enuSetPinDir+0x4a2>
     dd4:	62 c0       	rjmp	.+196    	; 0xe9a <DIO_enuSetPinDir+0x566>
     dd6:	2f 81       	ldd	r18, Y+7	; 0x07
     dd8:	38 85       	ldd	r19, Y+8	; 0x08
     dda:	26 30       	cpi	r18, 0x06	; 6
     ddc:	31 05       	cpc	r19, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <DIO_enuSetPinDir+0x4ae>
     de0:	90 c0       	rjmp	.+288    	; 0xf02 <DIO_enuSetPinDir+0x5ce>
     de2:	8f 81       	ldd	r24, Y+7	; 0x07
     de4:	98 85       	ldd	r25, Y+8	; 0x08
     de6:	87 30       	cpi	r24, 0x07	; 7
     de8:	91 05       	cpc	r25, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <DIO_enuSetPinDir+0x4ba>
     dec:	a6 c0       	rjmp	.+332    	; 0xf3a <DIO_enuSetPinDir+0x606>
     dee:	b2 c1       	rjmp	.+868    	; 0x1154 <DIO_enuSetPinDir+0x820>
					{
					case DIO_PIN0:
						DDRC &= ~(1<<DIO_PIN0);
     df0:	a4 e3       	ldi	r26, 0x34	; 52
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e4 e3       	ldi	r30, 0x34	; 52
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	8c 93       	st	X, r24
						DDRC |=(Copy_u8Direction<<DIO_PIN0);break;
     dfe:	a4 e3       	ldi	r26, 0x34	; 52
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e4 e3       	ldi	r30, 0x34	; 52
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	90 81       	ld	r25, Z
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	89 2b       	or	r24, r25
     e0c:	8c 93       	st	X, r24
     e0e:	a2 c1       	rjmp	.+836    	; 0x1154 <DIO_enuSetPinDir+0x820>
					case DIO_PIN1:
						DDRC &= ~(1<<DIO_PIN1);
     e10:	a4 e3       	ldi	r26, 0x34	; 52
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e4 e3       	ldi	r30, 0x34	; 52
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8d 7f       	andi	r24, 0xFD	; 253
     e1c:	8c 93       	st	X, r24
						DDRC |=(Copy_u8Direction<<DIO_PIN1);break;
     e1e:	a4 e3       	ldi	r26, 0x34	; 52
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e4 e3       	ldi	r30, 0x34	; 52
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	28 2f       	mov	r18, r24
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	82 2b       	or	r24, r18
     e36:	8c 93       	st	X, r24
     e38:	8d c1       	rjmp	.+794    	; 0x1154 <DIO_enuSetPinDir+0x820>
					case DIO_PIN2:
						DDRC &= ~(1<<DIO_PIN2);
     e3a:	a4 e3       	ldi	r26, 0x34	; 52
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8b 7f       	andi	r24, 0xFB	; 251
     e46:	8c 93       	st	X, r24
						DDRC |=(Copy_u8Direction<<DIO_PIN2);break;
     e48:	a4 e3       	ldi	r26, 0x34	; 52
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e4 e3       	ldi	r30, 0x34	; 52
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	28 2f       	mov	r18, r24
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	82 2b       	or	r24, r18
     e64:	8c 93       	st	X, r24
     e66:	76 c1       	rjmp	.+748    	; 0x1154 <DIO_enuSetPinDir+0x820>
					case DIO_PIN3:
						DDRC &= ~(1<<DIO_PIN3);
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	8c 93       	st	X, r24
						DDRC |=(Copy_u8Direction<<DIO_PIN3);break;
     e76:	a4 e3       	ldi	r26, 0x34	; 52
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e4 e3       	ldi	r30, 0x34	; 52
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	28 2f       	mov	r18, r24
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	82 2b       	or	r24, r18
     e96:	8c 93       	st	X, r24
     e98:	5d c1       	rjmp	.+698    	; 0x1154 <DIO_enuSetPinDir+0x820>
					case DIO_PIN4:
						DDRC &= ~(1<<DIO_PIN4);
     e9a:	a4 e3       	ldi	r26, 0x34	; 52
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e4 e3       	ldi	r30, 0x34	; 52
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7e       	andi	r24, 0xEF	; 239
     ea6:	8c 93       	st	X, r24
						DDRC |=(Copy_u8Direction<<DIO_PIN4);break;
     ea8:	a4 e3       	ldi	r26, 0x34	; 52
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e4 e3       	ldi	r30, 0x34	; 52
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	28 2f       	mov	r18, r24
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	82 95       	swap	r24
     ebc:	92 95       	swap	r25
     ebe:	90 7f       	andi	r25, 0xF0	; 240
     ec0:	98 27       	eor	r25, r24
     ec2:	80 7f       	andi	r24, 0xF0	; 240
     ec4:	98 27       	eor	r25, r24
     ec6:	82 2b       	or	r24, r18
     ec8:	8c 93       	st	X, r24
     eca:	44 c1       	rjmp	.+648    	; 0x1154 <DIO_enuSetPinDir+0x820>
					case DIO_PIN5:
						DDRC &= ~(1<<DIO_PIN5);
     ecc:	a4 e3       	ldi	r26, 0x34	; 52
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e4 e3       	ldi	r30, 0x34	; 52
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8f 7d       	andi	r24, 0xDF	; 223
     ed8:	8c 93       	st	X, r24
						DDRC |=(Copy_u8Direction<<DIO_PIN5);break;
     eda:	a4 e3       	ldi	r26, 0x34	; 52
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e4 e3       	ldi	r30, 0x34	; 52
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	28 2f       	mov	r18, r24
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	82 95       	swap	r24
     ef2:	92 95       	swap	r25
     ef4:	90 7f       	andi	r25, 0xF0	; 240
     ef6:	98 27       	eor	r25, r24
     ef8:	80 7f       	andi	r24, 0xF0	; 240
     efa:	98 27       	eor	r25, r24
     efc:	82 2b       	or	r24, r18
     efe:	8c 93       	st	X, r24
     f00:	29 c1       	rjmp	.+594    	; 0x1154 <DIO_enuSetPinDir+0x820>
					case DIO_PIN6:
						DDRC &= ~(1<<DIO_PIN6);
     f02:	a4 e3       	ldi	r26, 0x34	; 52
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e4 e3       	ldi	r30, 0x34	; 52
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8f 7b       	andi	r24, 0xBF	; 191
     f0e:	8c 93       	st	X, r24
						DDRC |=(Copy_u8Direction<<DIO_PIN6);break;
     f10:	a4 e3       	ldi	r26, 0x34	; 52
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e4 e3       	ldi	r30, 0x34	; 52
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	28 2f       	mov	r18, r24
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	00 24       	eor	r0, r0
     f24:	96 95       	lsr	r25
     f26:	87 95       	ror	r24
     f28:	07 94       	ror	r0
     f2a:	96 95       	lsr	r25
     f2c:	87 95       	ror	r24
     f2e:	07 94       	ror	r0
     f30:	98 2f       	mov	r25, r24
     f32:	80 2d       	mov	r24, r0
     f34:	82 2b       	or	r24, r18
     f36:	8c 93       	st	X, r24
     f38:	0d c1       	rjmp	.+538    	; 0x1154 <DIO_enuSetPinDir+0x820>
					case DIO_PIN7:
						DDRC &= ~(1<<DIO_PIN7);
     f3a:	a4 e3       	ldi	r26, 0x34	; 52
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e4 e3       	ldi	r30, 0x34	; 52
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8f 77       	andi	r24, 0x7F	; 127
     f46:	8c 93       	st	X, r24
						DDRC |=(Copy_u8Direction<<DIO_PIN7);break;
     f48:	a4 e3       	ldi	r26, 0x34	; 52
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e4 e3       	ldi	r30, 0x34	; 52
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	28 2f       	mov	r18, r24
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	96 95       	lsr	r25
     f5c:	98 2f       	mov	r25, r24
     f5e:	88 27       	eor	r24, r24
     f60:	97 95       	ror	r25
     f62:	87 95       	ror	r24
     f64:	82 2b       	or	r24, r18
     f66:	8c 93       	st	X, r24
     f68:	f5 c0       	rjmp	.+490    	; 0x1154 <DIO_enuSetPinDir+0x820>
					}
					break;
					case DIO_PORTD://SelectFromPortD
						switch(Copy_u8PinId)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3e 83       	std	Y+6, r19	; 0x06
     f72:	2d 83       	std	Y+5, r18	; 0x05
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	83 30       	cpi	r24, 0x03	; 3
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <DIO_enuSetPinDir+0x64c>
     f7e:	6a c0       	rjmp	.+212    	; 0x1054 <DIO_enuSetPinDir+0x720>
     f80:	2d 81       	ldd	r18, Y+5	; 0x05
     f82:	3e 81       	ldd	r19, Y+6	; 0x06
     f84:	24 30       	cpi	r18, 0x04	; 4
     f86:	31 05       	cpc	r19, r1
     f88:	84 f4       	brge	.+32     	; 0xfaa <DIO_enuSetPinDir+0x676>
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	91 05       	cpc	r25, r1
     f92:	a1 f1       	breq	.+104    	; 0xffc <DIO_enuSetPinDir+0x6c8>
     f94:	2d 81       	ldd	r18, Y+5	; 0x05
     f96:	3e 81       	ldd	r19, Y+6	; 0x06
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <DIO_enuSetPinDir+0x66c>
     f9e:	43 c0       	rjmp	.+134    	; 0x1026 <DIO_enuSetPinDir+0x6f2>
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	9e 81       	ldd	r25, Y+6	; 0x06
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	d1 f0       	breq	.+52     	; 0xfdc <DIO_enuSetPinDir+0x6a8>
     fa8:	d5 c0       	rjmp	.+426    	; 0x1154 <DIO_enuSetPinDir+0x820>
     faa:	2d 81       	ldd	r18, Y+5	; 0x05
     fac:	3e 81       	ldd	r19, Y+6	; 0x06
     fae:	25 30       	cpi	r18, 0x05	; 5
     fb0:	31 05       	cpc	r19, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <DIO_enuSetPinDir+0x682>
     fb4:	81 c0       	rjmp	.+258    	; 0x10b8 <DIO_enuSetPinDir+0x784>
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	91 05       	cpc	r25, r1
     fbe:	0c f4       	brge	.+2      	; 0xfc2 <DIO_enuSetPinDir+0x68e>
     fc0:	62 c0       	rjmp	.+196    	; 0x1086 <DIO_enuSetPinDir+0x752>
     fc2:	2d 81       	ldd	r18, Y+5	; 0x05
     fc4:	3e 81       	ldd	r19, Y+6	; 0x06
     fc6:	26 30       	cpi	r18, 0x06	; 6
     fc8:	31 05       	cpc	r19, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <DIO_enuSetPinDir+0x69a>
     fcc:	90 c0       	rjmp	.+288    	; 0x10ee <DIO_enuSetPinDir+0x7ba>
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	87 30       	cpi	r24, 0x07	; 7
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <DIO_enuSetPinDir+0x6a6>
     fd8:	a6 c0       	rjmp	.+332    	; 0x1126 <DIO_enuSetPinDir+0x7f2>
     fda:	bc c0       	rjmp	.+376    	; 0x1154 <DIO_enuSetPinDir+0x820>
						{
						case DIO_PIN0:
							DDRD &= ~(1<<DIO_PIN0);
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8e 7f       	andi	r24, 0xFE	; 254
     fe8:	8c 93       	st	X, r24
							DDRD |=(Copy_u8Direction<<DIO_PIN0);break;
     fea:	a1 e3       	ldi	r26, 0x31	; 49
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e1 e3       	ldi	r30, 0x31	; 49
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	90 81       	ld	r25, Z
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	89 2b       	or	r24, r25
     ff8:	8c 93       	st	X, r24
     ffa:	ac c0       	rjmp	.+344    	; 0x1154 <DIO_enuSetPinDir+0x820>
						case DIO_PIN1:
							DDRD &= ~(1<<DIO_PIN1);
     ffc:	a1 e3       	ldi	r26, 0x31	; 49
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e1 e3       	ldi	r30, 0x31	; 49
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8d 7f       	andi	r24, 0xFD	; 253
    1008:	8c 93       	st	X, r24
							DDRD |=(Copy_u8Direction<<DIO_PIN1);break;
    100a:	a1 e3       	ldi	r26, 0x31	; 49
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e1 e3       	ldi	r30, 0x31	; 49
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	28 2f       	mov	r18, r24
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	82 2b       	or	r24, r18
    1022:	8c 93       	st	X, r24
    1024:	97 c0       	rjmp	.+302    	; 0x1154 <DIO_enuSetPinDir+0x820>
						case DIO_PIN2:
							DDRD &= ~(1<<DIO_PIN2);
    1026:	a1 e3       	ldi	r26, 0x31	; 49
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e1 e3       	ldi	r30, 0x31	; 49
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8b 7f       	andi	r24, 0xFB	; 251
    1032:	8c 93       	st	X, r24
							DDRD |=(Copy_u8Direction<<DIO_PIN2);break;
    1034:	a1 e3       	ldi	r26, 0x31	; 49
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e1 e3       	ldi	r30, 0x31	; 49
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	28 2f       	mov	r18, r24
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	82 2b       	or	r24, r18
    1050:	8c 93       	st	X, r24
    1052:	80 c0       	rjmp	.+256    	; 0x1154 <DIO_enuSetPinDir+0x820>
						case DIO_PIN3:
							DDRD &= ~(1<<DIO_PIN3);
    1054:	a1 e3       	ldi	r26, 0x31	; 49
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e1 e3       	ldi	r30, 0x31	; 49
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	8c 93       	st	X, r24
							DDRD |=(Copy_u8Direction<<DIO_PIN3);break;
    1062:	a1 e3       	ldi	r26, 0x31	; 49
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e1 e3       	ldi	r30, 0x31	; 49
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	28 2f       	mov	r18, r24
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	82 2b       	or	r24, r18
    1082:	8c 93       	st	X, r24
    1084:	67 c0       	rjmp	.+206    	; 0x1154 <DIO_enuSetPinDir+0x820>
						case DIO_PIN4:
							DDRD &= ~(1<<DIO_PIN4);
    1086:	a1 e3       	ldi	r26, 0x31	; 49
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e1 e3       	ldi	r30, 0x31	; 49
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8f 7e       	andi	r24, 0xEF	; 239
    1092:	8c 93       	st	X, r24
							DDRD |=(Copy_u8Direction<<DIO_PIN4);break;
    1094:	a1 e3       	ldi	r26, 0x31	; 49
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e1 e3       	ldi	r30, 0x31	; 49
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	28 2f       	mov	r18, r24
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	82 95       	swap	r24
    10a8:	92 95       	swap	r25
    10aa:	90 7f       	andi	r25, 0xF0	; 240
    10ac:	98 27       	eor	r25, r24
    10ae:	80 7f       	andi	r24, 0xF0	; 240
    10b0:	98 27       	eor	r25, r24
    10b2:	82 2b       	or	r24, r18
    10b4:	8c 93       	st	X, r24
    10b6:	4e c0       	rjmp	.+156    	; 0x1154 <DIO_enuSetPinDir+0x820>
						case DIO_PIN5:
							DDRD &= ~(1<<DIO_PIN5);
    10b8:	a1 e3       	ldi	r26, 0x31	; 49
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e1 e3       	ldi	r30, 0x31	; 49
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8f 7d       	andi	r24, 0xDF	; 223
    10c4:	8c 93       	st	X, r24
							DDRD |=(Copy_u8Direction<<DIO_PIN5);break;
    10c6:	a1 e3       	ldi	r26, 0x31	; 49
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e1 e3       	ldi	r30, 0x31	; 49
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	28 2f       	mov	r18, r24
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	82 95       	swap	r24
    10de:	92 95       	swap	r25
    10e0:	90 7f       	andi	r25, 0xF0	; 240
    10e2:	98 27       	eor	r25, r24
    10e4:	80 7f       	andi	r24, 0xF0	; 240
    10e6:	98 27       	eor	r25, r24
    10e8:	82 2b       	or	r24, r18
    10ea:	8c 93       	st	X, r24
    10ec:	33 c0       	rjmp	.+102    	; 0x1154 <DIO_enuSetPinDir+0x820>
						case DIO_PIN6:
							DDRD &= ~(1<<DIO_PIN6);
    10ee:	a1 e3       	ldi	r26, 0x31	; 49
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e1 e3       	ldi	r30, 0x31	; 49
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 7b       	andi	r24, 0xBF	; 191
    10fa:	8c 93       	st	X, r24
							DDRD |=(Copy_u8Direction<<DIO_PIN6);break;
    10fc:	a1 e3       	ldi	r26, 0x31	; 49
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e1 e3       	ldi	r30, 0x31	; 49
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	28 2f       	mov	r18, r24
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	00 24       	eor	r0, r0
    1110:	96 95       	lsr	r25
    1112:	87 95       	ror	r24
    1114:	07 94       	ror	r0
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	07 94       	ror	r0
    111c:	98 2f       	mov	r25, r24
    111e:	80 2d       	mov	r24, r0
    1120:	82 2b       	or	r24, r18
    1122:	8c 93       	st	X, r24
    1124:	17 c0       	rjmp	.+46     	; 0x1154 <DIO_enuSetPinDir+0x820>
						case DIO_PIN7:
							DDRD &= ~(1<<DIO_PIN7);
    1126:	a1 e3       	ldi	r26, 0x31	; 49
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e1 e3       	ldi	r30, 0x31	; 49
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8f 77       	andi	r24, 0x7F	; 127
    1132:	8c 93       	st	X, r24
							DDRD |=(Copy_u8Direction<<DIO_PIN7);break;
    1134:	a1 e3       	ldi	r26, 0x31	; 49
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e1 e3       	ldi	r30, 0x31	; 49
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	28 2f       	mov	r18, r24
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	96 95       	lsr	r25
    1148:	98 2f       	mov	r25, r24
    114a:	88 27       	eor	r24, r24
    114c:	97 95       	ror	r25
    114e:	87 95       	ror	r24
    1150:	82 2b       	or	r24, r18
    1152:	8c 93       	st	X, r24

						}
						break;

		}
		Local_enuErrorState = ES_OK;
    1154:	19 82       	std	Y+1, r1	; 0x01
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_enuSetPinDir+0x828>
	}
	else
	{
		Local_enuErrorState = ES_Out_Of_Range;
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
}
    115e:	2e 96       	adiw	r28, 0x0e	; 14
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DIO_enuSetPinVal>:
ES_t DIO_enuSetPinVal(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8Value)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	2e 97       	sbiw	r28, 0x0e	; 14
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	6b 83       	std	Y+3, r22	; 0x03
    1188:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortId <= DIO_PORTD && Copy_u8PinId<= DIO_PIN7)
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	84 30       	cpi	r24, 0x04	; 4
    1192:	08 f0       	brcs	.+2      	; 0x1196 <DIO_enuSetPinVal+0x26>
    1194:	ff c3       	rjmp	.+2046   	; 0x1994 <DIO_enuSetPinVal+0x824>
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	08 f0       	brcs	.+2      	; 0x119e <DIO_enuSetPinVal+0x2e>
    119c:	fb c3       	rjmp	.+2038   	; 0x1994 <DIO_enuSetPinVal+0x824>
	{
		switch(Copy_u8PortId)
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	3e 87       	std	Y+14, r19	; 0x0e
    11a6:	2d 87       	std	Y+13, r18	; 0x0d
    11a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	91 05       	cpc	r25, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <DIO_enuSetPinVal+0x44>
    11b2:	0d c1       	rjmp	.+538    	; 0x13ce <DIO_enuSetPinVal+0x25e>
    11b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    11b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <DIO_enuSetPinVal+0x58>
    11be:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	71 f0       	breq	.+28     	; 0x11e2 <DIO_enuSetPinVal+0x72>
    11c6:	e4 c3       	rjmp	.+1992   	; 0x1990 <DIO_enuSetPinVal+0x820>
    11c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    11ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <DIO_enuSetPinVal+0x64>
    11d2:	f3 c1       	rjmp	.+998    	; 0x15ba <DIO_enuSetPinVal+0x44a>
    11d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	91 05       	cpc	r25, r1
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <DIO_enuSetPinVal+0x70>
    11de:	e3 c2       	rjmp	.+1478   	; 0x17a6 <DIO_enuSetPinVal+0x636>
    11e0:	d7 c3       	rjmp	.+1966   	; 0x1990 <DIO_enuSetPinVal+0x820>
		{
		case DIO_PORTA://SelectFromPortA
			switch(Copy_u8PinId)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3c 87       	std	Y+12, r19	; 0x0c
    11ea:	2b 87       	std	Y+11, r18	; 0x0b
    11ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_enuSetPinVal+0x88>
    11f6:	6a c0       	rjmp	.+212    	; 0x12cc <DIO_enuSetPinVal+0x15c>
    11f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    11fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    11fc:	24 30       	cpi	r18, 0x04	; 4
    11fe:	31 05       	cpc	r19, r1
    1200:	84 f4       	brge	.+32     	; 0x1222 <DIO_enuSetPinVal+0xb2>
    1202:	8b 85       	ldd	r24, Y+11	; 0x0b
    1204:	9c 85       	ldd	r25, Y+12	; 0x0c
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	91 05       	cpc	r25, r1
    120a:	a1 f1       	breq	.+104    	; 0x1274 <DIO_enuSetPinVal+0x104>
    120c:	2b 85       	ldd	r18, Y+11	; 0x0b
    120e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	31 05       	cpc	r19, r1
    1214:	0c f0       	brlt	.+2      	; 0x1218 <DIO_enuSetPinVal+0xa8>
    1216:	43 c0       	rjmp	.+134    	; 0x129e <DIO_enuSetPinVal+0x12e>
    1218:	8b 85       	ldd	r24, Y+11	; 0x0b
    121a:	9c 85       	ldd	r25, Y+12	; 0x0c
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	d1 f0       	breq	.+52     	; 0x1254 <DIO_enuSetPinVal+0xe4>
    1220:	b7 c3       	rjmp	.+1902   	; 0x1990 <DIO_enuSetPinVal+0x820>
    1222:	2b 85       	ldd	r18, Y+11	; 0x0b
    1224:	3c 85       	ldd	r19, Y+12	; 0x0c
    1226:	25 30       	cpi	r18, 0x05	; 5
    1228:	31 05       	cpc	r19, r1
    122a:	09 f4       	brne	.+2      	; 0x122e <DIO_enuSetPinVal+0xbe>
    122c:	81 c0       	rjmp	.+258    	; 0x1330 <DIO_enuSetPinVal+0x1c0>
    122e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1230:	9c 85       	ldd	r25, Y+12	; 0x0c
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	91 05       	cpc	r25, r1
    1236:	0c f4       	brge	.+2      	; 0x123a <DIO_enuSetPinVal+0xca>
    1238:	62 c0       	rjmp	.+196    	; 0x12fe <DIO_enuSetPinVal+0x18e>
    123a:	2b 85       	ldd	r18, Y+11	; 0x0b
    123c:	3c 85       	ldd	r19, Y+12	; 0x0c
    123e:	26 30       	cpi	r18, 0x06	; 6
    1240:	31 05       	cpc	r19, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <DIO_enuSetPinVal+0xd6>
    1244:	90 c0       	rjmp	.+288    	; 0x1366 <DIO_enuSetPinVal+0x1f6>
    1246:	8b 85       	ldd	r24, Y+11	; 0x0b
    1248:	9c 85       	ldd	r25, Y+12	; 0x0c
    124a:	87 30       	cpi	r24, 0x07	; 7
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <DIO_enuSetPinVal+0xe2>
    1250:	a6 c0       	rjmp	.+332    	; 0x139e <DIO_enuSetPinVal+0x22e>
    1252:	9e c3       	rjmp	.+1852   	; 0x1990 <DIO_enuSetPinVal+0x820>
			{
			case DIO_PIN0:
				PORTA &= ~(1<<DIO_PIN0);
    1254:	ab e3       	ldi	r26, 0x3B	; 59
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	eb e3       	ldi	r30, 0x3B	; 59
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8e 7f       	andi	r24, 0xFE	; 254
    1260:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<DIO_PIN0);break;
    1262:	ab e3       	ldi	r26, 0x3B	; 59
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	90 81       	ld	r25, Z
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	89 2b       	or	r24, r25
    1270:	8c 93       	st	X, r24
    1272:	8e c3       	rjmp	.+1820   	; 0x1990 <DIO_enuSetPinVal+0x820>
			case DIO_PIN1:
				PORTA &= ~(1<<DIO_PIN1);
    1274:	ab e3       	ldi	r26, 0x3B	; 59
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb e3       	ldi	r30, 0x3B	; 59
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8d 7f       	andi	r24, 0xFD	; 253
    1280:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<DIO_PIN1);break;
    1282:	ab e3       	ldi	r26, 0x3B	; 59
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	28 2f       	mov	r18, r24
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	82 2b       	or	r24, r18
    129a:	8c 93       	st	X, r24
    129c:	79 c3       	rjmp	.+1778   	; 0x1990 <DIO_enuSetPinVal+0x820>
			case DIO_PIN2:
				PORTA &= ~(1<<DIO_PIN2);
    129e:	ab e3       	ldi	r26, 0x3B	; 59
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	eb e3       	ldi	r30, 0x3B	; 59
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8b 7f       	andi	r24, 0xFB	; 251
    12aa:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<DIO_PIN2);break;
    12ac:	ab e3       	ldi	r26, 0x3B	; 59
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	eb e3       	ldi	r30, 0x3B	; 59
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	28 2f       	mov	r18, r24
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	82 2b       	or	r24, r18
    12c8:	8c 93       	st	X, r24
    12ca:	62 c3       	rjmp	.+1732   	; 0x1990 <DIO_enuSetPinVal+0x820>
			case DIO_PIN3:
				PORTA &= ~(1<<DIO_PIN3);
    12cc:	ab e3       	ldi	r26, 0x3B	; 59
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	eb e3       	ldi	r30, 0x3B	; 59
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	87 7f       	andi	r24, 0xF7	; 247
    12d8:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<DIO_PIN3);break;
    12da:	ab e3       	ldi	r26, 0x3B	; 59
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	eb e3       	ldi	r30, 0x3B	; 59
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	28 2f       	mov	r18, r24
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	82 2b       	or	r24, r18
    12fa:	8c 93       	st	X, r24
    12fc:	49 c3       	rjmp	.+1682   	; 0x1990 <DIO_enuSetPinVal+0x820>
			case DIO_PIN4:
				PORTA &= ~(1<<DIO_PIN4);
    12fe:	ab e3       	ldi	r26, 0x3B	; 59
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	eb e3       	ldi	r30, 0x3B	; 59
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8f 7e       	andi	r24, 0xEF	; 239
    130a:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<DIO_PIN4);break;
    130c:	ab e3       	ldi	r26, 0x3B	; 59
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	82 95       	swap	r24
    1320:	92 95       	swap	r25
    1322:	90 7f       	andi	r25, 0xF0	; 240
    1324:	98 27       	eor	r25, r24
    1326:	80 7f       	andi	r24, 0xF0	; 240
    1328:	98 27       	eor	r25, r24
    132a:	82 2b       	or	r24, r18
    132c:	8c 93       	st	X, r24
    132e:	30 c3       	rjmp	.+1632   	; 0x1990 <DIO_enuSetPinVal+0x820>
			case DIO_PIN5:
				PORTA &= ~(1<<DIO_PIN5);
    1330:	ab e3       	ldi	r26, 0x3B	; 59
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8f 7d       	andi	r24, 0xDF	; 223
    133c:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<DIO_PIN5);break;
    133e:	ab e3       	ldi	r26, 0x3B	; 59
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	eb e3       	ldi	r30, 0x3B	; 59
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	82 95       	swap	r24
    1356:	92 95       	swap	r25
    1358:	90 7f       	andi	r25, 0xF0	; 240
    135a:	98 27       	eor	r25, r24
    135c:	80 7f       	andi	r24, 0xF0	; 240
    135e:	98 27       	eor	r25, r24
    1360:	82 2b       	or	r24, r18
    1362:	8c 93       	st	X, r24
    1364:	15 c3       	rjmp	.+1578   	; 0x1990 <DIO_enuSetPinVal+0x820>
			case DIO_PIN6:
				PORTA &= ~(1<<DIO_PIN6);
    1366:	ab e3       	ldi	r26, 0x3B	; 59
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	eb e3       	ldi	r30, 0x3B	; 59
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8f 7b       	andi	r24, 0xBF	; 191
    1372:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<DIO_PIN6);break;
    1374:	ab e3       	ldi	r26, 0x3B	; 59
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	eb e3       	ldi	r30, 0x3B	; 59
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	28 2f       	mov	r18, r24
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	00 24       	eor	r0, r0
    1388:	96 95       	lsr	r25
    138a:	87 95       	ror	r24
    138c:	07 94       	ror	r0
    138e:	96 95       	lsr	r25
    1390:	87 95       	ror	r24
    1392:	07 94       	ror	r0
    1394:	98 2f       	mov	r25, r24
    1396:	80 2d       	mov	r24, r0
    1398:	82 2b       	or	r24, r18
    139a:	8c 93       	st	X, r24
    139c:	f9 c2       	rjmp	.+1522   	; 0x1990 <DIO_enuSetPinVal+0x820>
			case DIO_PIN7:
				PORTA &= ~(1<<DIO_PIN7);
    139e:	ab e3       	ldi	r26, 0x3B	; 59
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	8f 77       	andi	r24, 0x7F	; 127
    13aa:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<DIO_PIN7);break;
    13ac:	ab e3       	ldi	r26, 0x3B	; 59
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	eb e3       	ldi	r30, 0x3B	; 59
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	96 95       	lsr	r25
    13c0:	98 2f       	mov	r25, r24
    13c2:	88 27       	eor	r24, r24
    13c4:	97 95       	ror	r25
    13c6:	87 95       	ror	r24
    13c8:	82 2b       	or	r24, r18
    13ca:	8c 93       	st	X, r24
    13cc:	e1 c2       	rjmp	.+1474   	; 0x1990 <DIO_enuSetPinVal+0x820>

			}
			break;
			case DIO_PORTB://SelectFromPortB
				switch(Copy_u8PinId)
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3a 87       	std	Y+10, r19	; 0x0a
    13d6:	29 87       	std	Y+9, r18	; 0x09
    13d8:	89 85       	ldd	r24, Y+9	; 0x09
    13da:	9a 85       	ldd	r25, Y+10	; 0x0a
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_enuSetPinVal+0x274>
    13e2:	6a c0       	rjmp	.+212    	; 0x14b8 <DIO_enuSetPinVal+0x348>
    13e4:	29 85       	ldd	r18, Y+9	; 0x09
    13e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13e8:	24 30       	cpi	r18, 0x04	; 4
    13ea:	31 05       	cpc	r19, r1
    13ec:	84 f4       	brge	.+32     	; 0x140e <DIO_enuSetPinVal+0x29e>
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	a1 f1       	breq	.+104    	; 0x1460 <DIO_enuSetPinVal+0x2f0>
    13f8:	29 85       	ldd	r18, Y+9	; 0x09
    13fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	0c f0       	brlt	.+2      	; 0x1404 <DIO_enuSetPinVal+0x294>
    1402:	43 c0       	rjmp	.+134    	; 0x148a <DIO_enuSetPinVal+0x31a>
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	d1 f0       	breq	.+52     	; 0x1440 <DIO_enuSetPinVal+0x2d0>
    140c:	c1 c2       	rjmp	.+1410   	; 0x1990 <DIO_enuSetPinVal+0x820>
    140e:	29 85       	ldd	r18, Y+9	; 0x09
    1410:	3a 85       	ldd	r19, Y+10	; 0x0a
    1412:	25 30       	cpi	r18, 0x05	; 5
    1414:	31 05       	cpc	r19, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <DIO_enuSetPinVal+0x2aa>
    1418:	81 c0       	rjmp	.+258    	; 0x151c <DIO_enuSetPinVal+0x3ac>
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	9a 85       	ldd	r25, Y+10	; 0x0a
    141e:	85 30       	cpi	r24, 0x05	; 5
    1420:	91 05       	cpc	r25, r1
    1422:	0c f4       	brge	.+2      	; 0x1426 <DIO_enuSetPinVal+0x2b6>
    1424:	62 c0       	rjmp	.+196    	; 0x14ea <DIO_enuSetPinVal+0x37a>
    1426:	29 85       	ldd	r18, Y+9	; 0x09
    1428:	3a 85       	ldd	r19, Y+10	; 0x0a
    142a:	26 30       	cpi	r18, 0x06	; 6
    142c:	31 05       	cpc	r19, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <DIO_enuSetPinVal+0x2c2>
    1430:	90 c0       	rjmp	.+288    	; 0x1552 <DIO_enuSetPinVal+0x3e2>
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	87 30       	cpi	r24, 0x07	; 7
    1438:	91 05       	cpc	r25, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <DIO_enuSetPinVal+0x2ce>
    143c:	a6 c0       	rjmp	.+332    	; 0x158a <DIO_enuSetPinVal+0x41a>
    143e:	a8 c2       	rjmp	.+1360   	; 0x1990 <DIO_enuSetPinVal+0x820>
				{
				case DIO_PIN0:
					PORTB &= ~(1<<DIO_PIN0);
    1440:	a8 e3       	ldi	r26, 0x38	; 56
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e8 e3       	ldi	r30, 0x38	; 56
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8e 7f       	andi	r24, 0xFE	; 254
    144c:	8c 93       	st	X, r24
					PORTB |=(Copy_u8Value<<DIO_PIN0);break;
    144e:	a8 e3       	ldi	r26, 0x38	; 56
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e8 e3       	ldi	r30, 0x38	; 56
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	90 81       	ld	r25, Z
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	89 2b       	or	r24, r25
    145c:	8c 93       	st	X, r24
    145e:	98 c2       	rjmp	.+1328   	; 0x1990 <DIO_enuSetPinVal+0x820>
				case DIO_PIN1:
					PORTB &= ~(1<<DIO_PIN1);
    1460:	a8 e3       	ldi	r26, 0x38	; 56
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e8 e3       	ldi	r30, 0x38	; 56
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8d 7f       	andi	r24, 0xFD	; 253
    146c:	8c 93       	st	X, r24
					PORTB |=(Copy_u8Value<<DIO_PIN1);break;
    146e:	a8 e3       	ldi	r26, 0x38	; 56
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e8 e3       	ldi	r30, 0x38	; 56
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	82 2b       	or	r24, r18
    1486:	8c 93       	st	X, r24
    1488:	83 c2       	rjmp	.+1286   	; 0x1990 <DIO_enuSetPinVal+0x820>
				case DIO_PIN2:
					PORTB &= ~(1<<DIO_PIN2);
    148a:	a8 e3       	ldi	r26, 0x38	; 56
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8b 7f       	andi	r24, 0xFB	; 251
    1496:	8c 93       	st	X, r24
					PORTB |=(Copy_u8Value<<DIO_PIN2);break;
    1498:	a8 e3       	ldi	r26, 0x38	; 56
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	28 2f       	mov	r18, r24
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	82 2b       	or	r24, r18
    14b4:	8c 93       	st	X, r24
    14b6:	6c c2       	rjmp	.+1240   	; 0x1990 <DIO_enuSetPinVal+0x820>
				case DIO_PIN3:
					PORTB &= ~(1<<DIO_PIN3);
    14b8:	a8 e3       	ldi	r26, 0x38	; 56
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e8 e3       	ldi	r30, 0x38	; 56
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	8c 93       	st	X, r24
					PORTB |=(Copy_u8Value<<DIO_PIN3);break;
    14c6:	a8 e3       	ldi	r26, 0x38	; 56
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e8 e3       	ldi	r30, 0x38	; 56
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	28 2f       	mov	r18, r24
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	82 2b       	or	r24, r18
    14e6:	8c 93       	st	X, r24
    14e8:	53 c2       	rjmp	.+1190   	; 0x1990 <DIO_enuSetPinVal+0x820>
				case DIO_PIN4:
					PORTB &= ~(1<<DIO_PIN4);
    14ea:	a8 e3       	ldi	r26, 0x38	; 56
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e8 e3       	ldi	r30, 0x38	; 56
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 7e       	andi	r24, 0xEF	; 239
    14f6:	8c 93       	st	X, r24
					PORTB |=(Copy_u8Value<<DIO_PIN4);break;
    14f8:	a8 e3       	ldi	r26, 0x38	; 56
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e8 e3       	ldi	r30, 0x38	; 56
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	82 95       	swap	r24
    150c:	92 95       	swap	r25
    150e:	90 7f       	andi	r25, 0xF0	; 240
    1510:	98 27       	eor	r25, r24
    1512:	80 7f       	andi	r24, 0xF0	; 240
    1514:	98 27       	eor	r25, r24
    1516:	82 2b       	or	r24, r18
    1518:	8c 93       	st	X, r24
    151a:	3a c2       	rjmp	.+1140   	; 0x1990 <DIO_enuSetPinVal+0x820>
				case DIO_PIN5:
					PORTB &= ~(1<<DIO_PIN5);
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8f 7d       	andi	r24, 0xDF	; 223
    1528:	8c 93       	st	X, r24
					PORTB |=(Copy_u8Value<<DIO_PIN5);break;
    152a:	a8 e3       	ldi	r26, 0x38	; 56
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e8 e3       	ldi	r30, 0x38	; 56
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	28 2f       	mov	r18, r24
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	82 95       	swap	r24
    1542:	92 95       	swap	r25
    1544:	90 7f       	andi	r25, 0xF0	; 240
    1546:	98 27       	eor	r25, r24
    1548:	80 7f       	andi	r24, 0xF0	; 240
    154a:	98 27       	eor	r25, r24
    154c:	82 2b       	or	r24, r18
    154e:	8c 93       	st	X, r24
    1550:	1f c2       	rjmp	.+1086   	; 0x1990 <DIO_enuSetPinVal+0x820>
				case DIO_PIN6:
					PORTB &= ~(1<<DIO_PIN6);
    1552:	a8 e3       	ldi	r26, 0x38	; 56
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 7b       	andi	r24, 0xBF	; 191
    155e:	8c 93       	st	X, r24
					PORTB |=(Copy_u8Value<<DIO_PIN6);break;
    1560:	a8 e3       	ldi	r26, 0x38	; 56
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e8 e3       	ldi	r30, 0x38	; 56
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	28 2f       	mov	r18, r24
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	00 24       	eor	r0, r0
    1574:	96 95       	lsr	r25
    1576:	87 95       	ror	r24
    1578:	07 94       	ror	r0
    157a:	96 95       	lsr	r25
    157c:	87 95       	ror	r24
    157e:	07 94       	ror	r0
    1580:	98 2f       	mov	r25, r24
    1582:	80 2d       	mov	r24, r0
    1584:	82 2b       	or	r24, r18
    1586:	8c 93       	st	X, r24
    1588:	03 c2       	rjmp	.+1030   	; 0x1990 <DIO_enuSetPinVal+0x820>
				case DIO_PIN7:
					PORTB &= ~(1<<DIO_PIN7);
    158a:	a8 e3       	ldi	r26, 0x38	; 56
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8f 77       	andi	r24, 0x7F	; 127
    1596:	8c 93       	st	X, r24
					PORTB |=(Copy_u8Value<<DIO_PIN7);break;
    1598:	a8 e3       	ldi	r26, 0x38	; 56
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e8 e3       	ldi	r30, 0x38	; 56
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	96 95       	lsr	r25
    15ac:	98 2f       	mov	r25, r24
    15ae:	88 27       	eor	r24, r24
    15b0:	97 95       	ror	r25
    15b2:	87 95       	ror	r24
    15b4:	82 2b       	or	r24, r18
    15b6:	8c 93       	st	X, r24
    15b8:	eb c1       	rjmp	.+982    	; 0x1990 <DIO_enuSetPinVal+0x820>
				}
				break;
				case DIO_PORTC://SelectFromPortC
					switch(Copy_u8PinId)
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	38 87       	std	Y+8, r19	; 0x08
    15c2:	2f 83       	std	Y+7, r18	; 0x07
    15c4:	8f 81       	ldd	r24, Y+7	; 0x07
    15c6:	98 85       	ldd	r25, Y+8	; 0x08
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <DIO_enuSetPinVal+0x460>
    15ce:	6a c0       	rjmp	.+212    	; 0x16a4 <DIO_enuSetPinVal+0x534>
    15d0:	2f 81       	ldd	r18, Y+7	; 0x07
    15d2:	38 85       	ldd	r19, Y+8	; 0x08
    15d4:	24 30       	cpi	r18, 0x04	; 4
    15d6:	31 05       	cpc	r19, r1
    15d8:	84 f4       	brge	.+32     	; 0x15fa <DIO_enuSetPinVal+0x48a>
    15da:	8f 81       	ldd	r24, Y+7	; 0x07
    15dc:	98 85       	ldd	r25, Y+8	; 0x08
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	a1 f1       	breq	.+104    	; 0x164c <DIO_enuSetPinVal+0x4dc>
    15e4:	2f 81       	ldd	r18, Y+7	; 0x07
    15e6:	38 85       	ldd	r19, Y+8	; 0x08
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <DIO_enuSetPinVal+0x480>
    15ee:	43 c0       	rjmp	.+134    	; 0x1676 <DIO_enuSetPinVal+0x506>
    15f0:	8f 81       	ldd	r24, Y+7	; 0x07
    15f2:	98 85       	ldd	r25, Y+8	; 0x08
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	d1 f0       	breq	.+52     	; 0x162c <DIO_enuSetPinVal+0x4bc>
    15f8:	cb c1       	rjmp	.+918    	; 0x1990 <DIO_enuSetPinVal+0x820>
    15fa:	2f 81       	ldd	r18, Y+7	; 0x07
    15fc:	38 85       	ldd	r19, Y+8	; 0x08
    15fe:	25 30       	cpi	r18, 0x05	; 5
    1600:	31 05       	cpc	r19, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <DIO_enuSetPinVal+0x496>
    1604:	81 c0       	rjmp	.+258    	; 0x1708 <DIO_enuSetPinVal+0x598>
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	98 85       	ldd	r25, Y+8	; 0x08
    160a:	85 30       	cpi	r24, 0x05	; 5
    160c:	91 05       	cpc	r25, r1
    160e:	0c f4       	brge	.+2      	; 0x1612 <DIO_enuSetPinVal+0x4a2>
    1610:	62 c0       	rjmp	.+196    	; 0x16d6 <DIO_enuSetPinVal+0x566>
    1612:	2f 81       	ldd	r18, Y+7	; 0x07
    1614:	38 85       	ldd	r19, Y+8	; 0x08
    1616:	26 30       	cpi	r18, 0x06	; 6
    1618:	31 05       	cpc	r19, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <DIO_enuSetPinVal+0x4ae>
    161c:	90 c0       	rjmp	.+288    	; 0x173e <DIO_enuSetPinVal+0x5ce>
    161e:	8f 81       	ldd	r24, Y+7	; 0x07
    1620:	98 85       	ldd	r25, Y+8	; 0x08
    1622:	87 30       	cpi	r24, 0x07	; 7
    1624:	91 05       	cpc	r25, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <DIO_enuSetPinVal+0x4ba>
    1628:	a6 c0       	rjmp	.+332    	; 0x1776 <DIO_enuSetPinVal+0x606>
    162a:	b2 c1       	rjmp	.+868    	; 0x1990 <DIO_enuSetPinVal+0x820>
					{
					case DIO_PIN0:
						PORTC &= ~(1<<DIO_PIN0);
    162c:	a5 e3       	ldi	r26, 0x35	; 53
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e5 e3       	ldi	r30, 0x35	; 53
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8e 7f       	andi	r24, 0xFE	; 254
    1638:	8c 93       	st	X, r24
						PORTC |=(Copy_u8Value<<DIO_PIN0);break;
    163a:	a5 e3       	ldi	r26, 0x35	; 53
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e3       	ldi	r30, 0x35	; 53
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	90 81       	ld	r25, Z
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	89 2b       	or	r24, r25
    1648:	8c 93       	st	X, r24
    164a:	a2 c1       	rjmp	.+836    	; 0x1990 <DIO_enuSetPinVal+0x820>
					case DIO_PIN1:
						PORTC &= ~(1<<DIO_PIN1);
    164c:	a5 e3       	ldi	r26, 0x35	; 53
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e5 e3       	ldi	r30, 0x35	; 53
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8d 7f       	andi	r24, 0xFD	; 253
    1658:	8c 93       	st	X, r24
						PORTC |=(Copy_u8Value<<DIO_PIN1);break;
    165a:	a5 e3       	ldi	r26, 0x35	; 53
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e5 e3       	ldi	r30, 0x35	; 53
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	28 2f       	mov	r18, r24
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	82 2b       	or	r24, r18
    1672:	8c 93       	st	X, r24
    1674:	8d c1       	rjmp	.+794    	; 0x1990 <DIO_enuSetPinVal+0x820>
					case DIO_PIN2:
						PORTC &= ~(1<<DIO_PIN2);
    1676:	a5 e3       	ldi	r26, 0x35	; 53
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e5 e3       	ldi	r30, 0x35	; 53
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8b 7f       	andi	r24, 0xFB	; 251
    1682:	8c 93       	st	X, r24
						PORTC |=(Copy_u8Value<<DIO_PIN2);break;
    1684:	a5 e3       	ldi	r26, 0x35	; 53
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e3       	ldi	r30, 0x35	; 53
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	28 2f       	mov	r18, r24
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	82 2b       	or	r24, r18
    16a0:	8c 93       	st	X, r24
    16a2:	76 c1       	rjmp	.+748    	; 0x1990 <DIO_enuSetPinVal+0x820>
					case DIO_PIN3:
						PORTC &= ~(1<<DIO_PIN3);
    16a4:	a5 e3       	ldi	r26, 0x35	; 53
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e3       	ldi	r30, 0x35	; 53
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	87 7f       	andi	r24, 0xF7	; 247
    16b0:	8c 93       	st	X, r24
						PORTC |=(Copy_u8Value<<DIO_PIN3);break;
    16b2:	a5 e3       	ldi	r26, 0x35	; 53
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e5 e3       	ldi	r30, 0x35	; 53
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	28 2f       	mov	r18, r24
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	82 2b       	or	r24, r18
    16d2:	8c 93       	st	X, r24
    16d4:	5d c1       	rjmp	.+698    	; 0x1990 <DIO_enuSetPinVal+0x820>
					case DIO_PIN4:
						PORTC &= ~(1<<DIO_PIN4);
    16d6:	a5 e3       	ldi	r26, 0x35	; 53
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e3       	ldi	r30, 0x35	; 53
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 7e       	andi	r24, 0xEF	; 239
    16e2:	8c 93       	st	X, r24
						PORTC |=(Copy_u8Value<<DIO_PIN4);break;
    16e4:	a5 e3       	ldi	r26, 0x35	; 53
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e3       	ldi	r30, 0x35	; 53
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	28 2f       	mov	r18, r24
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	82 95       	swap	r24
    16f8:	92 95       	swap	r25
    16fa:	90 7f       	andi	r25, 0xF0	; 240
    16fc:	98 27       	eor	r25, r24
    16fe:	80 7f       	andi	r24, 0xF0	; 240
    1700:	98 27       	eor	r25, r24
    1702:	82 2b       	or	r24, r18
    1704:	8c 93       	st	X, r24
    1706:	44 c1       	rjmp	.+648    	; 0x1990 <DIO_enuSetPinVal+0x820>
					case DIO_PIN5:
						PORTC &= ~(1<<DIO_PIN5);
    1708:	a5 e3       	ldi	r26, 0x35	; 53
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e5 e3       	ldi	r30, 0x35	; 53
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8f 7d       	andi	r24, 0xDF	; 223
    1714:	8c 93       	st	X, r24
						PORTC |=(Copy_u8Value<<DIO_PIN5);break;
    1716:	a5 e3       	ldi	r26, 0x35	; 53
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e5 e3       	ldi	r30, 0x35	; 53
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	28 2f       	mov	r18, r24
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	82 95       	swap	r24
    172e:	92 95       	swap	r25
    1730:	90 7f       	andi	r25, 0xF0	; 240
    1732:	98 27       	eor	r25, r24
    1734:	80 7f       	andi	r24, 0xF0	; 240
    1736:	98 27       	eor	r25, r24
    1738:	82 2b       	or	r24, r18
    173a:	8c 93       	st	X, r24
    173c:	29 c1       	rjmp	.+594    	; 0x1990 <DIO_enuSetPinVal+0x820>
					case DIO_PIN6:
						PORTC &= ~(1<<DIO_PIN6);
    173e:	a5 e3       	ldi	r26, 0x35	; 53
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e5 e3       	ldi	r30, 0x35	; 53
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8f 7b       	andi	r24, 0xBF	; 191
    174a:	8c 93       	st	X, r24
						PORTC |=(Copy_u8Value<<DIO_PIN6);break;
    174c:	a5 e3       	ldi	r26, 0x35	; 53
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e3       	ldi	r30, 0x35	; 53
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	28 2f       	mov	r18, r24
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	00 24       	eor	r0, r0
    1760:	96 95       	lsr	r25
    1762:	87 95       	ror	r24
    1764:	07 94       	ror	r0
    1766:	96 95       	lsr	r25
    1768:	87 95       	ror	r24
    176a:	07 94       	ror	r0
    176c:	98 2f       	mov	r25, r24
    176e:	80 2d       	mov	r24, r0
    1770:	82 2b       	or	r24, r18
    1772:	8c 93       	st	X, r24
    1774:	0d c1       	rjmp	.+538    	; 0x1990 <DIO_enuSetPinVal+0x820>
					case DIO_PIN7:
						PORTC &= ~(1<<DIO_PIN7);
    1776:	a5 e3       	ldi	r26, 0x35	; 53
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e3       	ldi	r30, 0x35	; 53
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8f 77       	andi	r24, 0x7F	; 127
    1782:	8c 93       	st	X, r24
						PORTC |=(Copy_u8Value<<DIO_PIN7);break;
    1784:	a5 e3       	ldi	r26, 0x35	; 53
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e3       	ldi	r30, 0x35	; 53
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	28 2f       	mov	r18, r24
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	96 95       	lsr	r25
    1798:	98 2f       	mov	r25, r24
    179a:	88 27       	eor	r24, r24
    179c:	97 95       	ror	r25
    179e:	87 95       	ror	r24
    17a0:	82 2b       	or	r24, r18
    17a2:	8c 93       	st	X, r24
    17a4:	f5 c0       	rjmp	.+490    	; 0x1990 <DIO_enuSetPinVal+0x820>
					}
					break;
					case DIO_PORTD://SelectFromPortD
						switch(Copy_u8PinId)
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3e 83       	std	Y+6, r19	; 0x06
    17ae:	2d 83       	std	Y+5, r18	; 0x05
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	91 05       	cpc	r25, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <DIO_enuSetPinVal+0x64c>
    17ba:	6a c0       	rjmp	.+212    	; 0x1890 <DIO_enuSetPinVal+0x720>
    17bc:	2d 81       	ldd	r18, Y+5	; 0x05
    17be:	3e 81       	ldd	r19, Y+6	; 0x06
    17c0:	24 30       	cpi	r18, 0x04	; 4
    17c2:	31 05       	cpc	r19, r1
    17c4:	84 f4       	brge	.+32     	; 0x17e6 <DIO_enuSetPinVal+0x676>
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	91 05       	cpc	r25, r1
    17ce:	a1 f1       	breq	.+104    	; 0x1838 <DIO_enuSetPinVal+0x6c8>
    17d0:	2d 81       	ldd	r18, Y+5	; 0x05
    17d2:	3e 81       	ldd	r19, Y+6	; 0x06
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	31 05       	cpc	r19, r1
    17d8:	0c f0       	brlt	.+2      	; 0x17dc <DIO_enuSetPinVal+0x66c>
    17da:	43 c0       	rjmp	.+134    	; 0x1862 <DIO_enuSetPinVal+0x6f2>
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	d1 f0       	breq	.+52     	; 0x1818 <DIO_enuSetPinVal+0x6a8>
    17e4:	d5 c0       	rjmp	.+426    	; 0x1990 <DIO_enuSetPinVal+0x820>
    17e6:	2d 81       	ldd	r18, Y+5	; 0x05
    17e8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ea:	25 30       	cpi	r18, 0x05	; 5
    17ec:	31 05       	cpc	r19, r1
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <DIO_enuSetPinVal+0x682>
    17f0:	81 c0       	rjmp	.+258    	; 0x18f4 <DIO_enuSetPinVal+0x784>
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	85 30       	cpi	r24, 0x05	; 5
    17f8:	91 05       	cpc	r25, r1
    17fa:	0c f4       	brge	.+2      	; 0x17fe <DIO_enuSetPinVal+0x68e>
    17fc:	62 c0       	rjmp	.+196    	; 0x18c2 <DIO_enuSetPinVal+0x752>
    17fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1800:	3e 81       	ldd	r19, Y+6	; 0x06
    1802:	26 30       	cpi	r18, 0x06	; 6
    1804:	31 05       	cpc	r19, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <DIO_enuSetPinVal+0x69a>
    1808:	90 c0       	rjmp	.+288    	; 0x192a <DIO_enuSetPinVal+0x7ba>
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	87 30       	cpi	r24, 0x07	; 7
    1810:	91 05       	cpc	r25, r1
    1812:	09 f4       	brne	.+2      	; 0x1816 <DIO_enuSetPinVal+0x6a6>
    1814:	a6 c0       	rjmp	.+332    	; 0x1962 <DIO_enuSetPinVal+0x7f2>
    1816:	bc c0       	rjmp	.+376    	; 0x1990 <DIO_enuSetPinVal+0x820>
						{
						case DIO_PIN0:
							PORTD &= ~(1<<DIO_PIN0);
    1818:	a2 e3       	ldi	r26, 0x32	; 50
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e2 e3       	ldi	r30, 0x32	; 50
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8e 7f       	andi	r24, 0xFE	; 254
    1824:	8c 93       	st	X, r24
							PORTD |=(Copy_u8Value<<DIO_PIN0);break;
    1826:	a2 e3       	ldi	r26, 0x32	; 50
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e2 e3       	ldi	r30, 0x32	; 50
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	90 81       	ld	r25, Z
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	89 2b       	or	r24, r25
    1834:	8c 93       	st	X, r24
    1836:	ac c0       	rjmp	.+344    	; 0x1990 <DIO_enuSetPinVal+0x820>
						case DIO_PIN1:
							PORTD &= ~(1<<DIO_PIN1);
    1838:	a2 e3       	ldi	r26, 0x32	; 50
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e2 e3       	ldi	r30, 0x32	; 50
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8d 7f       	andi	r24, 0xFD	; 253
    1844:	8c 93       	st	X, r24
							PORTD |=(Copy_u8Value<<DIO_PIN1);break;
    1846:	a2 e3       	ldi	r26, 0x32	; 50
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e2 e3       	ldi	r30, 0x32	; 50
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	28 2f       	mov	r18, r24
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	82 2b       	or	r24, r18
    185e:	8c 93       	st	X, r24
    1860:	97 c0       	rjmp	.+302    	; 0x1990 <DIO_enuSetPinVal+0x820>
						case DIO_PIN2:
							PORTD &= ~(1<<DIO_PIN2);
    1862:	a2 e3       	ldi	r26, 0x32	; 50
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e2 e3       	ldi	r30, 0x32	; 50
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8b 7f       	andi	r24, 0xFB	; 251
    186e:	8c 93       	st	X, r24
							PORTD |=(Copy_u8Value<<DIO_PIN2);break;
    1870:	a2 e3       	ldi	r26, 0x32	; 50
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e2 e3       	ldi	r30, 0x32	; 50
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	82 2b       	or	r24, r18
    188c:	8c 93       	st	X, r24
    188e:	80 c0       	rjmp	.+256    	; 0x1990 <DIO_enuSetPinVal+0x820>
						case DIO_PIN3:
							PORTD &= ~(1<<DIO_PIN3);
    1890:	a2 e3       	ldi	r26, 0x32	; 50
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e2 e3       	ldi	r30, 0x32	; 50
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	87 7f       	andi	r24, 0xF7	; 247
    189c:	8c 93       	st	X, r24
							PORTD |=(Copy_u8Value<<DIO_PIN3);break;
    189e:	a2 e3       	ldi	r26, 0x32	; 50
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e2 e3       	ldi	r30, 0x32	; 50
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	28 2f       	mov	r18, r24
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	82 2b       	or	r24, r18
    18be:	8c 93       	st	X, r24
    18c0:	67 c0       	rjmp	.+206    	; 0x1990 <DIO_enuSetPinVal+0x820>
						case DIO_PIN4:
							PORTD &= ~(1<<DIO_PIN4);
    18c2:	a2 e3       	ldi	r26, 0x32	; 50
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e2 e3       	ldi	r30, 0x32	; 50
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8f 7e       	andi	r24, 0xEF	; 239
    18ce:	8c 93       	st	X, r24
							PORTD |=(Copy_u8Value<<DIO_PIN4);break;
    18d0:	a2 e3       	ldi	r26, 0x32	; 50
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e2 e3       	ldi	r30, 0x32	; 50
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	82 95       	swap	r24
    18e4:	92 95       	swap	r25
    18e6:	90 7f       	andi	r25, 0xF0	; 240
    18e8:	98 27       	eor	r25, r24
    18ea:	80 7f       	andi	r24, 0xF0	; 240
    18ec:	98 27       	eor	r25, r24
    18ee:	82 2b       	or	r24, r18
    18f0:	8c 93       	st	X, r24
    18f2:	4e c0       	rjmp	.+156    	; 0x1990 <DIO_enuSetPinVal+0x820>
						case DIO_PIN5:
							PORTD &= ~(1<<DIO_PIN5);
    18f4:	a2 e3       	ldi	r26, 0x32	; 50
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e2 e3       	ldi	r30, 0x32	; 50
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8f 7d       	andi	r24, 0xDF	; 223
    1900:	8c 93       	st	X, r24
							PORTD |=(Copy_u8Value<<DIO_PIN5);break;
    1902:	a2 e3       	ldi	r26, 0x32	; 50
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e2 e3       	ldi	r30, 0x32	; 50
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	28 2f       	mov	r18, r24
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	82 95       	swap	r24
    191a:	92 95       	swap	r25
    191c:	90 7f       	andi	r25, 0xF0	; 240
    191e:	98 27       	eor	r25, r24
    1920:	80 7f       	andi	r24, 0xF0	; 240
    1922:	98 27       	eor	r25, r24
    1924:	82 2b       	or	r24, r18
    1926:	8c 93       	st	X, r24
    1928:	33 c0       	rjmp	.+102    	; 0x1990 <DIO_enuSetPinVal+0x820>
						case DIO_PIN6:
							PORTD &= ~(1<<DIO_PIN6);
    192a:	a2 e3       	ldi	r26, 0x32	; 50
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e2 e3       	ldi	r30, 0x32	; 50
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 7b       	andi	r24, 0xBF	; 191
    1936:	8c 93       	st	X, r24
							PORTD |=(Copy_u8Value<<DIO_PIN6);break;
    1938:	a2 e3       	ldi	r26, 0x32	; 50
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e2 e3       	ldi	r30, 0x32	; 50
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	28 2f       	mov	r18, r24
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	00 24       	eor	r0, r0
    194c:	96 95       	lsr	r25
    194e:	87 95       	ror	r24
    1950:	07 94       	ror	r0
    1952:	96 95       	lsr	r25
    1954:	87 95       	ror	r24
    1956:	07 94       	ror	r0
    1958:	98 2f       	mov	r25, r24
    195a:	80 2d       	mov	r24, r0
    195c:	82 2b       	or	r24, r18
    195e:	8c 93       	st	X, r24
    1960:	17 c0       	rjmp	.+46     	; 0x1990 <DIO_enuSetPinVal+0x820>
						case DIO_PIN7:
							PORTD &= ~(1<<DIO_PIN7);
    1962:	a2 e3       	ldi	r26, 0x32	; 50
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e2 e3       	ldi	r30, 0x32	; 50
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8f 77       	andi	r24, 0x7F	; 127
    196e:	8c 93       	st	X, r24
							PORTD |=(Copy_u8Value<<DIO_PIN7);break;
    1970:	a2 e3       	ldi	r26, 0x32	; 50
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e2 e3       	ldi	r30, 0x32	; 50
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	28 2f       	mov	r18, r24
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	96 95       	lsr	r25
    1984:	98 2f       	mov	r25, r24
    1986:	88 27       	eor	r24, r24
    1988:	97 95       	ror	r25
    198a:	87 95       	ror	r24
    198c:	82 2b       	or	r24, r18
    198e:	8c 93       	st	X, r24

						}
						break;

		}
		Local_enuErrorState = ES_OK;
    1990:	19 82       	std	Y+1, r1	; 0x01
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_enuSetPinVal+0x828>
	}
	else
	{
		Local_enuErrorState = ES_Out_Of_Range;
    1994:	83 e0       	ldi	r24, 0x03	; 3
    1996:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
}
    199a:	2e 96       	adiw	r28, 0x0e	; 14
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <DIO_enuToggelPin>:
ES_t DIO_enuToggelPin(u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	2d 97       	sbiw	r28, 0x0d	; 13
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	8a 83       	std	Y+2, r24	; 0x02
    19c2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <= DIO_PORTD && Copy_u8PinId<= DIO_PIN7)
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	08 f0       	brcs	.+2      	; 0x19d0 <DIO_enuToggelPin+0x24>
    19ce:	1f c2       	rjmp	.+1086   	; 0x1e0e <DIO_enuToggelPin+0x462>
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	88 30       	cpi	r24, 0x08	; 8
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <DIO_enuToggelPin+0x2c>
    19d6:	1b c2       	rjmp	.+1078   	; 0x1e0e <DIO_enuToggelPin+0x462>
	{
		switch(Copy_u8PortId)
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	3d 87       	std	Y+13, r19	; 0x0d
    19e0:	2c 87       	std	Y+12, r18	; 0x0c
    19e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    19e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	91 05       	cpc	r25, r1
    19ea:	09 f4       	brne	.+2      	; 0x19ee <DIO_enuToggelPin+0x42>
    19ec:	95 c0       	rjmp	.+298    	; 0x1b18 <DIO_enuToggelPin+0x16c>
    19ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    19f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <DIO_enuToggelPin+0x56>
    19f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    19fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	71 f0       	breq	.+28     	; 0x1a1c <DIO_enuToggelPin+0x70>
    1a00:	04 c2       	rjmp	.+1032   	; 0x1e0a <DIO_enuToggelPin+0x45e>
    1a02:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a04:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <DIO_enuToggelPin+0x62>
    1a0c:	03 c1       	rjmp	.+518    	; 0x1c14 <DIO_enuToggelPin+0x268>
    1a0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a10:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a12:	83 30       	cpi	r24, 0x03	; 3
    1a14:	91 05       	cpc	r25, r1
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <DIO_enuToggelPin+0x6e>
    1a18:	7b c1       	rjmp	.+758    	; 0x1d10 <DIO_enuToggelPin+0x364>
    1a1a:	f7 c1       	rjmp	.+1006   	; 0x1e0a <DIO_enuToggelPin+0x45e>
		{
		case DIO_PORTA://SelectFromPortA
			switch(Copy_u8PinId)
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	3b 87       	std	Y+11, r19	; 0x0b
    1a24:	2a 87       	std	Y+10, r18	; 0x0a
    1a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2a:	83 30       	cpi	r24, 0x03	; 3
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <DIO_enuToggelPin+0x86>
    1a30:	46 c0       	rjmp	.+140    	; 0x1abe <DIO_enuToggelPin+0x112>
    1a32:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a34:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a36:	24 30       	cpi	r18, 0x04	; 4
    1a38:	31 05       	cpc	r19, r1
    1a3a:	7c f4       	brge	.+30     	; 0x1a5a <DIO_enuToggelPin+0xae>
    1a3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	91 05       	cpc	r25, r1
    1a44:	51 f1       	breq	.+84     	; 0x1a9a <DIO_enuToggelPin+0xee>
    1a46:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a48:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a4a:	22 30       	cpi	r18, 0x02	; 2
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	74 f5       	brge	.+92     	; 0x1aac <DIO_enuToggelPin+0x100>
    1a50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	c1 f0       	breq	.+48     	; 0x1a88 <DIO_enuToggelPin+0xdc>
    1a58:	d8 c1       	rjmp	.+944    	; 0x1e0a <DIO_enuToggelPin+0x45e>
    1a5a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a5c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a5e:	25 30       	cpi	r18, 0x05	; 5
    1a60:	31 05       	cpc	r19, r1
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <DIO_enuToggelPin+0xba>
    1a64:	3e c0       	rjmp	.+124    	; 0x1ae2 <DIO_enuToggelPin+0x136>
    1a66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a6a:	85 30       	cpi	r24, 0x05	; 5
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	84 f1       	brlt	.+96     	; 0x1ad0 <DIO_enuToggelPin+0x124>
    1a70:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a72:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a74:	26 30       	cpi	r18, 0x06	; 6
    1a76:	31 05       	cpc	r19, r1
    1a78:	e9 f1       	breq	.+122    	; 0x1af4 <DIO_enuToggelPin+0x148>
    1a7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a7e:	87 30       	cpi	r24, 0x07	; 7
    1a80:	91 05       	cpc	r25, r1
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <DIO_enuToggelPin+0xda>
    1a84:	40 c0       	rjmp	.+128    	; 0x1b06 <DIO_enuToggelPin+0x15a>
    1a86:	c1 c1       	rjmp	.+898    	; 0x1e0a <DIO_enuToggelPin+0x45e>
			{
			case DIO_PIN0:

				PORTA ^=(1<<DIO_PIN0);break;
    1a88:	ab e3       	ldi	r26, 0x3B	; 59
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	eb e3       	ldi	r30, 0x3B	; 59
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	90 81       	ld	r25, Z
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	89 27       	eor	r24, r25
    1a96:	8c 93       	st	X, r24
    1a98:	b8 c1       	rjmp	.+880    	; 0x1e0a <DIO_enuToggelPin+0x45e>
			case DIO_PIN1:

				PORTA ^=(1<<DIO_PIN1);break;
    1a9a:	ab e3       	ldi	r26, 0x3B	; 59
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	eb e3       	ldi	r30, 0x3B	; 59
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	90 81       	ld	r25, Z
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	89 27       	eor	r24, r25
    1aa8:	8c 93       	st	X, r24
    1aaa:	af c1       	rjmp	.+862    	; 0x1e0a <DIO_enuToggelPin+0x45e>
			case DIO_PIN2:

				PORTA ^=(1<<DIO_PIN2);break;
    1aac:	ab e3       	ldi	r26, 0x3B	; 59
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	eb e3       	ldi	r30, 0x3B	; 59
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	90 81       	ld	r25, Z
    1ab6:	84 e0       	ldi	r24, 0x04	; 4
    1ab8:	89 27       	eor	r24, r25
    1aba:	8c 93       	st	X, r24
    1abc:	a6 c1       	rjmp	.+844    	; 0x1e0a <DIO_enuToggelPin+0x45e>
			case DIO_PIN3:

				PORTA ^=(1<<DIO_PIN3);break;
    1abe:	ab e3       	ldi	r26, 0x3B	; 59
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	eb e3       	ldi	r30, 0x3B	; 59
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	90 81       	ld	r25, Z
    1ac8:	88 e0       	ldi	r24, 0x08	; 8
    1aca:	89 27       	eor	r24, r25
    1acc:	8c 93       	st	X, r24
    1ace:	9d c1       	rjmp	.+826    	; 0x1e0a <DIO_enuToggelPin+0x45e>
			case DIO_PIN4:

				PORTA ^=(1<<DIO_PIN4);break;
    1ad0:	ab e3       	ldi	r26, 0x3B	; 59
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	eb e3       	ldi	r30, 0x3B	; 59
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	90 81       	ld	r25, Z
    1ada:	80 e1       	ldi	r24, 0x10	; 16
    1adc:	89 27       	eor	r24, r25
    1ade:	8c 93       	st	X, r24
    1ae0:	94 c1       	rjmp	.+808    	; 0x1e0a <DIO_enuToggelPin+0x45e>
			case DIO_PIN5:

				PORTA ^=(1<<DIO_PIN5);break;
    1ae2:	ab e3       	ldi	r26, 0x3B	; 59
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	eb e3       	ldi	r30, 0x3B	; 59
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	90 81       	ld	r25, Z
    1aec:	80 e2       	ldi	r24, 0x20	; 32
    1aee:	89 27       	eor	r24, r25
    1af0:	8c 93       	st	X, r24
    1af2:	8b c1       	rjmp	.+790    	; 0x1e0a <DIO_enuToggelPin+0x45e>
			case DIO_PIN6:

				PORTA ^=(1<<DIO_PIN6);break;
    1af4:	ab e3       	ldi	r26, 0x3B	; 59
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	eb e3       	ldi	r30, 0x3B	; 59
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	90 81       	ld	r25, Z
    1afe:	80 e4       	ldi	r24, 0x40	; 64
    1b00:	89 27       	eor	r24, r25
    1b02:	8c 93       	st	X, r24
    1b04:	82 c1       	rjmp	.+772    	; 0x1e0a <DIO_enuToggelPin+0x45e>
			case DIO_PIN7:

				PORTA ^=(1<<DIO_PIN7);break;
    1b06:	ab e3       	ldi	r26, 0x3B	; 59
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	eb e3       	ldi	r30, 0x3B	; 59
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	90 81       	ld	r25, Z
    1b10:	80 e8       	ldi	r24, 0x80	; 128
    1b12:	89 27       	eor	r24, r25
    1b14:	8c 93       	st	X, r24
    1b16:	79 c1       	rjmp	.+754    	; 0x1e0a <DIO_enuToggelPin+0x45e>

			}
			break;
			case DIO_PORTB://SelectFromPortB
				switch(Copy_u8PinId)
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	39 87       	std	Y+9, r19	; 0x09
    1b20:	28 87       	std	Y+8, r18	; 0x08
    1b22:	88 85       	ldd	r24, Y+8	; 0x08
    1b24:	99 85       	ldd	r25, Y+9	; 0x09
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <DIO_enuToggelPin+0x182>
    1b2c:	46 c0       	rjmp	.+140    	; 0x1bba <DIO_enuToggelPin+0x20e>
    1b2e:	28 85       	ldd	r18, Y+8	; 0x08
    1b30:	39 85       	ldd	r19, Y+9	; 0x09
    1b32:	24 30       	cpi	r18, 0x04	; 4
    1b34:	31 05       	cpc	r19, r1
    1b36:	7c f4       	brge	.+30     	; 0x1b56 <DIO_enuToggelPin+0x1aa>
    1b38:	88 85       	ldd	r24, Y+8	; 0x08
    1b3a:	99 85       	ldd	r25, Y+9	; 0x09
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	51 f1       	breq	.+84     	; 0x1b96 <DIO_enuToggelPin+0x1ea>
    1b42:	28 85       	ldd	r18, Y+8	; 0x08
    1b44:	39 85       	ldd	r19, Y+9	; 0x09
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	74 f5       	brge	.+92     	; 0x1ba8 <DIO_enuToggelPin+0x1fc>
    1b4c:	88 85       	ldd	r24, Y+8	; 0x08
    1b4e:	99 85       	ldd	r25, Y+9	; 0x09
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	c1 f0       	breq	.+48     	; 0x1b84 <DIO_enuToggelPin+0x1d8>
    1b54:	5a c1       	rjmp	.+692    	; 0x1e0a <DIO_enuToggelPin+0x45e>
    1b56:	28 85       	ldd	r18, Y+8	; 0x08
    1b58:	39 85       	ldd	r19, Y+9	; 0x09
    1b5a:	25 30       	cpi	r18, 0x05	; 5
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <DIO_enuToggelPin+0x1b6>
    1b60:	3e c0       	rjmp	.+124    	; 0x1bde <DIO_enuToggelPin+0x232>
    1b62:	88 85       	ldd	r24, Y+8	; 0x08
    1b64:	99 85       	ldd	r25, Y+9	; 0x09
    1b66:	85 30       	cpi	r24, 0x05	; 5
    1b68:	91 05       	cpc	r25, r1
    1b6a:	84 f1       	brlt	.+96     	; 0x1bcc <DIO_enuToggelPin+0x220>
    1b6c:	28 85       	ldd	r18, Y+8	; 0x08
    1b6e:	39 85       	ldd	r19, Y+9	; 0x09
    1b70:	26 30       	cpi	r18, 0x06	; 6
    1b72:	31 05       	cpc	r19, r1
    1b74:	e9 f1       	breq	.+122    	; 0x1bf0 <DIO_enuToggelPin+0x244>
    1b76:	88 85       	ldd	r24, Y+8	; 0x08
    1b78:	99 85       	ldd	r25, Y+9	; 0x09
    1b7a:	87 30       	cpi	r24, 0x07	; 7
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <DIO_enuToggelPin+0x1d6>
    1b80:	40 c0       	rjmp	.+128    	; 0x1c02 <DIO_enuToggelPin+0x256>
    1b82:	43 c1       	rjmp	.+646    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				{
				case DIO_PIN0:

					PORTB ^=(1<<DIO_PIN0);break;
    1b84:	a8 e3       	ldi	r26, 0x38	; 56
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e8 e3       	ldi	r30, 0x38	; 56
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	90 81       	ld	r25, Z
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	89 27       	eor	r24, r25
    1b92:	8c 93       	st	X, r24
    1b94:	3a c1       	rjmp	.+628    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				case DIO_PIN1:

					PORTB ^=(1<<DIO_PIN1);break;
    1b96:	a8 e3       	ldi	r26, 0x38	; 56
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e8 e3       	ldi	r30, 0x38	; 56
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	90 81       	ld	r25, Z
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	89 27       	eor	r24, r25
    1ba4:	8c 93       	st	X, r24
    1ba6:	31 c1       	rjmp	.+610    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				case DIO_PIN2:

					PORTB ^=(1<<DIO_PIN2);break;
    1ba8:	a8 e3       	ldi	r26, 0x38	; 56
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e8 e3       	ldi	r30, 0x38	; 56
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	90 81       	ld	r25, Z
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	89 27       	eor	r24, r25
    1bb6:	8c 93       	st	X, r24
    1bb8:	28 c1       	rjmp	.+592    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				case DIO_PIN3:

					PORTB ^=(1<<DIO_PIN3);break;
    1bba:	a8 e3       	ldi	r26, 0x38	; 56
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e8 e3       	ldi	r30, 0x38	; 56
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	90 81       	ld	r25, Z
    1bc4:	88 e0       	ldi	r24, 0x08	; 8
    1bc6:	89 27       	eor	r24, r25
    1bc8:	8c 93       	st	X, r24
    1bca:	1f c1       	rjmp	.+574    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				case DIO_PIN4:

					PORTB ^=(1<<DIO_PIN4);break;
    1bcc:	a8 e3       	ldi	r26, 0x38	; 56
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e8 e3       	ldi	r30, 0x38	; 56
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	90 81       	ld	r25, Z
    1bd6:	80 e1       	ldi	r24, 0x10	; 16
    1bd8:	89 27       	eor	r24, r25
    1bda:	8c 93       	st	X, r24
    1bdc:	16 c1       	rjmp	.+556    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				case DIO_PIN5:

					PORTB ^=(1<<DIO_PIN5);break;
    1bde:	a8 e3       	ldi	r26, 0x38	; 56
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e8 e3       	ldi	r30, 0x38	; 56
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	90 81       	ld	r25, Z
    1be8:	80 e2       	ldi	r24, 0x20	; 32
    1bea:	89 27       	eor	r24, r25
    1bec:	8c 93       	st	X, r24
    1bee:	0d c1       	rjmp	.+538    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				case DIO_PIN6:

					PORTB ^=(1<<DIO_PIN6);break;
    1bf0:	a8 e3       	ldi	r26, 0x38	; 56
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e8 e3       	ldi	r30, 0x38	; 56
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	90 81       	ld	r25, Z
    1bfa:	80 e4       	ldi	r24, 0x40	; 64
    1bfc:	89 27       	eor	r24, r25
    1bfe:	8c 93       	st	X, r24
    1c00:	04 c1       	rjmp	.+520    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				case DIO_PIN7:

					PORTB ^=(1<<DIO_PIN7);break;
    1c02:	a8 e3       	ldi	r26, 0x38	; 56
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e8 e3       	ldi	r30, 0x38	; 56
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	90 81       	ld	r25, Z
    1c0c:	80 e8       	ldi	r24, 0x80	; 128
    1c0e:	89 27       	eor	r24, r25
    1c10:	8c 93       	st	X, r24
    1c12:	fb c0       	rjmp	.+502    	; 0x1e0a <DIO_enuToggelPin+0x45e>
				}
				break;
				case DIO_PORTC://SelectFromPortC
					switch(Copy_u8PinId)
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3f 83       	std	Y+7, r19	; 0x07
    1c1c:	2e 83       	std	Y+6, r18	; 0x06
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	83 30       	cpi	r24, 0x03	; 3
    1c24:	91 05       	cpc	r25, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <DIO_enuToggelPin+0x27e>
    1c28:	46 c0       	rjmp	.+140    	; 0x1cb6 <DIO_enuToggelPin+0x30a>
    1c2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1c2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1c2e:	24 30       	cpi	r18, 0x04	; 4
    1c30:	31 05       	cpc	r19, r1
    1c32:	7c f4       	brge	.+30     	; 0x1c52 <DIO_enuToggelPin+0x2a6>
    1c34:	8e 81       	ldd	r24, Y+6	; 0x06
    1c36:	9f 81       	ldd	r25, Y+7	; 0x07
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	51 f1       	breq	.+84     	; 0x1c92 <DIO_enuToggelPin+0x2e6>
    1c3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c40:	3f 81       	ldd	r19, Y+7	; 0x07
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	74 f5       	brge	.+92     	; 0x1ca4 <DIO_enuToggelPin+0x2f8>
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	c1 f0       	breq	.+48     	; 0x1c80 <DIO_enuToggelPin+0x2d4>
    1c50:	dc c0       	rjmp	.+440    	; 0x1e0a <DIO_enuToggelPin+0x45e>
    1c52:	2e 81       	ldd	r18, Y+6	; 0x06
    1c54:	3f 81       	ldd	r19, Y+7	; 0x07
    1c56:	25 30       	cpi	r18, 0x05	; 5
    1c58:	31 05       	cpc	r19, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <DIO_enuToggelPin+0x2b2>
    1c5c:	3e c0       	rjmp	.+124    	; 0x1cda <DIO_enuToggelPin+0x32e>
    1c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c60:	9f 81       	ldd	r25, Y+7	; 0x07
    1c62:	85 30       	cpi	r24, 0x05	; 5
    1c64:	91 05       	cpc	r25, r1
    1c66:	84 f1       	brlt	.+96     	; 0x1cc8 <DIO_enuToggelPin+0x31c>
    1c68:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6c:	26 30       	cpi	r18, 0x06	; 6
    1c6e:	31 05       	cpc	r19, r1
    1c70:	e9 f1       	breq	.+122    	; 0x1cec <DIO_enuToggelPin+0x340>
    1c72:	8e 81       	ldd	r24, Y+6	; 0x06
    1c74:	9f 81       	ldd	r25, Y+7	; 0x07
    1c76:	87 30       	cpi	r24, 0x07	; 7
    1c78:	91 05       	cpc	r25, r1
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <DIO_enuToggelPin+0x2d2>
    1c7c:	40 c0       	rjmp	.+128    	; 0x1cfe <DIO_enuToggelPin+0x352>
    1c7e:	c5 c0       	rjmp	.+394    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					{
					case DIO_PIN0:

						PORTC ^=(1<<DIO_PIN0);break;
    1c80:	a5 e3       	ldi	r26, 0x35	; 53
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e5 e3       	ldi	r30, 0x35	; 53
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	90 81       	ld	r25, Z
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	89 27       	eor	r24, r25
    1c8e:	8c 93       	st	X, r24
    1c90:	bc c0       	rjmp	.+376    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					case DIO_PIN1:

						PORTC ^=(1<<DIO_PIN1);break;
    1c92:	a5 e3       	ldi	r26, 0x35	; 53
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e5 e3       	ldi	r30, 0x35	; 53
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	90 81       	ld	r25, Z
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	89 27       	eor	r24, r25
    1ca0:	8c 93       	st	X, r24
    1ca2:	b3 c0       	rjmp	.+358    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					case DIO_PIN2:

						PORTC ^=(1<<DIO_PIN2);break;
    1ca4:	a5 e3       	ldi	r26, 0x35	; 53
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e5 e3       	ldi	r30, 0x35	; 53
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	90 81       	ld	r25, Z
    1cae:	84 e0       	ldi	r24, 0x04	; 4
    1cb0:	89 27       	eor	r24, r25
    1cb2:	8c 93       	st	X, r24
    1cb4:	aa c0       	rjmp	.+340    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					case DIO_PIN3:

						PORTC ^=(1<<DIO_PIN3);break;
    1cb6:	a5 e3       	ldi	r26, 0x35	; 53
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e5 e3       	ldi	r30, 0x35	; 53
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	90 81       	ld	r25, Z
    1cc0:	88 e0       	ldi	r24, 0x08	; 8
    1cc2:	89 27       	eor	r24, r25
    1cc4:	8c 93       	st	X, r24
    1cc6:	a1 c0       	rjmp	.+322    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					case DIO_PIN4:

						PORTC ^=(1<<DIO_PIN4);break;
    1cc8:	a5 e3       	ldi	r26, 0x35	; 53
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e3       	ldi	r30, 0x35	; 53
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	90 81       	ld	r25, Z
    1cd2:	80 e1       	ldi	r24, 0x10	; 16
    1cd4:	89 27       	eor	r24, r25
    1cd6:	8c 93       	st	X, r24
    1cd8:	98 c0       	rjmp	.+304    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					case DIO_PIN5:

						PORTC ^=(1<<DIO_PIN5);break;
    1cda:	a5 e3       	ldi	r26, 0x35	; 53
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e5 e3       	ldi	r30, 0x35	; 53
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	90 81       	ld	r25, Z
    1ce4:	80 e2       	ldi	r24, 0x20	; 32
    1ce6:	89 27       	eor	r24, r25
    1ce8:	8c 93       	st	X, r24
    1cea:	8f c0       	rjmp	.+286    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					case DIO_PIN6:

						PORTC ^=(1<<DIO_PIN6);break;
    1cec:	a5 e3       	ldi	r26, 0x35	; 53
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e5 e3       	ldi	r30, 0x35	; 53
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	90 81       	ld	r25, Z
    1cf6:	80 e4       	ldi	r24, 0x40	; 64
    1cf8:	89 27       	eor	r24, r25
    1cfa:	8c 93       	st	X, r24
    1cfc:	86 c0       	rjmp	.+268    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					case DIO_PIN7:

						PORTC ^=(1<<DIO_PIN7);break;
    1cfe:	a5 e3       	ldi	r26, 0x35	; 53
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e5 e3       	ldi	r30, 0x35	; 53
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	90 81       	ld	r25, Z
    1d08:	80 e8       	ldi	r24, 0x80	; 128
    1d0a:	89 27       	eor	r24, r25
    1d0c:	8c 93       	st	X, r24
    1d0e:	7d c0       	rjmp	.+250    	; 0x1e0a <DIO_enuToggelPin+0x45e>
					}
					break;
					case DIO_PORTD://SelectFromPortD
						switch(Copy_u8PinId)
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3d 83       	std	Y+5, r19	; 0x05
    1d18:	2c 83       	std	Y+4, r18	; 0x04
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	91 05       	cpc	r25, r1
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <DIO_enuToggelPin+0x37a>
    1d24:	46 c0       	rjmp	.+140    	; 0x1db2 <DIO_enuToggelPin+0x406>
    1d26:	2c 81       	ldd	r18, Y+4	; 0x04
    1d28:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2a:	24 30       	cpi	r18, 0x04	; 4
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	7c f4       	brge	.+30     	; 0x1d4e <DIO_enuToggelPin+0x3a2>
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	91 05       	cpc	r25, r1
    1d38:	51 f1       	breq	.+84     	; 0x1d8e <DIO_enuToggelPin+0x3e2>
    1d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	74 f5       	brge	.+92     	; 0x1da0 <DIO_enuToggelPin+0x3f4>
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	c1 f0       	breq	.+48     	; 0x1d7c <DIO_enuToggelPin+0x3d0>
    1d4c:	5e c0       	rjmp	.+188    	; 0x1e0a <DIO_enuToggelPin+0x45e>
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	3d 81       	ldd	r19, Y+5	; 0x05
    1d52:	25 30       	cpi	r18, 0x05	; 5
    1d54:	31 05       	cpc	r19, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <DIO_enuToggelPin+0x3ae>
    1d58:	3e c0       	rjmp	.+124    	; 0x1dd6 <DIO_enuToggelPin+0x42a>
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5e:	85 30       	cpi	r24, 0x05	; 5
    1d60:	91 05       	cpc	r25, r1
    1d62:	84 f1       	brlt	.+96     	; 0x1dc4 <DIO_enuToggelPin+0x418>
    1d64:	2c 81       	ldd	r18, Y+4	; 0x04
    1d66:	3d 81       	ldd	r19, Y+5	; 0x05
    1d68:	26 30       	cpi	r18, 0x06	; 6
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	e9 f1       	breq	.+122    	; 0x1de8 <DIO_enuToggelPin+0x43c>
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	87 30       	cpi	r24, 0x07	; 7
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <DIO_enuToggelPin+0x3ce>
    1d78:	40 c0       	rjmp	.+128    	; 0x1dfa <DIO_enuToggelPin+0x44e>
    1d7a:	47 c0       	rjmp	.+142    	; 0x1e0a <DIO_enuToggelPin+0x45e>
						{
						case DIO_PIN0:

							PORTD ^=(1<<DIO_PIN0);break;
    1d7c:	a2 e3       	ldi	r26, 0x32	; 50
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e2 e3       	ldi	r30, 0x32	; 50
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	90 81       	ld	r25, Z
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	89 27       	eor	r24, r25
    1d8a:	8c 93       	st	X, r24
    1d8c:	3e c0       	rjmp	.+124    	; 0x1e0a <DIO_enuToggelPin+0x45e>
						case DIO_PIN1:

							PORTD ^=(1<<DIO_PIN1);break;
    1d8e:	a2 e3       	ldi	r26, 0x32	; 50
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e2 e3       	ldi	r30, 0x32	; 50
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	90 81       	ld	r25, Z
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	89 27       	eor	r24, r25
    1d9c:	8c 93       	st	X, r24
    1d9e:	35 c0       	rjmp	.+106    	; 0x1e0a <DIO_enuToggelPin+0x45e>
						case DIO_PIN2:

							PORTD ^=(1<<DIO_PIN2);break;
    1da0:	a2 e3       	ldi	r26, 0x32	; 50
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e2 e3       	ldi	r30, 0x32	; 50
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	90 81       	ld	r25, Z
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	89 27       	eor	r24, r25
    1dae:	8c 93       	st	X, r24
    1db0:	2c c0       	rjmp	.+88     	; 0x1e0a <DIO_enuToggelPin+0x45e>
						case DIO_PIN3:

							PORTD ^=(1<<DIO_PIN3);break;
    1db2:	a2 e3       	ldi	r26, 0x32	; 50
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e2 e3       	ldi	r30, 0x32	; 50
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	90 81       	ld	r25, Z
    1dbc:	88 e0       	ldi	r24, 0x08	; 8
    1dbe:	89 27       	eor	r24, r25
    1dc0:	8c 93       	st	X, r24
    1dc2:	23 c0       	rjmp	.+70     	; 0x1e0a <DIO_enuToggelPin+0x45e>
						case DIO_PIN4:

							PORTD ^=(1<<DIO_PIN4);break;
    1dc4:	a2 e3       	ldi	r26, 0x32	; 50
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e2 e3       	ldi	r30, 0x32	; 50
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	90 81       	ld	r25, Z
    1dce:	80 e1       	ldi	r24, 0x10	; 16
    1dd0:	89 27       	eor	r24, r25
    1dd2:	8c 93       	st	X, r24
    1dd4:	1a c0       	rjmp	.+52     	; 0x1e0a <DIO_enuToggelPin+0x45e>
						case DIO_PIN5:

							PORTD ^=(1<<DIO_PIN5);break;
    1dd6:	a2 e3       	ldi	r26, 0x32	; 50
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e2 e3       	ldi	r30, 0x32	; 50
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	90 81       	ld	r25, Z
    1de0:	80 e2       	ldi	r24, 0x20	; 32
    1de2:	89 27       	eor	r24, r25
    1de4:	8c 93       	st	X, r24
    1de6:	11 c0       	rjmp	.+34     	; 0x1e0a <DIO_enuToggelPin+0x45e>
						case DIO_PIN6:

							PORTD ^=(1<<DIO_PIN6);break;
    1de8:	a2 e3       	ldi	r26, 0x32	; 50
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e2 e3       	ldi	r30, 0x32	; 50
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	90 81       	ld	r25, Z
    1df2:	80 e4       	ldi	r24, 0x40	; 64
    1df4:	89 27       	eor	r24, r25
    1df6:	8c 93       	st	X, r24
    1df8:	08 c0       	rjmp	.+16     	; 0x1e0a <DIO_enuToggelPin+0x45e>
						case DIO_PIN7:

							PORTD ^=(1<<DIO_PIN7);break;
    1dfa:	a2 e3       	ldi	r26, 0x32	; 50
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e2 e3       	ldi	r30, 0x32	; 50
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	90 81       	ld	r25, Z
    1e04:	80 e8       	ldi	r24, 0x80	; 128
    1e06:	89 27       	eor	r24, r25
    1e08:	8c 93       	st	X, r24

						}
						break;

		}
		Local_enuErrorState = ES_OK;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_enuToggelPin+0x466>
	}
	else
	{
		Local_enuErrorState = ES_Out_Of_Range;
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e14:	2d 96       	adiw	r28, 0x0d	; 13
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <DIO_enuGetPinVal>:
ES_t DIO_enuGetPinVal(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_u8Value)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	2f 97       	sbiw	r28, 0x0f	; 15
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
    1e3c:	6b 83       	std	Y+3, r22	; 0x03
    1e3e:	5d 83       	std	Y+5, r21	; 0x05
    1e40:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortId <= DIO_PORTD && Copy_u8PinId<= DIO_PIN7)
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	84 30       	cpi	r24, 0x04	; 4
    1e4a:	08 f0       	brcs	.+2      	; 0x1e4e <DIO_enuGetPinVal+0x28>
    1e4c:	47 c2       	rjmp	.+1166   	; 0x22dc <DIO_enuGetPinVal+0x4b6>
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 30       	cpi	r24, 0x08	; 8
    1e52:	08 f0       	brcs	.+2      	; 0x1e56 <DIO_enuGetPinVal+0x30>
    1e54:	43 c2       	rjmp	.+1158   	; 0x22dc <DIO_enuGetPinVal+0x4b6>
	{
		switch(Copy_u8PortId)
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	3f 87       	std	Y+15, r19	; 0x0f
    1e5e:	2e 87       	std	Y+14, r18	; 0x0e
    1e60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	91 05       	cpc	r25, r1
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <DIO_enuGetPinVal+0x46>
    1e6a:	9f c0       	rjmp	.+318    	; 0x1faa <DIO_enuGetPinVal+0x184>
    1e6c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e6e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <DIO_enuGetPinVal+0x5a>
    1e76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	71 f0       	breq	.+28     	; 0x1e9a <DIO_enuGetPinVal+0x74>
    1e7e:	2c c2       	rjmp	.+1112   	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
    1e80:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e82:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <DIO_enuGetPinVal+0x66>
    1e8a:	17 c1       	rjmp	.+558    	; 0x20ba <DIO_enuGetPinVal+0x294>
    1e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e90:	83 30       	cpi	r24, 0x03	; 3
    1e92:	91 05       	cpc	r25, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <DIO_enuGetPinVal+0x72>
    1e96:	99 c1       	rjmp	.+818    	; 0x21ca <DIO_enuGetPinVal+0x3a4>
    1e98:	1f c2       	rjmp	.+1086   	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
		{
		case DIO_PORTA://SelectFromPortA
			switch(Copy_u8PinId)
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3d 87       	std	Y+13, r19	; 0x0d
    1ea2:	2c 87       	std	Y+12, r18	; 0x0c
    1ea4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ea6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <DIO_enuGetPinVal+0x8a>
    1eae:	47 c0       	rjmp	.+142    	; 0x1f3e <DIO_enuGetPinVal+0x118>
    1eb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eb2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1eb4:	24 30       	cpi	r18, 0x04	; 4
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	7c f4       	brge	.+30     	; 0x1ed8 <DIO_enuGetPinVal+0xb2>
    1eba:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ebc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	51 f1       	breq	.+84     	; 0x1f18 <DIO_enuGetPinVal+0xf2>
    1ec4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ec6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ec8:	22 30       	cpi	r18, 0x02	; 2
    1eca:	31 05       	cpc	r19, r1
    1ecc:	74 f5       	brge	.+92     	; 0x1f2a <DIO_enuGetPinVal+0x104>
    1ece:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ed0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	c9 f0       	breq	.+50     	; 0x1f08 <DIO_enuGetPinVal+0xe2>
    1ed6:	00 c2       	rjmp	.+1024   	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
    1ed8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eda:	3d 85       	ldd	r19, Y+13	; 0x0d
    1edc:	25 30       	cpi	r18, 0x05	; 5
    1ede:	31 05       	cpc	r19, r1
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <DIO_enuGetPinVal+0xbe>
    1ee2:	42 c0       	rjmp	.+132    	; 0x1f68 <DIO_enuGetPinVal+0x142>
    1ee4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ee6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ee8:	85 30       	cpi	r24, 0x05	; 5
    1eea:	91 05       	cpc	r25, r1
    1eec:	9c f1       	brlt	.+102    	; 0x1f54 <DIO_enuGetPinVal+0x12e>
    1eee:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ef0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ef2:	26 30       	cpi	r18, 0x06	; 6
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <DIO_enuGetPinVal+0xd4>
    1ef8:	42 c0       	rjmp	.+132    	; 0x1f7e <DIO_enuGetPinVal+0x158>
    1efa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1efc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1efe:	87 30       	cpi	r24, 0x07	; 7
    1f00:	91 05       	cpc	r25, r1
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <DIO_enuGetPinVal+0xe0>
    1f04:	48 c0       	rjmp	.+144    	; 0x1f96 <DIO_enuGetPinVal+0x170>
    1f06:	e8 c1       	rjmp	.+976    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
			{
			case DIO_PIN0:

				*Copy_u8Value =((PINA>>DIO_PIN0)&1);break;
    1f08:	e9 e3       	ldi	r30, 0x39	; 57
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	81 70       	andi	r24, 0x01	; 1
    1f10:	ec 81       	ldd	r30, Y+4	; 0x04
    1f12:	fd 81       	ldd	r31, Y+5	; 0x05
    1f14:	80 83       	st	Z, r24
    1f16:	e0 c1       	rjmp	.+960    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
			case DIO_PIN1:

				*Copy_u8Value =((PINA>>DIO_PIN1)&1);break;
    1f18:	e9 e3       	ldi	r30, 0x39	; 57
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	86 95       	lsr	r24
    1f20:	81 70       	andi	r24, 0x01	; 1
    1f22:	ec 81       	ldd	r30, Y+4	; 0x04
    1f24:	fd 81       	ldd	r31, Y+5	; 0x05
    1f26:	80 83       	st	Z, r24
    1f28:	d7 c1       	rjmp	.+942    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
			case DIO_PIN2:

				*Copy_u8Value =((PINA>>DIO_PIN2)&1);break;
    1f2a:	e9 e3       	ldi	r30, 0x39	; 57
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	86 95       	lsr	r24
    1f32:	86 95       	lsr	r24
    1f34:	81 70       	andi	r24, 0x01	; 1
    1f36:	ec 81       	ldd	r30, Y+4	; 0x04
    1f38:	fd 81       	ldd	r31, Y+5	; 0x05
    1f3a:	80 83       	st	Z, r24
    1f3c:	cd c1       	rjmp	.+922    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
			case DIO_PIN3:

				*Copy_u8Value =((PINA>>DIO_PIN3)&1);break;
    1f3e:	e9 e3       	ldi	r30, 0x39	; 57
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	86 95       	lsr	r24
    1f46:	86 95       	lsr	r24
    1f48:	86 95       	lsr	r24
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f4e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f50:	80 83       	st	Z, r24
    1f52:	c2 c1       	rjmp	.+900    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
			case DIO_PIN4:

				*Copy_u8Value =((PINA>>DIO_PIN4)&1);break;
    1f54:	e9 e3       	ldi	r30, 0x39	; 57
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 95       	swap	r24
    1f5c:	8f 70       	andi	r24, 0x0F	; 15
    1f5e:	81 70       	andi	r24, 0x01	; 1
    1f60:	ec 81       	ldd	r30, Y+4	; 0x04
    1f62:	fd 81       	ldd	r31, Y+5	; 0x05
    1f64:	80 83       	st	Z, r24
    1f66:	b8 c1       	rjmp	.+880    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
			case DIO_PIN5:

				*Copy_u8Value =((PINA>>DIO_PIN5)&1);break;
    1f68:	e9 e3       	ldi	r30, 0x39	; 57
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	82 95       	swap	r24
    1f70:	86 95       	lsr	r24
    1f72:	87 70       	andi	r24, 0x07	; 7
    1f74:	81 70       	andi	r24, 0x01	; 1
    1f76:	ec 81       	ldd	r30, Y+4	; 0x04
    1f78:	fd 81       	ldd	r31, Y+5	; 0x05
    1f7a:	80 83       	st	Z, r24
    1f7c:	ad c1       	rjmp	.+858    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
			case DIO_PIN6:

				*Copy_u8Value =((PINA>>DIO_PIN6)&1);break;
    1f7e:	e9 e3       	ldi	r30, 0x39	; 57
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	82 95       	swap	r24
    1f86:	86 95       	lsr	r24
    1f88:	86 95       	lsr	r24
    1f8a:	83 70       	andi	r24, 0x03	; 3
    1f8c:	81 70       	andi	r24, 0x01	; 1
    1f8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f90:	fd 81       	ldd	r31, Y+5	; 0x05
    1f92:	80 83       	st	Z, r24
    1f94:	a1 c1       	rjmp	.+834    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
			case DIO_PIN7:

				*Copy_u8Value =((PINA>>DIO_PIN7)&1);break;
    1f96:	e9 e3       	ldi	r30, 0x39	; 57
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	88 1f       	adc	r24, r24
    1f9e:	88 27       	eor	r24, r24
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	ec 81       	ldd	r30, Y+4	; 0x04
    1fa4:	fd 81       	ldd	r31, Y+5	; 0x05
    1fa6:	80 83       	st	Z, r24
    1fa8:	97 c1       	rjmp	.+814    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>

			}
			break;
			case DIO_PORTB://SelectFromPortB
				switch(Copy_u8PinId)
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	3b 87       	std	Y+11, r19	; 0x0b
    1fb2:	2a 87       	std	Y+10, r18	; 0x0a
    1fb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fb8:	83 30       	cpi	r24, 0x03	; 3
    1fba:	91 05       	cpc	r25, r1
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <DIO_enuGetPinVal+0x19a>
    1fbe:	47 c0       	rjmp	.+142    	; 0x204e <DIO_enuGetPinVal+0x228>
    1fc0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fc2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1fc4:	24 30       	cpi	r18, 0x04	; 4
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	7c f4       	brge	.+30     	; 0x1fe8 <DIO_enuGetPinVal+0x1c2>
    1fca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	51 f1       	breq	.+84     	; 0x2028 <DIO_enuGetPinVal+0x202>
    1fd4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fd6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1fd8:	22 30       	cpi	r18, 0x02	; 2
    1fda:	31 05       	cpc	r19, r1
    1fdc:	74 f5       	brge	.+92     	; 0x203a <DIO_enuGetPinVal+0x214>
    1fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	c9 f0       	breq	.+50     	; 0x2018 <DIO_enuGetPinVal+0x1f2>
    1fe6:	78 c1       	rjmp	.+752    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
    1fe8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fea:	3b 85       	ldd	r19, Y+11	; 0x0b
    1fec:	25 30       	cpi	r18, 0x05	; 5
    1fee:	31 05       	cpc	r19, r1
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <DIO_enuGetPinVal+0x1ce>
    1ff2:	42 c0       	rjmp	.+132    	; 0x2078 <DIO_enuGetPinVal+0x252>
    1ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ff8:	85 30       	cpi	r24, 0x05	; 5
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	9c f1       	brlt	.+102    	; 0x2064 <DIO_enuGetPinVal+0x23e>
    1ffe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2000:	3b 85       	ldd	r19, Y+11	; 0x0b
    2002:	26 30       	cpi	r18, 0x06	; 6
    2004:	31 05       	cpc	r19, r1
    2006:	09 f4       	brne	.+2      	; 0x200a <DIO_enuGetPinVal+0x1e4>
    2008:	42 c0       	rjmp	.+132    	; 0x208e <DIO_enuGetPinVal+0x268>
    200a:	8a 85       	ldd	r24, Y+10	; 0x0a
    200c:	9b 85       	ldd	r25, Y+11	; 0x0b
    200e:	87 30       	cpi	r24, 0x07	; 7
    2010:	91 05       	cpc	r25, r1
    2012:	09 f4       	brne	.+2      	; 0x2016 <DIO_enuGetPinVal+0x1f0>
    2014:	48 c0       	rjmp	.+144    	; 0x20a6 <DIO_enuGetPinVal+0x280>
    2016:	60 c1       	rjmp	.+704    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				{
				case DIO_PIN0:

					*Copy_u8Value =((PINB>>DIO_PIN0)&1);break;
    2018:	e6 e3       	ldi	r30, 0x36	; 54
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	81 70       	andi	r24, 0x01	; 1
    2020:	ec 81       	ldd	r30, Y+4	; 0x04
    2022:	fd 81       	ldd	r31, Y+5	; 0x05
    2024:	80 83       	st	Z, r24
    2026:	58 c1       	rjmp	.+688    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				case DIO_PIN1:

					*Copy_u8Value =((PINB>>DIO_PIN1)&1);break;
    2028:	e6 e3       	ldi	r30, 0x36	; 54
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	86 95       	lsr	r24
    2030:	81 70       	andi	r24, 0x01	; 1
    2032:	ec 81       	ldd	r30, Y+4	; 0x04
    2034:	fd 81       	ldd	r31, Y+5	; 0x05
    2036:	80 83       	st	Z, r24
    2038:	4f c1       	rjmp	.+670    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				case DIO_PIN2:

					*Copy_u8Value =((PINB>>DIO_PIN2)&1);break;
    203a:	e6 e3       	ldi	r30, 0x36	; 54
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	86 95       	lsr	r24
    2042:	86 95       	lsr	r24
    2044:	81 70       	andi	r24, 0x01	; 1
    2046:	ec 81       	ldd	r30, Y+4	; 0x04
    2048:	fd 81       	ldd	r31, Y+5	; 0x05
    204a:	80 83       	st	Z, r24
    204c:	45 c1       	rjmp	.+650    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				case DIO_PIN3:

					*Copy_u8Value =((PINB>>DIO_PIN3)&1);break;
    204e:	e6 e3       	ldi	r30, 0x36	; 54
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	86 95       	lsr	r24
    2056:	86 95       	lsr	r24
    2058:	86 95       	lsr	r24
    205a:	81 70       	andi	r24, 0x01	; 1
    205c:	ec 81       	ldd	r30, Y+4	; 0x04
    205e:	fd 81       	ldd	r31, Y+5	; 0x05
    2060:	80 83       	st	Z, r24
    2062:	3a c1       	rjmp	.+628    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				case DIO_PIN4:

					*Copy_u8Value =((PINB>>DIO_PIN4)&1);break;
    2064:	e6 e3       	ldi	r30, 0x36	; 54
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	82 95       	swap	r24
    206c:	8f 70       	andi	r24, 0x0F	; 15
    206e:	81 70       	andi	r24, 0x01	; 1
    2070:	ec 81       	ldd	r30, Y+4	; 0x04
    2072:	fd 81       	ldd	r31, Y+5	; 0x05
    2074:	80 83       	st	Z, r24
    2076:	30 c1       	rjmp	.+608    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				case DIO_PIN5:

					*Copy_u8Value =((PINB>>DIO_PIN5)&1);break;
    2078:	e6 e3       	ldi	r30, 0x36	; 54
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	82 95       	swap	r24
    2080:	86 95       	lsr	r24
    2082:	87 70       	andi	r24, 0x07	; 7
    2084:	81 70       	andi	r24, 0x01	; 1
    2086:	ec 81       	ldd	r30, Y+4	; 0x04
    2088:	fd 81       	ldd	r31, Y+5	; 0x05
    208a:	80 83       	st	Z, r24
    208c:	25 c1       	rjmp	.+586    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				case DIO_PIN6:

					*Copy_u8Value =((PINB>>DIO_PIN6)&1);break;
    208e:	e6 e3       	ldi	r30, 0x36	; 54
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	82 95       	swap	r24
    2096:	86 95       	lsr	r24
    2098:	86 95       	lsr	r24
    209a:	83 70       	andi	r24, 0x03	; 3
    209c:	81 70       	andi	r24, 0x01	; 1
    209e:	ec 81       	ldd	r30, Y+4	; 0x04
    20a0:	fd 81       	ldd	r31, Y+5	; 0x05
    20a2:	80 83       	st	Z, r24
    20a4:	19 c1       	rjmp	.+562    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				case DIO_PIN7:

					*Copy_u8Value =((PINB>>DIO_PIN7)&1);break;
    20a6:	e6 e3       	ldi	r30, 0x36	; 54
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	88 1f       	adc	r24, r24
    20ae:	88 27       	eor	r24, r24
    20b0:	88 1f       	adc	r24, r24
    20b2:	ec 81       	ldd	r30, Y+4	; 0x04
    20b4:	fd 81       	ldd	r31, Y+5	; 0x05
    20b6:	80 83       	st	Z, r24
    20b8:	0f c1       	rjmp	.+542    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
				}
				break;
				case DIO_PORTC://SelectFromPortC
					switch(Copy_u8PinId)
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	39 87       	std	Y+9, r19	; 0x09
    20c2:	28 87       	std	Y+8, r18	; 0x08
    20c4:	88 85       	ldd	r24, Y+8	; 0x08
    20c6:	99 85       	ldd	r25, Y+9	; 0x09
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	91 05       	cpc	r25, r1
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <DIO_enuGetPinVal+0x2aa>
    20ce:	47 c0       	rjmp	.+142    	; 0x215e <DIO_enuGetPinVal+0x338>
    20d0:	28 85       	ldd	r18, Y+8	; 0x08
    20d2:	39 85       	ldd	r19, Y+9	; 0x09
    20d4:	24 30       	cpi	r18, 0x04	; 4
    20d6:	31 05       	cpc	r19, r1
    20d8:	7c f4       	brge	.+30     	; 0x20f8 <DIO_enuGetPinVal+0x2d2>
    20da:	88 85       	ldd	r24, Y+8	; 0x08
    20dc:	99 85       	ldd	r25, Y+9	; 0x09
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	91 05       	cpc	r25, r1
    20e2:	51 f1       	breq	.+84     	; 0x2138 <DIO_enuGetPinVal+0x312>
    20e4:	28 85       	ldd	r18, Y+8	; 0x08
    20e6:	39 85       	ldd	r19, Y+9	; 0x09
    20e8:	22 30       	cpi	r18, 0x02	; 2
    20ea:	31 05       	cpc	r19, r1
    20ec:	74 f5       	brge	.+92     	; 0x214a <DIO_enuGetPinVal+0x324>
    20ee:	88 85       	ldd	r24, Y+8	; 0x08
    20f0:	99 85       	ldd	r25, Y+9	; 0x09
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	c9 f0       	breq	.+50     	; 0x2128 <DIO_enuGetPinVal+0x302>
    20f6:	f0 c0       	rjmp	.+480    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
    20f8:	28 85       	ldd	r18, Y+8	; 0x08
    20fa:	39 85       	ldd	r19, Y+9	; 0x09
    20fc:	25 30       	cpi	r18, 0x05	; 5
    20fe:	31 05       	cpc	r19, r1
    2100:	09 f4       	brne	.+2      	; 0x2104 <DIO_enuGetPinVal+0x2de>
    2102:	42 c0       	rjmp	.+132    	; 0x2188 <DIO_enuGetPinVal+0x362>
    2104:	88 85       	ldd	r24, Y+8	; 0x08
    2106:	99 85       	ldd	r25, Y+9	; 0x09
    2108:	85 30       	cpi	r24, 0x05	; 5
    210a:	91 05       	cpc	r25, r1
    210c:	9c f1       	brlt	.+102    	; 0x2174 <DIO_enuGetPinVal+0x34e>
    210e:	28 85       	ldd	r18, Y+8	; 0x08
    2110:	39 85       	ldd	r19, Y+9	; 0x09
    2112:	26 30       	cpi	r18, 0x06	; 6
    2114:	31 05       	cpc	r19, r1
    2116:	09 f4       	brne	.+2      	; 0x211a <DIO_enuGetPinVal+0x2f4>
    2118:	42 c0       	rjmp	.+132    	; 0x219e <DIO_enuGetPinVal+0x378>
    211a:	88 85       	ldd	r24, Y+8	; 0x08
    211c:	99 85       	ldd	r25, Y+9	; 0x09
    211e:	87 30       	cpi	r24, 0x07	; 7
    2120:	91 05       	cpc	r25, r1
    2122:	09 f4       	brne	.+2      	; 0x2126 <DIO_enuGetPinVal+0x300>
    2124:	48 c0       	rjmp	.+144    	; 0x21b6 <DIO_enuGetPinVal+0x390>
    2126:	d8 c0       	rjmp	.+432    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					{
					case DIO_PIN0:

						*Copy_u8Value =((PINC>>DIO_PIN0)&1);break;
    2128:	e3 e3       	ldi	r30, 0x33	; 51
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	81 70       	andi	r24, 0x01	; 1
    2130:	ec 81       	ldd	r30, Y+4	; 0x04
    2132:	fd 81       	ldd	r31, Y+5	; 0x05
    2134:	80 83       	st	Z, r24
    2136:	d0 c0       	rjmp	.+416    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					case DIO_PIN1:

						*Copy_u8Value =((PINC>>DIO_PIN1)&1);break;
    2138:	e3 e3       	ldi	r30, 0x33	; 51
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	86 95       	lsr	r24
    2140:	81 70       	andi	r24, 0x01	; 1
    2142:	ec 81       	ldd	r30, Y+4	; 0x04
    2144:	fd 81       	ldd	r31, Y+5	; 0x05
    2146:	80 83       	st	Z, r24
    2148:	c7 c0       	rjmp	.+398    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					case DIO_PIN2:

						*Copy_u8Value =((PINC>>DIO_PIN2)&1);break;
    214a:	e3 e3       	ldi	r30, 0x33	; 51
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	86 95       	lsr	r24
    2152:	86 95       	lsr	r24
    2154:	81 70       	andi	r24, 0x01	; 1
    2156:	ec 81       	ldd	r30, Y+4	; 0x04
    2158:	fd 81       	ldd	r31, Y+5	; 0x05
    215a:	80 83       	st	Z, r24
    215c:	bd c0       	rjmp	.+378    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					case DIO_PIN3:

						*Copy_u8Value =((PINC>>DIO_PIN3)&1);break;
    215e:	e3 e3       	ldi	r30, 0x33	; 51
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	86 95       	lsr	r24
    2166:	86 95       	lsr	r24
    2168:	86 95       	lsr	r24
    216a:	81 70       	andi	r24, 0x01	; 1
    216c:	ec 81       	ldd	r30, Y+4	; 0x04
    216e:	fd 81       	ldd	r31, Y+5	; 0x05
    2170:	80 83       	st	Z, r24
    2172:	b2 c0       	rjmp	.+356    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					case DIO_PIN4:

						*Copy_u8Value =((PINC>>DIO_PIN4)&1);break;
    2174:	e3 e3       	ldi	r30, 0x33	; 51
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	82 95       	swap	r24
    217c:	8f 70       	andi	r24, 0x0F	; 15
    217e:	81 70       	andi	r24, 0x01	; 1
    2180:	ec 81       	ldd	r30, Y+4	; 0x04
    2182:	fd 81       	ldd	r31, Y+5	; 0x05
    2184:	80 83       	st	Z, r24
    2186:	a8 c0       	rjmp	.+336    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					case DIO_PIN5:

						*Copy_u8Value =((PINC>>DIO_PIN5)&1);break;
    2188:	e3 e3       	ldi	r30, 0x33	; 51
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	82 95       	swap	r24
    2190:	86 95       	lsr	r24
    2192:	87 70       	andi	r24, 0x07	; 7
    2194:	81 70       	andi	r24, 0x01	; 1
    2196:	ec 81       	ldd	r30, Y+4	; 0x04
    2198:	fd 81       	ldd	r31, Y+5	; 0x05
    219a:	80 83       	st	Z, r24
    219c:	9d c0       	rjmp	.+314    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					case DIO_PIN6:

						*Copy_u8Value =((PINC>>DIO_PIN6)&1);break;
    219e:	e3 e3       	ldi	r30, 0x33	; 51
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	82 95       	swap	r24
    21a6:	86 95       	lsr	r24
    21a8:	86 95       	lsr	r24
    21aa:	83 70       	andi	r24, 0x03	; 3
    21ac:	81 70       	andi	r24, 0x01	; 1
    21ae:	ec 81       	ldd	r30, Y+4	; 0x04
    21b0:	fd 81       	ldd	r31, Y+5	; 0x05
    21b2:	80 83       	st	Z, r24
    21b4:	91 c0       	rjmp	.+290    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					case DIO_PIN7:

						*Copy_u8Value =((PINC>>DIO_PIN7)&1);break;
    21b6:	e3 e3       	ldi	r30, 0x33	; 51
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	88 1f       	adc	r24, r24
    21be:	88 27       	eor	r24, r24
    21c0:	88 1f       	adc	r24, r24
    21c2:	ec 81       	ldd	r30, Y+4	; 0x04
    21c4:	fd 81       	ldd	r31, Y+5	; 0x05
    21c6:	80 83       	st	Z, r24
    21c8:	87 c0       	rjmp	.+270    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
					}
					break;
					case DIO_PORTD://SelePINDomPortD
						switch(Copy_u8PinId)
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	3f 83       	std	Y+7, r19	; 0x07
    21d2:	2e 83       	std	Y+6, r18	; 0x06
    21d4:	8e 81       	ldd	r24, Y+6	; 0x06
    21d6:	9f 81       	ldd	r25, Y+7	; 0x07
    21d8:	83 30       	cpi	r24, 0x03	; 3
    21da:	91 05       	cpc	r25, r1
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <DIO_enuGetPinVal+0x3ba>
    21de:	47 c0       	rjmp	.+142    	; 0x226e <DIO_enuGetPinVal+0x448>
    21e0:	2e 81       	ldd	r18, Y+6	; 0x06
    21e2:	3f 81       	ldd	r19, Y+7	; 0x07
    21e4:	24 30       	cpi	r18, 0x04	; 4
    21e6:	31 05       	cpc	r19, r1
    21e8:	7c f4       	brge	.+30     	; 0x2208 <DIO_enuGetPinVal+0x3e2>
    21ea:	8e 81       	ldd	r24, Y+6	; 0x06
    21ec:	9f 81       	ldd	r25, Y+7	; 0x07
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	91 05       	cpc	r25, r1
    21f2:	51 f1       	breq	.+84     	; 0x2248 <DIO_enuGetPinVal+0x422>
    21f4:	2e 81       	ldd	r18, Y+6	; 0x06
    21f6:	3f 81       	ldd	r19, Y+7	; 0x07
    21f8:	22 30       	cpi	r18, 0x02	; 2
    21fa:	31 05       	cpc	r19, r1
    21fc:	74 f5       	brge	.+92     	; 0x225a <DIO_enuGetPinVal+0x434>
    21fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2200:	9f 81       	ldd	r25, Y+7	; 0x07
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	c9 f0       	breq	.+50     	; 0x2238 <DIO_enuGetPinVal+0x412>
    2206:	68 c0       	rjmp	.+208    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
    2208:	2e 81       	ldd	r18, Y+6	; 0x06
    220a:	3f 81       	ldd	r19, Y+7	; 0x07
    220c:	25 30       	cpi	r18, 0x05	; 5
    220e:	31 05       	cpc	r19, r1
    2210:	09 f4       	brne	.+2      	; 0x2214 <DIO_enuGetPinVal+0x3ee>
    2212:	42 c0       	rjmp	.+132    	; 0x2298 <DIO_enuGetPinVal+0x472>
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	9f 81       	ldd	r25, Y+7	; 0x07
    2218:	85 30       	cpi	r24, 0x05	; 5
    221a:	91 05       	cpc	r25, r1
    221c:	9c f1       	brlt	.+102    	; 0x2284 <DIO_enuGetPinVal+0x45e>
    221e:	2e 81       	ldd	r18, Y+6	; 0x06
    2220:	3f 81       	ldd	r19, Y+7	; 0x07
    2222:	26 30       	cpi	r18, 0x06	; 6
    2224:	31 05       	cpc	r19, r1
    2226:	09 f4       	brne	.+2      	; 0x222a <DIO_enuGetPinVal+0x404>
    2228:	42 c0       	rjmp	.+132    	; 0x22ae <DIO_enuGetPinVal+0x488>
    222a:	8e 81       	ldd	r24, Y+6	; 0x06
    222c:	9f 81       	ldd	r25, Y+7	; 0x07
    222e:	87 30       	cpi	r24, 0x07	; 7
    2230:	91 05       	cpc	r25, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <DIO_enuGetPinVal+0x410>
    2234:	48 c0       	rjmp	.+144    	; 0x22c6 <DIO_enuGetPinVal+0x4a0>
    2236:	50 c0       	rjmp	.+160    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
						{
						case DIO_PIN0:

							*Copy_u8Value =((PIND>>DIO_PIN0)&1);break;
    2238:	e0 e3       	ldi	r30, 0x30	; 48
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	81 70       	andi	r24, 0x01	; 1
    2240:	ec 81       	ldd	r30, Y+4	; 0x04
    2242:	fd 81       	ldd	r31, Y+5	; 0x05
    2244:	80 83       	st	Z, r24
    2246:	48 c0       	rjmp	.+144    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
						case DIO_PIN1:

							*Copy_u8Value =((PIND>>DIO_PIN1)&1);break;
    2248:	e0 e3       	ldi	r30, 0x30	; 48
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	86 95       	lsr	r24
    2250:	81 70       	andi	r24, 0x01	; 1
    2252:	ec 81       	ldd	r30, Y+4	; 0x04
    2254:	fd 81       	ldd	r31, Y+5	; 0x05
    2256:	80 83       	st	Z, r24
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
						case DIO_PIN2:

							*Copy_u8Value =((PIND>>DIO_PIN2)&1);break;
    225a:	e0 e3       	ldi	r30, 0x30	; 48
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	86 95       	lsr	r24
    2262:	86 95       	lsr	r24
    2264:	81 70       	andi	r24, 0x01	; 1
    2266:	ec 81       	ldd	r30, Y+4	; 0x04
    2268:	fd 81       	ldd	r31, Y+5	; 0x05
    226a:	80 83       	st	Z, r24
    226c:	35 c0       	rjmp	.+106    	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
						case DIO_PIN3:

							*Copy_u8Value =((PIND>>DIO_PIN3)&1);break;
    226e:	e0 e3       	ldi	r30, 0x30	; 48
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	86 95       	lsr	r24
    2276:	86 95       	lsr	r24
    2278:	86 95       	lsr	r24
    227a:	81 70       	andi	r24, 0x01	; 1
    227c:	ec 81       	ldd	r30, Y+4	; 0x04
    227e:	fd 81       	ldd	r31, Y+5	; 0x05
    2280:	80 83       	st	Z, r24
    2282:	2a c0       	rjmp	.+84     	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
						case DIO_PIN4:

							*Copy_u8Value =((PIND>>DIO_PIN4)&1);break;
    2284:	e0 e3       	ldi	r30, 0x30	; 48
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	82 95       	swap	r24
    228c:	8f 70       	andi	r24, 0x0F	; 15
    228e:	81 70       	andi	r24, 0x01	; 1
    2290:	ec 81       	ldd	r30, Y+4	; 0x04
    2292:	fd 81       	ldd	r31, Y+5	; 0x05
    2294:	80 83       	st	Z, r24
    2296:	20 c0       	rjmp	.+64     	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
						case DIO_PIN5:

							*Copy_u8Value =((PIND>>DIO_PIN5)&1);break;
    2298:	e0 e3       	ldi	r30, 0x30	; 48
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	82 95       	swap	r24
    22a0:	86 95       	lsr	r24
    22a2:	87 70       	andi	r24, 0x07	; 7
    22a4:	81 70       	andi	r24, 0x01	; 1
    22a6:	ec 81       	ldd	r30, Y+4	; 0x04
    22a8:	fd 81       	ldd	r31, Y+5	; 0x05
    22aa:	80 83       	st	Z, r24
    22ac:	15 c0       	rjmp	.+42     	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
						case DIO_PIN6:

							*Copy_u8Value =((PIND>>DIO_PIN6)&1);break;
    22ae:	e0 e3       	ldi	r30, 0x30	; 48
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	82 95       	swap	r24
    22b6:	86 95       	lsr	r24
    22b8:	86 95       	lsr	r24
    22ba:	83 70       	andi	r24, 0x03	; 3
    22bc:	81 70       	andi	r24, 0x01	; 1
    22be:	ec 81       	ldd	r30, Y+4	; 0x04
    22c0:	fd 81       	ldd	r31, Y+5	; 0x05
    22c2:	80 83       	st	Z, r24
    22c4:	09 c0       	rjmp	.+18     	; 0x22d8 <DIO_enuGetPinVal+0x4b2>
						case DIO_PIN7:

							*Copy_u8Value =((PIND>>DIO_PIN7)&1);break;
    22c6:	e0 e3       	ldi	r30, 0x30	; 48
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	88 1f       	adc	r24, r24
    22ce:	88 27       	eor	r24, r24
    22d0:	88 1f       	adc	r24, r24
    22d2:	ec 81       	ldd	r30, Y+4	; 0x04
    22d4:	fd 81       	ldd	r31, Y+5	; 0x05
    22d6:	80 83       	st	Z, r24
						}
						break;

		}
		Local_enuErrorState = ES_OK;
    22d8:	19 82       	std	Y+1, r1	; 0x01
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <DIO_enuGetPinVal+0x4ba>
	}
	else
	{
		Local_enuErrorState = ES_Out_Of_Range;
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e2:	2f 96       	adiw	r28, 0x0f	; 15
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <DIO_enuSetPortDir>:

ES_t DIO_enuSetPortDir(u8 Copy_u8PortId,u8 Copy_u8Direction)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <DIO_enuSetPortDir+0x6>
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <DIO_enuSetPortDir+0x8>
    22fc:	0f 92       	push	r0
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	8a 83       	std	Y+2, r24	; 0x02
    2304:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortId<= DIO_PORTD)
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	84 30       	cpi	r24, 0x04	; 4
    230e:	a0 f5       	brcc	.+104    	; 0x2378 <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortId)
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	3d 83       	std	Y+5, r19	; 0x05
    2318:	2c 83       	std	Y+4, r18	; 0x04
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	9d 81       	ldd	r25, Y+5	; 0x05
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	91 05       	cpc	r25, r1
    2322:	d1 f0       	breq	.+52     	; 0x2358 <DIO_enuSetPortDir+0x64>
    2324:	2c 81       	ldd	r18, Y+4	; 0x04
    2326:	3d 81       	ldd	r19, Y+5	; 0x05
    2328:	22 30       	cpi	r18, 0x02	; 2
    232a:	31 05       	cpc	r19, r1
    232c:	2c f4       	brge	.+10     	; 0x2338 <DIO_enuSetPortDir+0x44>
    232e:	8c 81       	ldd	r24, Y+4	; 0x04
    2330:	9d 81       	ldd	r25, Y+5	; 0x05
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	61 f0       	breq	.+24     	; 0x234e <DIO_enuSetPortDir+0x5a>
    2336:	1e c0       	rjmp	.+60     	; 0x2374 <DIO_enuSetPortDir+0x80>
    2338:	2c 81       	ldd	r18, Y+4	; 0x04
    233a:	3d 81       	ldd	r19, Y+5	; 0x05
    233c:	22 30       	cpi	r18, 0x02	; 2
    233e:	31 05       	cpc	r19, r1
    2340:	81 f0       	breq	.+32     	; 0x2362 <DIO_enuSetPortDir+0x6e>
    2342:	8c 81       	ldd	r24, Y+4	; 0x04
    2344:	9d 81       	ldd	r25, Y+5	; 0x05
    2346:	83 30       	cpi	r24, 0x03	; 3
    2348:	91 05       	cpc	r25, r1
    234a:	81 f0       	breq	.+32     	; 0x236c <DIO_enuSetPortDir+0x78>
    234c:	13 c0       	rjmp	.+38     	; 0x2374 <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Direction;
    234e:	ea e3       	ldi	r30, 0x3A	; 58
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	80 83       	st	Z, r24
    2356:	0e c0       	rjmp	.+28     	; 0x2374 <DIO_enuSetPortDir+0x80>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Direction;
    2358:	e7 e3       	ldi	r30, 0x37	; 55
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	80 83       	st	Z, r24
    2360:	09 c0       	rjmp	.+18     	; 0x2374 <DIO_enuSetPortDir+0x80>
					break;
		case DIO_PORTC:
			DDRC = Copy_u8Direction;
    2362:	e4 e3       	ldi	r30, 0x34	; 52
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	80 83       	st	Z, r24
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <DIO_enuSetPortDir+0x80>
					break;
		case DIO_PORTD:
			DDRC = Copy_u8Direction;
    236c:	e4 e3       	ldi	r30, 0x34	; 52
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	80 83       	st	Z, r24
					break;
		}
		Local_enuErrorState = ES_OK;
    2374:	19 82       	std	Y+1, r1	; 0x01
    2376:	02 c0       	rjmp	.+4      	; 0x237c <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorState = ES_Out_Of_Range;
    2378:	83 e0       	ldi	r24, 0x03	; 3
    237a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <DIO_enuSetPortVal>:
ES_t DIO_enuSetPortVal(u8 Copy_u8PortId,u8 Copy_u8Value)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	00 d0       	rcall	.+0      	; 0x2394 <DIO_enuSetPortVal+0x6>
    2394:	00 d0       	rcall	.+0      	; 0x2396 <DIO_enuSetPortVal+0x8>
    2396:	0f 92       	push	r0
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	8a 83       	std	Y+2, r24	; 0x02
    239e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId<= DIO_PORTD)
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	84 30       	cpi	r24, 0x04	; 4
    23a8:	a0 f5       	brcc	.+104    	; 0x2412 <DIO_enuSetPortVal+0x84>
	{
		switch(Copy_u8PortId)
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	3d 83       	std	Y+5, r19	; 0x05
    23b2:	2c 83       	std	Y+4, r18	; 0x04
    23b4:	8c 81       	ldd	r24, Y+4	; 0x04
    23b6:	9d 81       	ldd	r25, Y+5	; 0x05
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	91 05       	cpc	r25, r1
    23bc:	d1 f0       	breq	.+52     	; 0x23f2 <DIO_enuSetPortVal+0x64>
    23be:	2c 81       	ldd	r18, Y+4	; 0x04
    23c0:	3d 81       	ldd	r19, Y+5	; 0x05
    23c2:	22 30       	cpi	r18, 0x02	; 2
    23c4:	31 05       	cpc	r19, r1
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <DIO_enuSetPortVal+0x44>
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	9d 81       	ldd	r25, Y+5	; 0x05
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	61 f0       	breq	.+24     	; 0x23e8 <DIO_enuSetPortVal+0x5a>
    23d0:	1e c0       	rjmp	.+60     	; 0x240e <DIO_enuSetPortVal+0x80>
    23d2:	2c 81       	ldd	r18, Y+4	; 0x04
    23d4:	3d 81       	ldd	r19, Y+5	; 0x05
    23d6:	22 30       	cpi	r18, 0x02	; 2
    23d8:	31 05       	cpc	r19, r1
    23da:	81 f0       	breq	.+32     	; 0x23fc <DIO_enuSetPortVal+0x6e>
    23dc:	8c 81       	ldd	r24, Y+4	; 0x04
    23de:	9d 81       	ldd	r25, Y+5	; 0x05
    23e0:	83 30       	cpi	r24, 0x03	; 3
    23e2:	91 05       	cpc	r25, r1
    23e4:	81 f0       	breq	.+32     	; 0x2406 <DIO_enuSetPortVal+0x78>
    23e6:	13 c0       	rjmp	.+38     	; 0x240e <DIO_enuSetPortVal+0x80>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    23e8:	eb e3       	ldi	r30, 0x3B	; 59
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	80 83       	st	Z, r24
    23f0:	0e c0       	rjmp	.+28     	; 0x240e <DIO_enuSetPortVal+0x80>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    23f2:	e8 e3       	ldi	r30, 0x38	; 56
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	80 83       	st	Z, r24
    23fa:	09 c0       	rjmp	.+18     	; 0x240e <DIO_enuSetPortVal+0x80>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    23fc:	e5 e3       	ldi	r30, 0x35	; 53
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	80 83       	st	Z, r24
    2404:	04 c0       	rjmp	.+8      	; 0x240e <DIO_enuSetPortVal+0x80>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    2406:	e2 e3       	ldi	r30, 0x32	; 50
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    240e:	19 82       	std	Y+1, r1	; 0x01
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <DIO_enuSetPortVal+0x88>
	}
	else
	{
		Local_enuErrorState = ES_Out_Of_Range;
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	89 83       	std	Y+1, r24	; 0x01
		}



	return Local_enuErrorState;
    2416:	89 81       	ldd	r24, Y+1	; 0x01
}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <DIO_enuGetPortVal>:
ES_t DIO_enuGetPortVal(u8 Copy_u8PortId,u8 *Copy_u8Value)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	00 d0       	rcall	.+0      	; 0x242e <DIO_enuGetPortVal+0x6>
    242e:	00 d0       	rcall	.+0      	; 0x2430 <DIO_enuGetPortVal+0x8>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <DIO_enuGetPortVal+0xa>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	8a 83       	std	Y+2, r24	; 0x02
    2438:	7c 83       	std	Y+4, r23	; 0x04
    243a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortId<= DIO_PORTD)
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	84 30       	cpi	r24, 0x04	; 4
    2444:	e0 f5       	brcc	.+120    	; 0x24be <DIO_enuGetPortVal+0x96>
		{
			switch(Copy_u8PortId)
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	3e 83       	std	Y+6, r19	; 0x06
    244e:	2d 83       	std	Y+5, r18	; 0x05
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	9e 81       	ldd	r25, Y+6	; 0x06
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	91 05       	cpc	r25, r1
    2458:	e1 f0       	breq	.+56     	; 0x2492 <DIO_enuGetPortVal+0x6a>
    245a:	2d 81       	ldd	r18, Y+5	; 0x05
    245c:	3e 81       	ldd	r19, Y+6	; 0x06
    245e:	22 30       	cpi	r18, 0x02	; 2
    2460:	31 05       	cpc	r19, r1
    2462:	2c f4       	brge	.+10     	; 0x246e <DIO_enuGetPortVal+0x46>
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	61 f0       	breq	.+24     	; 0x2484 <DIO_enuGetPortVal+0x5c>
    246c:	26 c0       	rjmp	.+76     	; 0x24ba <DIO_enuGetPortVal+0x92>
    246e:	2d 81       	ldd	r18, Y+5	; 0x05
    2470:	3e 81       	ldd	r19, Y+6	; 0x06
    2472:	22 30       	cpi	r18, 0x02	; 2
    2474:	31 05       	cpc	r19, r1
    2476:	a1 f0       	breq	.+40     	; 0x24a0 <DIO_enuGetPortVal+0x78>
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	83 30       	cpi	r24, 0x03	; 3
    247e:	91 05       	cpc	r25, r1
    2480:	b1 f0       	breq	.+44     	; 0x24ae <DIO_enuGetPortVal+0x86>
    2482:	1b c0       	rjmp	.+54     	; 0x24ba <DIO_enuGetPortVal+0x92>
			{
			case DIO_PORTA:
				*Copy_u8Value = PINA;
    2484:	e9 e3       	ldi	r30, 0x39	; 57
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	eb 81       	ldd	r30, Y+3	; 0x03
    248c:	fc 81       	ldd	r31, Y+4	; 0x04
    248e:	80 83       	st	Z, r24
    2490:	14 c0       	rjmp	.+40     	; 0x24ba <DIO_enuGetPortVal+0x92>
				break;
			case DIO_PORTB:
				*Copy_u8Value = PINB;
    2492:	e6 e3       	ldi	r30, 0x36	; 54
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	eb 81       	ldd	r30, Y+3	; 0x03
    249a:	fc 81       	ldd	r31, Y+4	; 0x04
    249c:	80 83       	st	Z, r24
    249e:	0d c0       	rjmp	.+26     	; 0x24ba <DIO_enuGetPortVal+0x92>
				break;
			case DIO_PORTC:
				*Copy_u8Value = PINC;
    24a0:	e3 e3       	ldi	r30, 0x33	; 51
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	eb 81       	ldd	r30, Y+3	; 0x03
    24a8:	fc 81       	ldd	r31, Y+4	; 0x04
    24aa:	80 83       	st	Z, r24
    24ac:	06 c0       	rjmp	.+12     	; 0x24ba <DIO_enuGetPortVal+0x92>
				break;
			case DIO_PORTD:
				*Copy_u8Value = PIND;
    24ae:	e0 e3       	ldi	r30, 0x30	; 48
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	eb 81       	ldd	r30, Y+3	; 0x03
    24b6:	fc 81       	ldd	r31, Y+4	; 0x04
    24b8:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    24ba:	19 82       	std	Y+1, r1	; 0x01
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <DIO_enuGetPortVal+0x9a>
		}
		else
		{
			Local_enuErrorState = ES_Out_Of_Range;
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	89 83       	std	Y+1, r24	; 0x01
			}


	return Local_enuErrorState;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c4:	26 96       	adiw	r28, 0x06	; 6
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortId)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <DIO_enuToggelPort+0x6>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <DIO_enuToggelPort+0x8>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId<= DIO_PORTD)
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	84 30       	cpi	r24, 0x04	; 4
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <DIO_enuToggelPort+0x1a>
    24ee:	40 c0       	rjmp	.+128    	; 0x2570 <DIO_enuToggelPort+0x9a>
		{
			switch(Copy_u8PortId)
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	3c 83       	std	Y+4, r19	; 0x04
    24f8:	2b 83       	std	Y+3, r18	; 0x03
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	91 05       	cpc	r25, r1
    2502:	e9 f0       	breq	.+58     	; 0x253e <DIO_enuToggelPort+0x68>
    2504:	2b 81       	ldd	r18, Y+3	; 0x03
    2506:	3c 81       	ldd	r19, Y+4	; 0x04
    2508:	22 30       	cpi	r18, 0x02	; 2
    250a:	31 05       	cpc	r19, r1
    250c:	2c f4       	brge	.+10     	; 0x2518 <DIO_enuToggelPort+0x42>
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	61 f0       	breq	.+24     	; 0x252e <DIO_enuToggelPort+0x58>
    2516:	2a c0       	rjmp	.+84     	; 0x256c <DIO_enuToggelPort+0x96>
    2518:	2b 81       	ldd	r18, Y+3	; 0x03
    251a:	3c 81       	ldd	r19, Y+4	; 0x04
    251c:	22 30       	cpi	r18, 0x02	; 2
    251e:	31 05       	cpc	r19, r1
    2520:	b1 f0       	breq	.+44     	; 0x254e <DIO_enuToggelPort+0x78>
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	83 30       	cpi	r24, 0x03	; 3
    2528:	91 05       	cpc	r25, r1
    252a:	c9 f0       	breq	.+50     	; 0x255e <DIO_enuToggelPort+0x88>
    252c:	1f c0       	rjmp	.+62     	; 0x256c <DIO_enuToggelPort+0x96>
			{
			case DIO_PORTA:
				PORTA = ~PORTA;
    252e:	ab e3       	ldi	r26, 0x3B	; 59
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	eb e3       	ldi	r30, 0x3B	; 59
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 95       	com	r24
    253a:	8c 93       	st	X, r24
    253c:	17 c0       	rjmp	.+46     	; 0x256c <DIO_enuToggelPort+0x96>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
    253e:	a8 e3       	ldi	r26, 0x38	; 56
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e8 e3       	ldi	r30, 0x38	; 56
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	80 95       	com	r24
    254a:	8c 93       	st	X, r24
    254c:	0f c0       	rjmp	.+30     	; 0x256c <DIO_enuToggelPort+0x96>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    254e:	a5 e3       	ldi	r26, 0x35	; 53
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e5 e3       	ldi	r30, 0x35	; 53
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	80 95       	com	r24
    255a:	8c 93       	st	X, r24
    255c:	07 c0       	rjmp	.+14     	; 0x256c <DIO_enuToggelPort+0x96>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    255e:	a2 e3       	ldi	r26, 0x32	; 50
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e2 e3       	ldi	r30, 0x32	; 50
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	80 95       	com	r24
    256a:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    256c:	19 82       	std	Y+1, r1	; 0x01
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <DIO_enuToggelPort+0x9e>
		}
		else
		{
			Local_enuErrorState = ES_Out_Of_Range;
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	89 83       	std	Y+1, r24	; 0x01
			}



	return Local_enuErrorState;
    2574:	89 81       	ldd	r24, Y+1	; 0x01
}
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <ADC_enuINIT>:
#include"../EXTI/interrupt.h"

static volatile void (*ADC_PvidFUN)(void*) = NULL;
static volatile void *ADC_Pvidpara = NULL;
ES_t ADC_enuINIT(void)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	0f 92       	push	r0
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	89 83       	std	Y+1, r24	; 0x01

#if VOLTAGE_REF == AREF
	ADMUX &= ~(MASK_NUM<<REFS0);
	ADMUX &= ~(MASK_NUM<<REFS1);
#elif VOLTAGE_REF == AVCC
	ADMUX |= (MASK_NUM<<REFS0);
    2592:	a7 e2       	ldi	r26, 0x27	; 39
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e7 e2       	ldi	r30, 0x27	; 39
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	80 64       	ori	r24, 0x40	; 64
    259e:	8c 93       	st	X, r24
	ADMUX &= ~(MASK_NUM<<REFS1);
    25a0:	a7 e2       	ldi	r26, 0x27	; 39
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e7 e2       	ldi	r30, 0x27	; 39
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	8f 77       	andi	r24, 0x7F	; 127
    25ac:	8c 93       	st	X, r24
#endif

#if ADJUSTMENT == LEFT_ADJUST
	ADMUX|=(MASK_NUM<<ADLAR);
#elif ADJUSTMENT == RIGHT_ADJUST
	ADMUX&=~(MASK_NUM<<ADLAR);
    25ae:	a7 e2       	ldi	r26, 0x27	; 39
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e7 e2       	ldi	r30, 0x27	; 39
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	8f 7d       	andi	r24, 0xDF	; 223
    25ba:	8c 93       	st	X, r24
#elif PRESCALER == PRES_64
	ADCSRA &= ~(MASK_NUM<<ADPS0);
	ADCSRA |= (MASK_NUM<<ADPS1);
	ADCSRA |= (MASK_NUM<<ADPS2);
#elif PRESCALER == PRES_128
	ADCSRA |= (MASK_NUM<<ADPS0);
    25bc:	a6 e2       	ldi	r26, 0x26	; 38
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e6 e2       	ldi	r30, 0x26	; 38
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	81 60       	ori	r24, 0x01	; 1
    25c8:	8c 93       	st	X, r24
	ADCSRA |= (MASK_NUM<<ADPS1);
    25ca:	a6 e2       	ldi	r26, 0x26	; 38
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e6 e2       	ldi	r30, 0x26	; 38
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	82 60       	ori	r24, 0x02	; 2
    25d6:	8c 93       	st	X, r24
	ADCSRA |= (MASK_NUM<<ADPS2);
    25d8:	a6 e2       	ldi	r26, 0x26	; 38
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e6 e2       	ldi	r30, 0x26	; 38
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	84 60       	ori	r24, 0x04	; 4
    25e4:	8c 93       	st	X, r24
#else
#error"Wrong Prescaler selection"
#endif
	return Local_enuErrorState;
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <ADC_enuSetRefVoltage>:
ES_t ADC_enuSetRefVoltage(u8 Copy_u8SelectedVolt)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <ADC_enuSetRefVoltage+0x6>
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <ADC_enuSetRefVoltage+0x8>
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8SelectedVolt)
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	3c 83       	std	Y+4, r19	; 0x04
    260a:	2b 83       	std	Y+3, r18	; 0x03
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	8d 32       	cpi	r24, 0x2D	; 45
    2612:	91 05       	cpc	r25, r1
    2614:	d1 f0       	breq	.+52     	; 0x264a <ADC_enuSetRefVoltage+0x5a>
    2616:	2b 81       	ldd	r18, Y+3	; 0x03
    2618:	3c 81       	ldd	r19, Y+4	; 0x04
    261a:	20 36       	cpi	r18, 0x60	; 96
    261c:	31 05       	cpc	r19, r1
    261e:	31 f0       	breq	.+12     	; 0x262c <ADC_enuSetRefVoltage+0x3c>
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	82 32       	cpi	r24, 0x22	; 34
    2626:	91 05       	cpc	r25, r1
    2628:	f9 f0       	breq	.+62     	; 0x2668 <ADC_enuSetRefVoltage+0x78>
    262a:	2d c0       	rjmp	.+90     	; 0x2686 <ADC_enuSetRefVoltage+0x96>
	{
	case AREF:
		ADMUX &= ~(MASK_NUM<<REFS0);
    262c:	a7 e2       	ldi	r26, 0x27	; 39
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e7 e2       	ldi	r30, 0x27	; 39
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	8f 7b       	andi	r24, 0xBF	; 191
    2638:	8c 93       	st	X, r24
		ADMUX &= ~(MASK_NUM<<REFS1);
    263a:	a7 e2       	ldi	r26, 0x27	; 39
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e7 e2       	ldi	r30, 0x27	; 39
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	8f 77       	andi	r24, 0x7F	; 127
    2646:	8c 93       	st	X, r24
    2648:	20 c0       	rjmp	.+64     	; 0x268a <ADC_enuSetRefVoltage+0x9a>
		break;
	case AVCC:
		ADMUX |= (MASK_NUM<<REFS0);
    264a:	a7 e2       	ldi	r26, 0x27	; 39
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e7 e2       	ldi	r30, 0x27	; 39
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	80 64       	ori	r24, 0x40	; 64
    2656:	8c 93       	st	X, r24
		ADMUX &= ~(MASK_NUM<<REFS1);
    2658:	a7 e2       	ldi	r26, 0x27	; 39
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e7 e2       	ldi	r30, 0x27	; 39
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	8f 77       	andi	r24, 0x7F	; 127
    2664:	8c 93       	st	X, r24
    2666:	11 c0       	rjmp	.+34     	; 0x268a <ADC_enuSetRefVoltage+0x9a>
		break;

	case INTERNAL_REF:
		ADMUX |= (MASK_NUM<<REFS0);
    2668:	a7 e2       	ldi	r26, 0x27	; 39
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	e7 e2       	ldi	r30, 0x27	; 39
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	80 64       	ori	r24, 0x40	; 64
    2674:	8c 93       	st	X, r24
		ADMUX |= (MASK_NUM<<REFS1);
    2676:	a7 e2       	ldi	r26, 0x27	; 39
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e7 e2       	ldi	r30, 0x27	; 39
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 68       	ori	r24, 0x80	; 128
    2682:	8c 93       	st	X, r24
    2684:	02 c0       	rjmp	.+4      	; 0x268a <ADC_enuSetRefVoltage+0x9a>
		break;
	default:
		Local_enuErrorState = ES_Out_Of_Range;break;
    2686:	83 e0       	ldi	r24, 0x03	; 3
    2688:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <ADC_enuSetAdjust>:
ES_t ADC_enuSetAdjust(u8 Copy_u8SelectedADJ)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <ADC_enuSetAdjust+0x6>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <ADC_enuSetAdjust+0x8>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8SelectedADJ)
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	3c 83       	std	Y+4, r19	; 0x04
    26b4:	2b 83       	std	Y+3, r18	; 0x03
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f0       	breq	.+26     	; 0x26d8 <ADC_enuSetAdjust+0x3e>
    26be:	2b 81       	ldd	r18, Y+3	; 0x03
    26c0:	3c 81       	ldd	r19, Y+4	; 0x04
    26c2:	21 30       	cpi	r18, 0x01	; 1
    26c4:	31 05       	cpc	r19, r1
    26c6:	81 f4       	brne	.+32     	; 0x26e8 <ADC_enuSetAdjust+0x4e>
	{
	case LEFT_ADJUST:
		ADMUX|=(MASK_NUM<<ADLAR);break;
    26c8:	a7 e2       	ldi	r26, 0x27	; 39
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e7 e2       	ldi	r30, 0x27	; 39
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	80 62       	ori	r24, 0x20	; 32
    26d4:	8c 93       	st	X, r24
    26d6:	0a c0       	rjmp	.+20     	; 0x26ec <ADC_enuSetAdjust+0x52>
	case RIGHT_ADJUST:
		ADMUX&=~(MASK_NUM<<ADLAR);break;
    26d8:	a7 e2       	ldi	r26, 0x27	; 39
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e7 e2       	ldi	r30, 0x27	; 39
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	8f 7d       	andi	r24, 0xDF	; 223
    26e4:	8c 93       	st	X, r24
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <ADC_enuSetAdjust+0x52>
	default:
		Local_enuErrorState = ES_Out_Of_Range;break;
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <ADC_enuSelectChannel>:
ES_t ADC_enuSelectChannel(u8 Copy_u8SelectedChannel)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	00 d0       	rcall	.+0      	; 0x2702 <ADC_enuSelectChannel+0x6>
    2702:	00 d0       	rcall	.+0      	; 0x2704 <ADC_enuSelectChannel+0x8>
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	89 83       	std	Y+1, r24	; 0x01

	if(Channel7 < Copy_u8SelectedChannel)
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	88 30       	cpi	r24, 0x08	; 8
    2712:	08 f4       	brcc	.+2      	; 0x2716 <ADC_enuSelectChannel+0x1a>
    2714:	6e c0       	rjmp	.+220    	; 0x27f2 <ADC_enuSelectChannel+0xf6>
	{
		ADMUX&=~(31<<0);  // 31 --> 0001 1111
    2716:	a7 e2       	ldi	r26, 0x27	; 39
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e7 e2       	ldi	r30, 0x27	; 39
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	80 7e       	andi	r24, 0xE0	; 224
    2722:	8c 93       	st	X, r24
		switch(Copy_u8SelectedChannel)
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	3c 83       	std	Y+4, r19	; 0x04
    272c:	2b 83       	std	Y+3, r18	; 0x03
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	83 30       	cpi	r24, 0x03	; 3
    2734:	91 05       	cpc	r25, r1
    2736:	a9 f1       	breq	.+106    	; 0x27a2 <ADC_enuSelectChannel+0xa6>
    2738:	2b 81       	ldd	r18, Y+3	; 0x03
    273a:	3c 81       	ldd	r19, Y+4	; 0x04
    273c:	24 30       	cpi	r18, 0x04	; 4
    273e:	31 05       	cpc	r19, r1
    2740:	5c f4       	brge	.+22     	; 0x2758 <ADC_enuSelectChannel+0x5c>
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	91 05       	cpc	r25, r1
    274a:	d9 f0       	breq	.+54     	; 0x2782 <ADC_enuSelectChannel+0x86>
    274c:	2b 81       	ldd	r18, Y+3	; 0x03
    274e:	3c 81       	ldd	r19, Y+4	; 0x04
    2750:	22 30       	cpi	r18, 0x02	; 2
    2752:	31 05       	cpc	r19, r1
    2754:	f4 f4       	brge	.+60     	; 0x2792 <ADC_enuSelectChannel+0x96>
    2756:	4f c0       	rjmp	.+158    	; 0x27f6 <ADC_enuSelectChannel+0xfa>
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	85 30       	cpi	r24, 0x05	; 5
    275e:	91 05       	cpc	r25, r1
    2760:	81 f1       	breq	.+96     	; 0x27c2 <ADC_enuSelectChannel+0xc6>
    2762:	2b 81       	ldd	r18, Y+3	; 0x03
    2764:	3c 81       	ldd	r19, Y+4	; 0x04
    2766:	25 30       	cpi	r18, 0x05	; 5
    2768:	31 05       	cpc	r19, r1
    276a:	1c f1       	brlt	.+70     	; 0x27b2 <ADC_enuSelectChannel+0xb6>
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	86 30       	cpi	r24, 0x06	; 6
    2772:	91 05       	cpc	r25, r1
    2774:	71 f1       	breq	.+92     	; 0x27d2 <ADC_enuSelectChannel+0xd6>
    2776:	2b 81       	ldd	r18, Y+3	; 0x03
    2778:	3c 81       	ldd	r19, Y+4	; 0x04
    277a:	27 30       	cpi	r18, 0x07	; 7
    277c:	31 05       	cpc	r19, r1
    277e:	89 f1       	breq	.+98     	; 0x27e2 <ADC_enuSelectChannel+0xe6>
    2780:	3a c0       	rjmp	.+116    	; 0x27f6 <ADC_enuSelectChannel+0xfa>
		{
		case Channel0:
			break;
		case Channel1:
			ADMUX|= Channel1;
    2782:	a7 e2       	ldi	r26, 0x27	; 39
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e7 e2       	ldi	r30, 0x27	; 39
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	81 60       	ori	r24, 0x01	; 1
    278e:	8c 93       	st	X, r24
    2790:	32 c0       	rjmp	.+100    	; 0x27f6 <ADC_enuSelectChannel+0xfa>
			break;
		case Channel2:
			ADMUX|= Channel2;
    2792:	a7 e2       	ldi	r26, 0x27	; 39
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e7 e2       	ldi	r30, 0x27	; 39
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	82 60       	ori	r24, 0x02	; 2
    279e:	8c 93       	st	X, r24
    27a0:	2a c0       	rjmp	.+84     	; 0x27f6 <ADC_enuSelectChannel+0xfa>
			break;
		case Channel3:
			ADMUX|= Channel3;
    27a2:	a7 e2       	ldi	r26, 0x27	; 39
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e7 e2       	ldi	r30, 0x27	; 39
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	83 60       	ori	r24, 0x03	; 3
    27ae:	8c 93       	st	X, r24
    27b0:	22 c0       	rjmp	.+68     	; 0x27f6 <ADC_enuSelectChannel+0xfa>
			break;
		case Channel4:
			ADMUX|= Channel4;
    27b2:	a7 e2       	ldi	r26, 0x27	; 39
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e7 e2       	ldi	r30, 0x27	; 39
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	84 60       	ori	r24, 0x04	; 4
    27be:	8c 93       	st	X, r24
    27c0:	1a c0       	rjmp	.+52     	; 0x27f6 <ADC_enuSelectChannel+0xfa>
			break;
		case Channel5:
			ADMUX|= Channel5;
    27c2:	a7 e2       	ldi	r26, 0x27	; 39
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e7 e2       	ldi	r30, 0x27	; 39
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	85 60       	ori	r24, 0x05	; 5
    27ce:	8c 93       	st	X, r24
    27d0:	12 c0       	rjmp	.+36     	; 0x27f6 <ADC_enuSelectChannel+0xfa>
			break;
		case Channel6:
			ADMUX|= Channel6;
    27d2:	a7 e2       	ldi	r26, 0x27	; 39
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e7 e2       	ldi	r30, 0x27	; 39
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	86 60       	ori	r24, 0x06	; 6
    27de:	8c 93       	st	X, r24
    27e0:	0a c0       	rjmp	.+20     	; 0x27f6 <ADC_enuSelectChannel+0xfa>
			break;
		case Channel7:
			ADMUX|= Channel7;
    27e2:	a7 e2       	ldi	r26, 0x27	; 39
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e7 e2       	ldi	r30, 0x27	; 39
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	87 60       	ori	r24, 0x07	; 7
    27ee:	8c 93       	st	X, r24
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <ADC_enuSelectChannel+0xfa>

		}
	}
	else
	{
		Local_enuErrorState = ES_Out_Of_Range;
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <ADC_enuEnableADC>:
ES_t ADC_enuEnableADC(void)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	0f 92       	push	r0
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (MASK_NUM<<ADEN);
    2814:	a6 e2       	ldi	r26, 0x26	; 38
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e6 e2       	ldi	r30, 0x26	; 38
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	80 68       	ori	r24, 0x80	; 128
    2820:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2822:	89 81       	ldd	r24, Y+1	; 0x01
}
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <ADC_enuDisableADC>:
ES_t ADC_enuDisableADC(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	0f 92       	push	r0
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= ~(MASK_NUM<<ADEN);
    283a:	a6 e2       	ldi	r26, 0x26	; 38
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e6 e2       	ldi	r30, 0x26	; 38
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	8f 77       	andi	r24, 0x7F	; 127
    2846:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2848:	89 81       	ldd	r24, Y+1	; 0x01
}
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <ADC_enuStartConversion>:
ES_t ADC_enuStartConversion(void)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	0f 92       	push	r0
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA|=(MASK_NUM<<ADSC);
    2860:	a6 e2       	ldi	r26, 0x26	; 38
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e6 e2       	ldi	r30, 0x26	; 38
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	80 64       	ori	r24, 0x40	; 64
    286c:	8c 93       	st	X, r24

	return Local_enuErrorState;
    286e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2870:	0f 90       	pop	r0
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <ADC_enuEnableINT>:
ES_t ADC_enuEnableINT(void)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	0f 92       	push	r0
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA|=(MASK_NUM<<ADIE);
    2886:	a6 e2       	ldi	r26, 0x26	; 38
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e6 e2       	ldi	r30, 0x26	; 38
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	88 60       	ori	r24, 0x08	; 8
    2892:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2894:	89 81       	ldd	r24, Y+1	; 0x01
}
    2896:	0f 90       	pop	r0
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <ADC_enuDisableINT>:
ES_t ADC_enuDisableINT(void)
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	0f 92       	push	r0
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= ~(MASK_NUM<<ADIE);
    28ac:	a6 e2       	ldi	r26, 0x26	; 38
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e6 e2       	ldi	r30, 0x26	; 38
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	87 7f       	andi	r24, 0xF7	; 247
    28b8:	8c 93       	st	X, r24

	return Local_enuErrorState;
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <ADC_enuSetPrescaler>:
ES_t ADC_enuSetPrescaler(u8 Copy_u8SelectedPres)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	00 d0       	rcall	.+0      	; 0x28ca <ADC_enuSetPrescaler+0x6>
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <ADC_enuSetPrescaler+0x8>
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8SelectedPres)
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	3c 83       	std	Y+4, r19	; 0x04
    28de:	2b 83       	std	Y+3, r18	; 0x03
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	9c 81       	ldd	r25, Y+4	; 0x04
    28e4:	80 31       	cpi	r24, 0x10	; 16
    28e6:	91 05       	cpc	r25, r1
    28e8:	09 f4       	brne	.+2      	; 0x28ec <ADC_enuSetPrescaler+0x28>
    28ea:	6b c0       	rjmp	.+214    	; 0x29c2 <ADC_enuSetPrescaler+0xfe>
    28ec:	2b 81       	ldd	r18, Y+3	; 0x03
    28ee:	3c 81       	ldd	r19, Y+4	; 0x04
    28f0:	21 31       	cpi	r18, 0x11	; 17
    28f2:	31 05       	cpc	r19, r1
    28f4:	8c f4       	brge	.+34     	; 0x2918 <ADC_enuSetPrescaler+0x54>
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	91 05       	cpc	r25, r1
    28fe:	a9 f1       	breq	.+106    	; 0x296a <ADC_enuSetPrescaler+0xa6>
    2900:	2b 81       	ldd	r18, Y+3	; 0x03
    2902:	3c 81       	ldd	r19, Y+4	; 0x04
    2904:	28 30       	cpi	r18, 0x08	; 8
    2906:	31 05       	cpc	r19, r1
    2908:	09 f4       	brne	.+2      	; 0x290c <ADC_enuSetPrescaler+0x48>
    290a:	45 c0       	rjmp	.+138    	; 0x2996 <ADC_enuSetPrescaler+0xd2>
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	82 30       	cpi	r24, 0x02	; 2
    2912:	91 05       	cpc	r25, r1
    2914:	a1 f0       	breq	.+40     	; 0x293e <ADC_enuSetPrescaler+0x7a>
    2916:	ad c0       	rjmp	.+346    	; 0x2a72 <ADC_enuSetPrescaler+0x1ae>
    2918:	2b 81       	ldd	r18, Y+3	; 0x03
    291a:	3c 81       	ldd	r19, Y+4	; 0x04
    291c:	20 34       	cpi	r18, 0x40	; 64
    291e:	31 05       	cpc	r19, r1
    2920:	09 f4       	brne	.+2      	; 0x2924 <ADC_enuSetPrescaler+0x60>
    2922:	7b c0       	rjmp	.+246    	; 0x2a1a <ADC_enuSetPrescaler+0x156>
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	80 38       	cpi	r24, 0x80	; 128
    292a:	91 05       	cpc	r25, r1
    292c:	09 f4       	brne	.+2      	; 0x2930 <ADC_enuSetPrescaler+0x6c>
    292e:	8b c0       	rjmp	.+278    	; 0x2a46 <ADC_enuSetPrescaler+0x182>
    2930:	2b 81       	ldd	r18, Y+3	; 0x03
    2932:	3c 81       	ldd	r19, Y+4	; 0x04
    2934:	20 32       	cpi	r18, 0x20	; 32
    2936:	31 05       	cpc	r19, r1
    2938:	09 f4       	brne	.+2      	; 0x293c <ADC_enuSetPrescaler+0x78>
    293a:	59 c0       	rjmp	.+178    	; 0x29ee <ADC_enuSetPrescaler+0x12a>
    293c:	9a c0       	rjmp	.+308    	; 0x2a72 <ADC_enuSetPrescaler+0x1ae>
	{
	case  PRES_2:
		ADCSRA |= (MASK_NUM<<ADPS0);
    293e:	a6 e2       	ldi	r26, 0x26	; 38
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e6 e2       	ldi	r30, 0x26	; 38
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	81 60       	ori	r24, 0x01	; 1
    294a:	8c 93       	st	X, r24
		ADCSRA &= ~(MASK_NUM<<ADPS1);
    294c:	a6 e2       	ldi	r26, 0x26	; 38
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e6 e2       	ldi	r30, 0x26	; 38
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	8d 7f       	andi	r24, 0xFD	; 253
    2958:	8c 93       	st	X, r24
		ADCSRA &= ~(MASK_NUM<<ADPS2);
    295a:	a6 e2       	ldi	r26, 0x26	; 38
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e6 e2       	ldi	r30, 0x26	; 38
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	8b 7f       	andi	r24, 0xFB	; 251
    2966:	8c 93       	st	X, r24
    2968:	86 c0       	rjmp	.+268    	; 0x2a76 <ADC_enuSetPrescaler+0x1b2>
		break;
	case PRES_4:
		ADCSRA &= ~(MASK_NUM<<ADPS0);
    296a:	a6 e2       	ldi	r26, 0x26	; 38
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	e6 e2       	ldi	r30, 0x26	; 38
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	8e 7f       	andi	r24, 0xFE	; 254
    2976:	8c 93       	st	X, r24
		ADCSRA |= (MASK_NUM<<ADPS1);
    2978:	a6 e2       	ldi	r26, 0x26	; 38
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e6 e2       	ldi	r30, 0x26	; 38
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	82 60       	ori	r24, 0x02	; 2
    2984:	8c 93       	st	X, r24
		ADCSRA &= ~(MASK_NUM<<ADPS2);
    2986:	a6 e2       	ldi	r26, 0x26	; 38
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e6 e2       	ldi	r30, 0x26	; 38
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	8b 7f       	andi	r24, 0xFB	; 251
    2992:	8c 93       	st	X, r24
    2994:	70 c0       	rjmp	.+224    	; 0x2a76 <ADC_enuSetPrescaler+0x1b2>
		break;
	case PRES_8:
		ADCSRA |= (MASK_NUM<<ADPS0);
    2996:	a6 e2       	ldi	r26, 0x26	; 38
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e6 e2       	ldi	r30, 0x26	; 38
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	81 60       	ori	r24, 0x01	; 1
    29a2:	8c 93       	st	X, r24
		ADCSRA |= (MASK_NUM<<ADPS1);
    29a4:	a6 e2       	ldi	r26, 0x26	; 38
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e6 e2       	ldi	r30, 0x26	; 38
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	82 60       	ori	r24, 0x02	; 2
    29b0:	8c 93       	st	X, r24
		ADCSRA &= ~(MASK_NUM<<ADPS2);
    29b2:	a6 e2       	ldi	r26, 0x26	; 38
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e6 e2       	ldi	r30, 0x26	; 38
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	8b 7f       	andi	r24, 0xFB	; 251
    29be:	8c 93       	st	X, r24
    29c0:	5a c0       	rjmp	.+180    	; 0x2a76 <ADC_enuSetPrescaler+0x1b2>
		break;
	case PRES_16:
		ADCSRA &= ~(MASK_NUM<<ADPS0);
    29c2:	a6 e2       	ldi	r26, 0x26	; 38
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e6 e2       	ldi	r30, 0x26	; 38
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	8e 7f       	andi	r24, 0xFE	; 254
    29ce:	8c 93       	st	X, r24
		ADCSRA &=~ (MASK_NUM<<ADPS1);
    29d0:	a6 e2       	ldi	r26, 0x26	; 38
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e6 e2       	ldi	r30, 0x26	; 38
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	8d 7f       	andi	r24, 0xFD	; 253
    29dc:	8c 93       	st	X, r24
		ADCSRA |= (MASK_NUM<<ADPS2);
    29de:	a6 e2       	ldi	r26, 0x26	; 38
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e6 e2       	ldi	r30, 0x26	; 38
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	84 60       	ori	r24, 0x04	; 4
    29ea:	8c 93       	st	X, r24
    29ec:	44 c0       	rjmp	.+136    	; 0x2a76 <ADC_enuSetPrescaler+0x1b2>
		break;
	case PRES_32:
		ADCSRA |= (MASK_NUM<<ADPS0);
    29ee:	a6 e2       	ldi	r26, 0x26	; 38
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e6 e2       	ldi	r30, 0x26	; 38
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	81 60       	ori	r24, 0x01	; 1
    29fa:	8c 93       	st	X, r24
		ADCSRA &= ~(MASK_NUM<<ADPS1);
    29fc:	a6 e2       	ldi	r26, 0x26	; 38
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e6 e2       	ldi	r30, 0x26	; 38
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	8d 7f       	andi	r24, 0xFD	; 253
    2a08:	8c 93       	st	X, r24
		ADCSRA |= (MASK_NUM<<ADPS2);
    2a0a:	a6 e2       	ldi	r26, 0x26	; 38
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e6 e2       	ldi	r30, 0x26	; 38
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	84 60       	ori	r24, 0x04	; 4
    2a16:	8c 93       	st	X, r24
    2a18:	2e c0       	rjmp	.+92     	; 0x2a76 <ADC_enuSetPrescaler+0x1b2>
		break;
	case PRES_64:
		ADCSRA &= ~(MASK_NUM<<ADPS0);
    2a1a:	a6 e2       	ldi	r26, 0x26	; 38
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e6 e2       	ldi	r30, 0x26	; 38
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8e 7f       	andi	r24, 0xFE	; 254
    2a26:	8c 93       	st	X, r24
		ADCSRA |= (MASK_NUM<<ADPS1);
    2a28:	a6 e2       	ldi	r26, 0x26	; 38
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e6 e2       	ldi	r30, 0x26	; 38
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	82 60       	ori	r24, 0x02	; 2
    2a34:	8c 93       	st	X, r24
		ADCSRA |= (MASK_NUM<<ADPS2);
    2a36:	a6 e2       	ldi	r26, 0x26	; 38
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e6 e2       	ldi	r30, 0x26	; 38
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	84 60       	ori	r24, 0x04	; 4
    2a42:	8c 93       	st	X, r24
    2a44:	18 c0       	rjmp	.+48     	; 0x2a76 <ADC_enuSetPrescaler+0x1b2>
		break;
	case PRES_128:
		ADCSRA |= (MASK_NUM<<ADPS0);
    2a46:	a6 e2       	ldi	r26, 0x26	; 38
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e6 e2       	ldi	r30, 0x26	; 38
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	81 60       	ori	r24, 0x01	; 1
    2a52:	8c 93       	st	X, r24
		ADCSRA |= (MASK_NUM<<ADPS1);
    2a54:	a6 e2       	ldi	r26, 0x26	; 38
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e6 e2       	ldi	r30, 0x26	; 38
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	82 60       	ori	r24, 0x02	; 2
    2a60:	8c 93       	st	X, r24
		ADCSRA |= (MASK_NUM<<ADPS2);
    2a62:	a6 e2       	ldi	r26, 0x26	; 38
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e6 e2       	ldi	r30, 0x26	; 38
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	84 60       	ori	r24, 0x04	; 4
    2a6e:	8c 93       	st	X, r24
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <ADC_enuSetPrescaler+0x1b2>
		break;
	default:
		Local_enuErrorState = ES_Out_Of_Range;
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <ADC_enuDisableAutoTriggeringMode>:
ES_t ADC_enuDisableAutoTriggeringMode()
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	0f 92       	push	r0
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= ~(MASK_NUM<<ADATE);
    2a94:	a6 e2       	ldi	r26, 0x26	; 38
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e6 e2       	ldi	r30, 0x26	; 38
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8f 7d       	andi	r24, 0xDF	; 223
    2aa0:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <ADC_enuEnsableAutoTriggeringMode>:
ES_t ADC_enuEnsableAutoTriggeringMode(u8 Copy_u8SelectedMode)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <ADC_enuEnsableAutoTriggeringMode+0x6>
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <ADC_enuEnsableAutoTriggeringMode+0x8>
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (MASK_NUM<<ADATE);
    2abe:	a6 e2       	ldi	r26, 0x26	; 38
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e6 e2       	ldi	r30, 0x26	; 38
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	80 62       	ori	r24, 0x20	; 32
    2aca:	8c 93       	st	X, r24
	if(Timer_Counter1_Capture_Event >= Copy_u8SelectedMode)
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	88 30       	cpi	r24, 0x08	; 8
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <ADC_enuEnsableAutoTriggeringMode+0x28>
    2ad2:	e9 c0       	rjmp	.+466    	; 0x2ca6 <ADC_enuEnsableAutoTriggeringMode+0x1fa>
	{
		//SFIOR &= ~(7<<ADTS0);//--> Sfior : 000- ----
		switch (Copy_u8SelectedMode)
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	3c 83       	std	Y+4, r19	; 0x04
    2adc:	2b 83       	std	Y+3, r18	; 0x03
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	83 30       	cpi	r24, 0x03	; 3
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <ADC_enuEnsableAutoTriggeringMode+0x3e>
    2ae8:	70 c0       	rjmp	.+224    	; 0x2bca <ADC_enuEnsableAutoTriggeringMode+0x11e>
    2aea:	2b 81       	ldd	r18, Y+3	; 0x03
    2aec:	3c 81       	ldd	r19, Y+4	; 0x04
    2aee:	24 30       	cpi	r18, 0x04	; 4
    2af0:	31 05       	cpc	r19, r1
    2af2:	84 f4       	brge	.+32     	; 0x2b14 <ADC_enuEnsableAutoTriggeringMode+0x68>
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	81 30       	cpi	r24, 0x01	; 1
    2afa:	91 05       	cpc	r25, r1
    2afc:	d1 f1       	breq	.+116    	; 0x2b72 <ADC_enuEnsableAutoTriggeringMode+0xc6>
    2afe:	2b 81       	ldd	r18, Y+3	; 0x03
    2b00:	3c 81       	ldd	r19, Y+4	; 0x04
    2b02:	22 30       	cpi	r18, 0x02	; 2
    2b04:	31 05       	cpc	r19, r1
    2b06:	0c f0       	brlt	.+2      	; 0x2b0a <ADC_enuEnsableAutoTriggeringMode+0x5e>
    2b08:	4a c0       	rjmp	.+148    	; 0x2b9e <ADC_enuEnsableAutoTriggeringMode+0xf2>
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	d1 f0       	breq	.+52     	; 0x2b46 <ADC_enuEnsableAutoTriggeringMode+0x9a>
    2b12:	cb c0       	rjmp	.+406    	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
    2b14:	2b 81       	ldd	r18, Y+3	; 0x03
    2b16:	3c 81       	ldd	r19, Y+4	; 0x04
    2b18:	25 30       	cpi	r18, 0x05	; 5
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <ADC_enuEnsableAutoTriggeringMode+0x74>
    2b1e:	81 c0       	rjmp	.+258    	; 0x2c22 <ADC_enuEnsableAutoTriggeringMode+0x176>
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	9c 81       	ldd	r25, Y+4	; 0x04
    2b24:	85 30       	cpi	r24, 0x05	; 5
    2b26:	91 05       	cpc	r25, r1
    2b28:	0c f4       	brge	.+2      	; 0x2b2c <ADC_enuEnsableAutoTriggeringMode+0x80>
    2b2a:	65 c0       	rjmp	.+202    	; 0x2bf6 <ADC_enuEnsableAutoTriggeringMode+0x14a>
    2b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b30:	26 30       	cpi	r18, 0x06	; 6
    2b32:	31 05       	cpc	r19, r1
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <ADC_enuEnsableAutoTriggeringMode+0x8c>
    2b36:	8b c0       	rjmp	.+278    	; 0x2c4e <ADC_enuEnsableAutoTriggeringMode+0x1a2>
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3c:	87 30       	cpi	r24, 0x07	; 7
    2b3e:	91 05       	cpc	r25, r1
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <ADC_enuEnsableAutoTriggeringMode+0x98>
    2b42:	9b c0       	rjmp	.+310    	; 0x2c7a <ADC_enuEnsableAutoTriggeringMode+0x1ce>
    2b44:	b2 c0       	rjmp	.+356    	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
		{
		case FREE_RUNNING:
			SFIOR&=~(MASK_NUM<<ADTS0);
    2b46:	a0 e5       	ldi	r26, 0x50	; 80
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e0 e5       	ldi	r30, 0x50	; 80
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	8f 7d       	andi	r24, 0xDF	; 223
    2b52:	8c 93       	st	X, r24
			SFIOR&=~(MASK_NUM<<ADTS1);
    2b54:	a0 e5       	ldi	r26, 0x50	; 80
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e0 e5       	ldi	r30, 0x50	; 80
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8f 7b       	andi	r24, 0xBF	; 191
    2b60:	8c 93       	st	X, r24
			SFIOR&=~(MASK_NUM<<ADTS2);break;
    2b62:	a0 e5       	ldi	r26, 0x50	; 80
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e0 e5       	ldi	r30, 0x50	; 80
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	8f 77       	andi	r24, 0x7F	; 127
    2b6e:	8c 93       	st	X, r24
    2b70:	9c c0       	rjmp	.+312    	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
		case Analog_Comparator:
			SFIOR|=(MASK_NUM<<ADTS0);
    2b72:	a0 e5       	ldi	r26, 0x50	; 80
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	e0 e5       	ldi	r30, 0x50	; 80
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	80 62       	ori	r24, 0x20	; 32
    2b7e:	8c 93       	st	X, r24
			SFIOR&=~(MASK_NUM<<ADTS1);
    2b80:	a0 e5       	ldi	r26, 0x50	; 80
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e0 e5       	ldi	r30, 0x50	; 80
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	8f 7b       	andi	r24, 0xBF	; 191
    2b8c:	8c 93       	st	X, r24
			SFIOR&=~(MASK_NUM<<ADTS2);break;
    2b8e:	a0 e5       	ldi	r26, 0x50	; 80
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e0 e5       	ldi	r30, 0x50	; 80
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	8f 77       	andi	r24, 0x7F	; 127
    2b9a:	8c 93       	st	X, r24
    2b9c:	86 c0       	rjmp	.+268    	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
		case External_Interrupt_Request_0:
			SFIOR&=~(MASK_NUM<<ADTS0);
    2b9e:	a0 e5       	ldi	r26, 0x50	; 80
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e0 e5       	ldi	r30, 0x50	; 80
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8f 7d       	andi	r24, 0xDF	; 223
    2baa:	8c 93       	st	X, r24
			SFIOR|=(MASK_NUM<<ADTS1);
    2bac:	a0 e5       	ldi	r26, 0x50	; 80
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e0 e5       	ldi	r30, 0x50	; 80
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	80 64       	ori	r24, 0x40	; 64
    2bb8:	8c 93       	st	X, r24
			SFIOR&=~(MASK_NUM<<ADTS2);break;
    2bba:	a0 e5       	ldi	r26, 0x50	; 80
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e0 e5       	ldi	r30, 0x50	; 80
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8f 77       	andi	r24, 0x7F	; 127
    2bc6:	8c 93       	st	X, r24
    2bc8:	70 c0       	rjmp	.+224    	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
		case Timer_Counter0_Compare_Match:
			SFIOR|=(MASK_NUM<<ADTS0);
    2bca:	a0 e5       	ldi	r26, 0x50	; 80
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e0 e5       	ldi	r30, 0x50	; 80
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	80 62       	ori	r24, 0x20	; 32
    2bd6:	8c 93       	st	X, r24
			SFIOR|=(MASK_NUM<<ADTS1);
    2bd8:	a0 e5       	ldi	r26, 0x50	; 80
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e0 e5       	ldi	r30, 0x50	; 80
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	80 64       	ori	r24, 0x40	; 64
    2be4:	8c 93       	st	X, r24
			SFIOR&=~(MASK_NUM<<ADTS2);break;
    2be6:	a0 e5       	ldi	r26, 0x50	; 80
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e0 e5       	ldi	r30, 0x50	; 80
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	8f 77       	andi	r24, 0x7F	; 127
    2bf2:	8c 93       	st	X, r24
    2bf4:	5a c0       	rjmp	.+180    	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
		case Timer_Counter0_Overflow:
			SFIOR&=~(MASK_NUM<<ADTS0);
    2bf6:	a0 e5       	ldi	r26, 0x50	; 80
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e0 e5       	ldi	r30, 0x50	; 80
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8f 7d       	andi	r24, 0xDF	; 223
    2c02:	8c 93       	st	X, r24
			SFIOR&=~(MASK_NUM<<ADTS1);
    2c04:	a0 e5       	ldi	r26, 0x50	; 80
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e0 e5       	ldi	r30, 0x50	; 80
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	8f 7b       	andi	r24, 0xBF	; 191
    2c10:	8c 93       	st	X, r24
			SFIOR|=(MASK_NUM<<ADTS2);break;
    2c12:	a0 e5       	ldi	r26, 0x50	; 80
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	e0 e5       	ldi	r30, 0x50	; 80
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	80 68       	ori	r24, 0x80	; 128
    2c1e:	8c 93       	st	X, r24
    2c20:	44 c0       	rjmp	.+136    	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
		case Timer_Counter1_Compare_Match_B:
			SFIOR|=(MASK_NUM<<ADTS0);
    2c22:	a0 e5       	ldi	r26, 0x50	; 80
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e0 e5       	ldi	r30, 0x50	; 80
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	80 62       	ori	r24, 0x20	; 32
    2c2e:	8c 93       	st	X, r24
			SFIOR&=~(MASK_NUM<<ADTS1);
    2c30:	a0 e5       	ldi	r26, 0x50	; 80
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e0 e5       	ldi	r30, 0x50	; 80
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8f 7b       	andi	r24, 0xBF	; 191
    2c3c:	8c 93       	st	X, r24
			SFIOR|=(MASK_NUM<<ADTS2);break;
    2c3e:	a0 e5       	ldi	r26, 0x50	; 80
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e0 e5       	ldi	r30, 0x50	; 80
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	80 68       	ori	r24, 0x80	; 128
    2c4a:	8c 93       	st	X, r24
    2c4c:	2e c0       	rjmp	.+92     	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
		case Timer_Counter1_Overflow:
			SFIOR&=~(MASK_NUM<<ADTS0);
    2c4e:	a0 e5       	ldi	r26, 0x50	; 80
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	e0 e5       	ldi	r30, 0x50	; 80
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	8f 7d       	andi	r24, 0xDF	; 223
    2c5a:	8c 93       	st	X, r24
			SFIOR|=(MASK_NUM<<ADTS1);
    2c5c:	a0 e5       	ldi	r26, 0x50	; 80
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e0 e5       	ldi	r30, 0x50	; 80
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	80 64       	ori	r24, 0x40	; 64
    2c68:	8c 93       	st	X, r24
			SFIOR|=(MASK_NUM<<ADTS2);break;
    2c6a:	a0 e5       	ldi	r26, 0x50	; 80
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	e0 e5       	ldi	r30, 0x50	; 80
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	80 68       	ori	r24, 0x80	; 128
    2c76:	8c 93       	st	X, r24
    2c78:	18 c0       	rjmp	.+48     	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>
		case Timer_Counter1_Capture_Event:
			SFIOR|=(MASK_NUM<<ADTS0);
    2c7a:	a0 e5       	ldi	r26, 0x50	; 80
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	e0 e5       	ldi	r30, 0x50	; 80
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	80 62       	ori	r24, 0x20	; 32
    2c86:	8c 93       	st	X, r24
			SFIOR|=(MASK_NUM<<ADTS1);
    2c88:	a0 e5       	ldi	r26, 0x50	; 80
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e0 e5       	ldi	r30, 0x50	; 80
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	80 64       	ori	r24, 0x40	; 64
    2c94:	8c 93       	st	X, r24
			SFIOR|=(MASK_NUM<<ADTS2);break;
    2c96:	a0 e5       	ldi	r26, 0x50	; 80
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e0 e5       	ldi	r30, 0x50	; 80
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 68       	ori	r24, 0x80	; 128
    2ca2:	8c 93       	st	X, r24
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <ADC_enuEnsableAutoTriggeringMode+0x1fe>

		}
	}
	else
	{
		Local_enuErrorState = ES_Out_Of_Range;
    2ca6:	83 e0       	ldi	r24, 0x03	; 3
    2ca8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <ADC_enuPollingConv>:

ES_t ADC_enuPollingConv(void)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	0f 92       	push	r0
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState  = ES_NOK;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	89 83       	std	Y+1, r24	; 0x01

	while(((ADCSRA>>ADIF)&MASK_NUM) == 0);
    2cc8:	e6 e2       	ldi	r30, 0x26	; 38
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	82 95       	swap	r24
    2cd0:	8f 70       	andi	r24, 0x0F	; 15
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	81 70       	andi	r24, 0x01	; 1
    2cd8:	90 70       	andi	r25, 0x00	; 0
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	a9 f3       	breq	.-22     	; 0x2cc8 <ADC_enuPollingConv+0xe>
	ADCSRA|= (MASK_NUM<<ADIF);
    2cde:	a6 e2       	ldi	r26, 0x26	; 38
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e6 e2       	ldi	r30, 0x26	; 38
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 61       	ori	r24, 0x10	; 16
    2cea:	8c 93       	st	X, r24
	return Local_enuErrorState;
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <ADC_enuRead>:

ES_t ADC_enuRead(u16 *Copy_Pu16Value)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <ADC_enuRead+0x6>
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <ADC_enuRead+0x8>
    2cfe:	0f 92       	push	r0
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	9b 83       	std	Y+3, r25	; 0x03
    2d06:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu16Value)
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <ADC_enuRead+0x20>
    2d14:	53 c0       	rjmp	.+166    	; 0x2dbc <ADC_enuRead+0xc6>
	{
		switch((ADMUX>>ADLAR)&1)
    2d16:	e7 e2       	ldi	r30, 0x27	; 39
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	82 95       	swap	r24
    2d1e:	86 95       	lsr	r24
    2d20:	87 70       	andi	r24, 0x07	; 7
    2d22:	88 2f       	mov	r24, r24
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9c 01       	movw	r18, r24
    2d28:	21 70       	andi	r18, 0x01	; 1
    2d2a:	30 70       	andi	r19, 0x00	; 0
    2d2c:	3d 83       	std	Y+5, r19	; 0x05
    2d2e:	2c 83       	std	Y+4, r18	; 0x04
    2d30:	8c 81       	ldd	r24, Y+4	; 0x04
    2d32:	9d 81       	ldd	r25, Y+5	; 0x05
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	39 f1       	breq	.+78     	; 0x2d86 <ADC_enuRead+0x90>
    2d38:	2c 81       	ldd	r18, Y+4	; 0x04
    2d3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d3c:	21 30       	cpi	r18, 0x01	; 1
    2d3e:	31 05       	cpc	r19, r1
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <ADC_enuRead+0x4e>
    2d42:	3e c0       	rjmp	.+124    	; 0x2dc0 <ADC_enuRead+0xca>
		{
		case LEFT_ADJUST:
			*Copy_Pu16Value = (ADCL>>6);
    2d44:	e4 e2       	ldi	r30, 0x24	; 36
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	82 95       	swap	r24
    2d4c:	86 95       	lsr	r24
    2d4e:	86 95       	lsr	r24
    2d50:	83 70       	andi	r24, 0x03	; 3
    2d52:	88 2f       	mov	r24, r24
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	ea 81       	ldd	r30, Y+2	; 0x02
    2d58:	fb 81       	ldd	r31, Y+3	; 0x03
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	80 83       	st	Z, r24
			*Copy_Pu16Value |= ((u16)ADCH<<2);
    2d5e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d60:	fb 81       	ldd	r31, Y+3	; 0x03
    2d62:	20 81       	ld	r18, Z
    2d64:	31 81       	ldd	r19, Z+1	; 0x01
    2d66:	e5 e2       	ldi	r30, 0x25	; 37
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	88 0f       	add	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	82 2b       	or	r24, r18
    2d7a:	93 2b       	or	r25, r19
    2d7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
    2d84:	1d c0       	rjmp	.+58     	; 0x2dc0 <ADC_enuRead+0xca>
			break;
		case RIGHT_ADJUST:
			*Copy_Pu16Value = ADCL;
    2d86:	e4 e2       	ldi	r30, 0x24	; 36
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	88 2f       	mov	r24, r24
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	ea 81       	ldd	r30, Y+2	; 0x02
    2d92:	fb 81       	ldd	r31, Y+3	; 0x03
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	80 83       	st	Z, r24
			*Copy_Pu16Value |= ((u16)ADCH<<8);
    2d98:	ea 81       	ldd	r30, Y+2	; 0x02
    2d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9c:	20 81       	ld	r18, Z
    2d9e:	31 81       	ldd	r19, Z+1	; 0x01
    2da0:	e5 e2       	ldi	r30, 0x25	; 37
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	98 2f       	mov	r25, r24
    2dac:	88 27       	eor	r24, r24
    2dae:	82 2b       	or	r24, r18
    2db0:	93 2b       	or	r25, r19
    2db2:	ea 81       	ldd	r30, Y+2	; 0x02
    2db4:	fb 81       	ldd	r31, Y+3	; 0x03
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	80 83       	st	Z, r24
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <ADC_enuRead+0xca>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    2dbc:	82 e0       	ldi	r24, 0x02	; 2
    2dbe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <ADC_enuReadHIGHvalue>:
ES_t ADC_enuReadHIGHvalue(u8 *Copy_Pu8Value)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <ADC_enuReadHIGHvalue+0x6>
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <ADC_enuReadHIGHvalue+0x8>
    2dda:	0f 92       	push	r0
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	9b 83       	std	Y+3, r25	; 0x03
    2de2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	9b 81       	ldd	r25, Y+3	; 0x03
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	e1 f1       	breq	.+120    	; 0x2e68 <ADC_enuReadHIGHvalue+0x96>
	{
		switch((ADMUX>>ADLAR)&1)
    2df0:	e7 e2       	ldi	r30, 0x27	; 39
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	82 95       	swap	r24
    2df8:	86 95       	lsr	r24
    2dfa:	87 70       	andi	r24, 0x07	; 7
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9c 01       	movw	r18, r24
    2e02:	21 70       	andi	r18, 0x01	; 1
    2e04:	30 70       	andi	r19, 0x00	; 0
    2e06:	3d 83       	std	Y+5, r19	; 0x05
    2e08:	2c 83       	std	Y+4, r18	; 0x04
    2e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	61 f0       	breq	.+24     	; 0x2e2a <ADC_enuReadHIGHvalue+0x58>
    2e12:	2c 81       	ldd	r18, Y+4	; 0x04
    2e14:	3d 81       	ldd	r19, Y+5	; 0x05
    2e16:	21 30       	cpi	r18, 0x01	; 1
    2e18:	31 05       	cpc	r19, r1
    2e1a:	41 f5       	brne	.+80     	; 0x2e6c <ADC_enuReadHIGHvalue+0x9a>
		{
		case LEFT_ADJUST:
			*Copy_Pu8Value = ADCH;
    2e1c:	e5 e2       	ldi	r30, 0x25	; 37
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	ea 81       	ldd	r30, Y+2	; 0x02
    2e24:	fb 81       	ldd	r31, Y+3	; 0x03
    2e26:	80 83       	st	Z, r24
    2e28:	21 c0       	rjmp	.+66     	; 0x2e6c <ADC_enuReadHIGHvalue+0x9a>
			break;
		case RIGHT_ADJUST:
			*Copy_Pu8Value = (ADCL>>2);
    2e2a:	e4 e2       	ldi	r30, 0x24	; 36
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	86 95       	lsr	r24
    2e32:	86 95       	lsr	r24
    2e34:	ea 81       	ldd	r30, Y+2	; 0x02
    2e36:	fb 81       	ldd	r31, Y+3	; 0x03
    2e38:	80 83       	st	Z, r24
			*Copy_Pu8Value |= (ADCH<<6);
    2e3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e3e:	80 81       	ld	r24, Z
    2e40:	28 2f       	mov	r18, r24
    2e42:	e5 e2       	ldi	r30, 0x25	; 37
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	88 2f       	mov	r24, r24
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	00 24       	eor	r0, r0
    2e4e:	96 95       	lsr	r25
    2e50:	87 95       	ror	r24
    2e52:	07 94       	ror	r0
    2e54:	96 95       	lsr	r25
    2e56:	87 95       	ror	r24
    2e58:	07 94       	ror	r0
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	80 2d       	mov	r24, r0
    2e5e:	82 2b       	or	r24, r18
    2e60:	ea 81       	ldd	r30, Y+2	; 0x02
    2e62:	fb 81       	ldd	r31, Y+3	; 0x03
    2e64:	80 83       	st	Z, r24
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <ADC_enuReadHIGHvalue+0x9a>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    2e68:	82 e0       	ldi	r24, 0x02	; 2
    2e6a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <ADC_enuCallBackFUN>:

ES_t ADC_enuCallBackFUN(void (*Copy_PvidFUN)(void*),void *Copy_PvidPara)
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	00 d0       	rcall	.+0      	; 0x2e84 <ADC_enuCallBackFUN+0x6>
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <ADC_enuCallBackFUN+0x8>
    2e86:	0f 92       	push	r0
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	9b 83       	std	Y+3, r25	; 0x03
    2e8e:	8a 83       	std	Y+2, r24	; 0x02
    2e90:	7d 83       	std	Y+5, r23	; 0x05
    2e92:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_errorState = ES_OK;
    2e94:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PvidFUN)
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	69 f0       	breq	.+26     	; 0x2eb8 <ADC_enuCallBackFUN+0x3a>
	{
		ADC_PvidFUN = Copy_PvidFUN;
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	90 93 73 00 	sts	0x0073, r25
    2ea6:	80 93 72 00 	sts	0x0072, r24
		ADC_Pvidpara = Copy_PvidPara;
    2eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    2eac:	9d 81       	ldd	r25, Y+5	; 0x05
    2eae:	90 93 75 00 	sts	0x0075, r25
    2eb2:	80 93 74 00 	sts	0x0074, r24
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <ADC_enuCallBackFUN+0x3e>
	}
	else
	{
		Local_errorState = ES_NULLPOINTER;
    2eb8:	82 e0       	ldi	r24, 0x02	; 2
    2eba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_errorState;
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <__vector_16>:

ISR(VECT_ADC)
{
    2ece:	1f 92       	push	r1
    2ed0:	0f 92       	push	r0
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	0f 92       	push	r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	2f 93       	push	r18
    2eda:	3f 93       	push	r19
    2edc:	4f 93       	push	r20
    2ede:	5f 93       	push	r21
    2ee0:	6f 93       	push	r22
    2ee2:	7f 93       	push	r23
    2ee4:	8f 93       	push	r24
    2ee6:	9f 93       	push	r25
    2ee8:	af 93       	push	r26
    2eea:	bf 93       	push	r27
    2eec:	ef 93       	push	r30
    2eee:	ff 93       	push	r31
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PvidFUN)
    2ef8:	80 91 72 00 	lds	r24, 0x0072
    2efc:	90 91 73 00 	lds	r25, 0x0073
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	49 f0       	breq	.+18     	; 0x2f16 <__vector_16+0x48>
	{
		ADC_PvidFUN(ADC_Pvidpara);
    2f04:	e0 91 72 00 	lds	r30, 0x0072
    2f08:	f0 91 73 00 	lds	r31, 0x0073
    2f0c:	80 91 74 00 	lds	r24, 0x0074
    2f10:	90 91 75 00 	lds	r25, 0x0075
    2f14:	09 95       	icall
	}
}
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	ff 91       	pop	r31
    2f1c:	ef 91       	pop	r30
    2f1e:	bf 91       	pop	r27
    2f20:	af 91       	pop	r26
    2f22:	9f 91       	pop	r25
    2f24:	8f 91       	pop	r24
    2f26:	7f 91       	pop	r23
    2f28:	6f 91       	pop	r22
    2f2a:	5f 91       	pop	r21
    2f2c:	4f 91       	pop	r20
    2f2e:	3f 91       	pop	r19
    2f30:	2f 91       	pop	r18
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0
    2f38:	1f 90       	pop	r1
    2f3a:	18 95       	reti

00002f3c <read>:
#include"../MCAL/ADC/ADC_int.h"
#include<util/delay.h>

extern EXTI_t EXTI_AstrINTConfig[INT_NUMBERS];
void read(void *p)
{
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <read+0x6>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
	ADC_enuRead((u16*)p);
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <ADC_enuRead>
}
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <main>:

int main(void)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <main+0x6>
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
	u16 adcread = 0;
    2f66:	1a 82       	std	Y+2, r1	; 0x02
    2f68:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPortDir(DIO_u8PORTA,DIO_u8INPUT);
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_enuSetPortDir>
	DIO_enuSetPortDir(DIO_u8PORTC,0xff);
    2f72:	82 e0       	ldi	r24, 0x02	; 2
    2f74:	6f ef       	ldi	r22, 0xFF	; 255
    2f76:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <DIO_enuSetPortDir>
	DIO_enuSetPinDir(DIO_u8PORTD,DIO_u8PIN2,DIO_u8INPUT);
    2f7a:	83 e0       	ldi	r24, 0x03	; 3
    2f7c:	62 e0       	ldi	r22, 0x02	; 2
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	0e 94 9a 04 	call	0x934	; 0x934 <DIO_enuSetPinDir>

	EXTI_enuINIT(EXTI_AstrINTConfig);
    2f84:	80 e6       	ldi	r24, 0x60	; 96
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	0e 94 6f 00 	call	0xde	; 0xde <EXTI_enuINIT>
	EXTI_enuSetSenseLevel(0,EXTI_u8ANY_LOGIC_CHANGE);
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	69 e5       	ldi	r22, 0x59	; 89
    2f90:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <EXTI_enuSetSenseLevel>
	EXTI_enuEnableEXINT(0);
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	0e 94 0f 03 	call	0x61e	; 0x61e <EXTI_enuEnableEXINT>

	ADC_enuINIT();
    2f9a:	0e 94 c2 12 	call	0x2584	; 0x2584 <ADC_enuINIT>
	ADC_enuSelectChannel(ADC_u8Channel0);
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <ADC_enuSelectChannel>
	ADC_enuEnsableAutoTriggeringMode(ADC_External_Interrupt_Request_0);
    2fa4:	82 e0       	ldi	r24, 0x02	; 2
    2fa6:	0e 94 56 15 	call	0x2aac	; 0x2aac <ADC_enuEnsableAutoTriggeringMode>
	ADC_enuEnableADC();
    2faa:	0e 94 03 14 	call	0x2806	; 0x2806 <ADC_enuEnableADC>
	ADC_enuEnableINT();
    2fae:	0e 94 3c 14 	call	0x2878	; 0x2878 <ADC_enuEnableINT>
	ADC_enuCallBackFUN(read,&adcread);
    2fb2:	8e e9       	ldi	r24, 0x9E	; 158
    2fb4:	97 e1       	ldi	r25, 0x17	; 23
    2fb6:	9e 01       	movw	r18, r28
    2fb8:	2f 5f       	subi	r18, 0xFF	; 255
    2fba:	3f 4f       	sbci	r19, 0xFF	; 255
    2fbc:	b9 01       	movw	r22, r18
    2fbe:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <ADC_enuCallBackFUN>
	ADC_enuStartConversion();
    2fc2:	0e 94 29 14 	call	0x2852	; 0x2852 <ADC_enuStartConversion>

	GEI_enuEnableGINT();
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <GEI_enuEnableGINT>
			ADC_enuStartConversion();
			ADC_enuPollingConv();
			_delay_ms(1000);
		ADC_enuSelectChannel(ADC_u8Channel0);
		ADC_enuPollingConv();*/
		DIO_enuSetPortVal(DIO_u8PORTC,adcread);
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fce:	98 2f       	mov	r25, r24
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	69 2f       	mov	r22, r25
    2fd4:	0e 94 c7 11 	call	0x238e	; 0x238e <DIO_enuSetPortVal>
    2fd8:	f8 cf       	rjmp	.-16     	; 0x2fca <main+0x6e>

00002fda <_exit>:
    2fda:	f8 94       	cli

00002fdc <__stop_program>:
    2fdc:	ff cf       	rjmp	.-2      	; 0x2fdc <__stop_program>
