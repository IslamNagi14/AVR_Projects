
ADC_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002838  000028cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006e  0080006e  000028da  2**0
                  ALLOC
  3 .stab         00002ad8  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001219  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000670d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000687d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000093b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a160  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a54d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_1>
       8:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__vector_2>
       c:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 13 	call	0x2726	; 0x2726 <main>
      8a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enuEnable>:
#include"../../LIB/StdTypes.h"
#include"../../LIB/errorStatuse.h"
#include"GIE_Priv.h"

ES_t GIE_enuEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	89 83       	std	Y+1, r24	; 0x01

	  SREG|=(1<<7);
     b54:	af e5       	ldi	r26, 0x5F	; 95
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	ef e5       	ldi	r30, 0x5F	; 95
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	8c 93       	st	X, r24

	return Local_enuErrorState;
     b62:	89 81       	ldd	r24, Y+1	; 0x01
}
     b64:	0f 90       	pop	r0
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	0f 92       	push	r0
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	89 83       	std	Y+1, r24	; 0x01

	SREG&=~(1<<7);
     b7a:	af e5       	ldi	r26, 0x5F	; 95
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ef e5       	ldi	r30, 0x5F	; 95
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8f 77       	andi	r24, 0x7F	; 127
     b86:	8c 93       	st	X, r24

	return Local_enuErrorState;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
}
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <EXTI_enuInit>:
#include"interrupt.h"

static volatile void(*EXTI_APFunINIT[3])(void) = {NULL,NULL,NULL};

ES_t EXTI_enuInit(EXTI_t * Copy_pstrEXTIConfig)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	2c 97       	sbiw	r28, 0x0c	; 12
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	9c 83       	std	Y+4, r25	; 0x04
     ba8:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pstrEXTIConfig)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <EXTI_enuInit+0x26>
     bb6:	09 c1       	rjmp	.+530    	; 0xdca <EXTI_enuInit+0x238>
	{
		u8 Local_u8Iretator = 0;
     bb8:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iretator = 0;Local_u8Iretator<3;Local_u8Iretator++)
     bba:	19 82       	std	Y+1, r1	; 0x01
     bbc:	01 c1       	rjmp	.+514    	; 0xdc0 <EXTI_enuInit+0x22e>
		{
			if(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8State == ACTIVE)
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9c 01       	movw	r18, r24
     bc6:	22 0f       	add	r18, r18
     bc8:	33 1f       	adc	r19, r19
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	fc 01       	movw	r30, r24
     bd0:	e2 0f       	add	r30, r18
     bd2:	f3 1f       	adc	r31, r19
     bd4:	80 81       	ld	r24, Z
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	09 f0       	breq	.+2      	; 0xbdc <EXTI_enuInit+0x4a>
     bda:	ef c0       	rjmp	.+478    	; 0xdba <EXTI_enuInit+0x228>
			{
				switch(Local_u8Iretator)
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	3c 87       	std	Y+12, r19	; 0x0c
     be4:	2b 87       	std	Y+11, r18	; 0x0b
     be6:	8b 85       	ldd	r24, Y+11	; 0x0b
     be8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	91 05       	cpc	r25, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <EXTI_enuInit+0x60>
     bf0:	5f c0       	rjmp	.+190    	; 0xcb0 <EXTI_enuInit+0x11e>
     bf2:	2b 85       	ldd	r18, Y+11	; 0x0b
     bf4:	3c 85       	ldd	r19, Y+12	; 0x0c
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <EXTI_enuInit+0x6c>
     bfc:	ad c0       	rjmp	.+346    	; 0xd58 <EXTI_enuInit+0x1c6>
     bfe:	8b 85       	ldd	r24, Y+11	; 0x0b
     c00:	9c 85       	ldd	r25, Y+12	; 0x0c
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	09 f0       	breq	.+2      	; 0xc08 <EXTI_enuInit+0x76>
     c06:	d9 c0       	rjmp	.+434    	; 0xdba <EXTI_enuInit+0x228>
				{
				case 0:
					GICR|=(1<<6);
     c08:	ab e5       	ldi	r26, 0x5B	; 91
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	eb e5       	ldi	r30, 0x5B	; 91
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	8c 93       	st	X, r24
					MCUCR&=~(3<<0);
     c16:	a5 e5       	ldi	r26, 0x55	; 85
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e5 e5       	ldi	r30, 0x55	; 85
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8c 7f       	andi	r24, 0xFC	; 252
     c22:	8c 93       	st	X, r24
					switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9c 01       	movw	r18, r24
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	fc 01       	movw	r30, r24
     c36:	e2 0f       	add	r30, r18
     c38:	f3 1f       	adc	r31, r19
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	3a 87       	std	Y+10, r19	; 0x0a
     c42:	29 87       	std	Y+9, r18	; 0x09
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	91 05       	cpc	r25, r1
     c4c:	f1 f0       	breq	.+60     	; 0xc8a <EXTI_enuInit+0xf8>
     c4e:	29 85       	ldd	r18, Y+9	; 0x09
     c50:	3a 85       	ldd	r19, Y+10	; 0x0a
     c52:	22 30       	cpi	r18, 0x02	; 2
     c54:	31 05       	cpc	r19, r1
     c56:	2c f4       	brge	.+10     	; 0xc62 <EXTI_enuInit+0xd0>
     c58:	89 85       	ldd	r24, Y+9	; 0x09
     c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	69 f0       	breq	.+26     	; 0xc7a <EXTI_enuInit+0xe8>
     c60:	24 c0       	rjmp	.+72     	; 0xcaa <EXTI_enuInit+0x118>
     c62:	29 85       	ldd	r18, Y+9	; 0x09
     c64:	3a 85       	ldd	r19, Y+10	; 0x0a
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	09 f4       	brne	.+2      	; 0xc6e <EXTI_enuInit+0xdc>
     c6c:	a6 c0       	rjmp	.+332    	; 0xdba <EXTI_enuInit+0x228>
     c6e:	89 85       	ldd	r24, Y+9	; 0x09
     c70:	9a 85       	ldd	r25, Y+10	; 0x0a
     c72:	83 30       	cpi	r24, 0x03	; 3
     c74:	91 05       	cpc	r25, r1
     c76:	89 f0       	breq	.+34     	; 0xc9a <EXTI_enuInit+0x108>
     c78:	18 c0       	rjmp	.+48     	; 0xcaa <EXTI_enuInit+0x118>
					{
					case FALLING_EDGE:
						MCUCR|=(1<<1);
     c7a:	a5 e5       	ldi	r26, 0x55	; 85
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e5 e5       	ldi	r30, 0x55	; 85
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	82 60       	ori	r24, 0x02	; 2
     c86:	8c 93       	st	X, r24
     c88:	98 c0       	rjmp	.+304    	; 0xdba <EXTI_enuInit+0x228>
						break;
					case RISING_EDGE:
						MCUCR|=(3<<0);
     c8a:	a5 e5       	ldi	r26, 0x55	; 85
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e5 e5       	ldi	r30, 0x55	; 85
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	83 60       	ori	r24, 0x03	; 3
     c96:	8c 93       	st	X, r24
     c98:	90 c0       	rjmp	.+288    	; 0xdba <EXTI_enuInit+0x228>
						break;
					case ANY_LOGICAL_CHANGE:
						MCUCR|=(1<<0);
     c9a:	a5 e5       	ldi	r26, 0x55	; 85
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e5 e5       	ldi	r30, 0x55	; 85
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
     ca8:	88 c0       	rjmp	.+272    	; 0xdba <EXTI_enuInit+0x228>
						break;
					case LOW_LEVEL:
						break;
					default:
						Local_enuErrorState = ES_Out_Of_Range;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	8a 83       	std	Y+2, r24	; 0x02
     cae:	85 c0       	rjmp	.+266    	; 0xdba <EXTI_enuInit+0x228>
						break;
					}
					break;
					case 1:
						GICR|=(1<<7);
     cb0:	ab e5       	ldi	r26, 0x5B	; 91
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	eb e5       	ldi	r30, 0x5B	; 91
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 68       	ori	r24, 0x80	; 128
     cbc:	8c 93       	st	X, r24
						MCUCR&=~(3<<2);
     cbe:	a5 e5       	ldi	r26, 0x55	; 85
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e5 e5       	ldi	r30, 0x55	; 85
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	83 7f       	andi	r24, 0xF3	; 243
     cca:	8c 93       	st	X, r24
						switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9c 01       	movw	r18, r24
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	fc 01       	movw	r30, r24
     cde:	e2 0f       	add	r30, r18
     ce0:	f3 1f       	adc	r31, r19
     ce2:	81 81       	ldd	r24, Z+1	; 0x01
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	38 87       	std	Y+8, r19	; 0x08
     cea:	2f 83       	std	Y+7, r18	; 0x07
     cec:	8f 81       	ldd	r24, Y+7	; 0x07
     cee:	98 85       	ldd	r25, Y+8	; 0x08
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 05       	cpc	r25, r1
     cf4:	f1 f0       	breq	.+60     	; 0xd32 <EXTI_enuInit+0x1a0>
     cf6:	2f 81       	ldd	r18, Y+7	; 0x07
     cf8:	38 85       	ldd	r19, Y+8	; 0x08
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	31 05       	cpc	r19, r1
     cfe:	2c f4       	brge	.+10     	; 0xd0a <EXTI_enuInit+0x178>
     d00:	8f 81       	ldd	r24, Y+7	; 0x07
     d02:	98 85       	ldd	r25, Y+8	; 0x08
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	69 f0       	breq	.+26     	; 0xd22 <EXTI_enuInit+0x190>
     d08:	24 c0       	rjmp	.+72     	; 0xd52 <EXTI_enuInit+0x1c0>
     d0a:	2f 81       	ldd	r18, Y+7	; 0x07
     d0c:	38 85       	ldd	r19, Y+8	; 0x08
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <EXTI_enuInit+0x184>
     d14:	52 c0       	rjmp	.+164    	; 0xdba <EXTI_enuInit+0x228>
     d16:	8f 81       	ldd	r24, Y+7	; 0x07
     d18:	98 85       	ldd	r25, Y+8	; 0x08
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	91 05       	cpc	r25, r1
     d1e:	89 f0       	breq	.+34     	; 0xd42 <EXTI_enuInit+0x1b0>
     d20:	18 c0       	rjmp	.+48     	; 0xd52 <EXTI_enuInit+0x1c0>
						{
						case FALLING_EDGE:
							MCUCR|=(1<<3);
     d22:	a5 e5       	ldi	r26, 0x55	; 85
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e5 e5       	ldi	r30, 0x55	; 85
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	88 60       	ori	r24, 0x08	; 8
     d2e:	8c 93       	st	X, r24
     d30:	44 c0       	rjmp	.+136    	; 0xdba <EXTI_enuInit+0x228>
							break;
						case RISING_EDGE:
							MCUCR|=(3<<2);
     d32:	a5 e5       	ldi	r26, 0x55	; 85
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e5 e5       	ldi	r30, 0x55	; 85
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8c 60       	ori	r24, 0x0C	; 12
     d3e:	8c 93       	st	X, r24
     d40:	3c c0       	rjmp	.+120    	; 0xdba <EXTI_enuInit+0x228>
							break;
						case ANY_LOGICAL_CHANGE:
							MCUCR|=(1<<2);
     d42:	a5 e5       	ldi	r26, 0x55	; 85
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e5 e5       	ldi	r30, 0x55	; 85
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	84 60       	ori	r24, 0x04	; 4
     d4e:	8c 93       	st	X, r24
     d50:	34 c0       	rjmp	.+104    	; 0xdba <EXTI_enuInit+0x228>
							break;
						case LOW_LEVEL:
							break;
						default:
							Local_enuErrorState = ES_Out_Of_Range;
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	31 c0       	rjmp	.+98     	; 0xdba <EXTI_enuInit+0x228>
						}
						break;


						case 2:
							GICR|=(1<<5);
     d58:	ab e5       	ldi	r26, 0x5B	; 91
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	eb e5       	ldi	r30, 0x5B	; 91
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 62       	ori	r24, 0x20	; 32
     d64:	8c 93       	st	X, r24
							MCUCSR&=~(1<<6);
     d66:	a4 e5       	ldi	r26, 0x54	; 84
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e4 e5       	ldi	r30, 0x54	; 84
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7b       	andi	r24, 0xBF	; 191
     d72:	8c 93       	st	X, r24
							switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9c 01       	movw	r18, r24
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	fc 01       	movw	r30, r24
     d86:	e2 0f       	add	r30, r18
     d88:	f3 1f       	adc	r31, r19
     d8a:	81 81       	ldd	r24, Z+1	; 0x01
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	3e 83       	std	Y+6, r19	; 0x06
     d92:	2d 83       	std	Y+5, r18	; 0x05
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	79 f0       	breq	.+30     	; 0xdba <EXTI_enuInit+0x228>
     d9c:	2d 81       	ldd	r18, Y+5	; 0x05
     d9e:	3e 81       	ldd	r19, Y+6	; 0x06
     da0:	21 30       	cpi	r18, 0x01	; 1
     da2:	31 05       	cpc	r19, r1
     da4:	41 f4       	brne	.+16     	; 0xdb6 <EXTI_enuInit+0x224>
							{
							case FALLING_EDGE:
								break;
							case RISING_EDGE:
								MCUCSR|=(1<<6);
     da6:	a4 e5       	ldi	r26, 0x54	; 84
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e4 e5       	ldi	r30, 0x54	; 84
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 64       	ori	r24, 0x40	; 64
     db2:	8c 93       	st	X, r24
     db4:	02 c0       	rjmp	.+4      	; 0xdba <EXTI_enuInit+0x228>
								break;
							default:
								Local_enuErrorState = ES_Out_Of_Range;
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrEXTIConfig)
	{
		u8 Local_u8Iretator = 0;
		for(Local_u8Iretator = 0;Local_u8Iretator<3;Local_u8Iretator++)
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	83 30       	cpi	r24, 0x03	; 3
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <EXTI_enuInit+0x236>
     dc6:	fb ce       	rjmp	.-522    	; 0xbbe <EXTI_enuInit+0x2c>
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <EXTI_enuInit+0x23c>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState;
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
}
     dd0:	2c 96       	adiw	r28, 0x0c	; 12
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <EXTI_enuSetSenceMode>:
ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceLevel)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	2b 97       	sbiw	r28, 0x0b	; 11
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	8a 83       	std	Y+2, r24	; 0x02
     df8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTI_ID)
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	3b 87       	std	Y+11, r19	; 0x0b
     e06:	2a 87       	std	Y+10, r18	; 0x0a
     e08:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <EXTI_enuSetSenceMode+0x32>
     e12:	4d c0       	rjmp	.+154    	; 0xeae <EXTI_enuSetSenceMode+0xcc>
     e14:	2a 85       	ldd	r18, Y+10	; 0x0a
     e16:	3b 85       	ldd	r19, Y+11	; 0x0b
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <EXTI_enuSetSenceMode+0x3e>
     e1e:	89 c0       	rjmp	.+274    	; 0xf32 <EXTI_enuSetSenceMode+0x150>
     e20:	8a 85       	ldd	r24, Y+10	; 0x0a
     e22:	9b 85       	ldd	r25, Y+11	; 0x0b
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	09 f0       	breq	.+2      	; 0xe2a <EXTI_enuSetSenceMode+0x48>
     e28:	a3 c0       	rjmp	.+326    	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
	{
	case 0:
		MCUCR&=~(3<<0);
     e2a:	a5 e5       	ldi	r26, 0x55	; 85
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e5       	ldi	r30, 0x55	; 85
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8c 7f       	andi	r24, 0xFC	; 252
     e36:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	39 87       	std	Y+9, r19	; 0x09
     e40:	28 87       	std	Y+8, r18	; 0x08
     e42:	88 85       	ldd	r24, Y+8	; 0x08
     e44:	99 85       	ldd	r25, Y+9	; 0x09
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	91 05       	cpc	r25, r1
     e4a:	f1 f0       	breq	.+60     	; 0xe88 <EXTI_enuSetSenceMode+0xa6>
     e4c:	28 85       	ldd	r18, Y+8	; 0x08
     e4e:	39 85       	ldd	r19, Y+9	; 0x09
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	31 05       	cpc	r19, r1
     e54:	2c f4       	brge	.+10     	; 0xe60 <EXTI_enuSetSenceMode+0x7e>
     e56:	88 85       	ldd	r24, Y+8	; 0x08
     e58:	99 85       	ldd	r25, Y+9	; 0x09
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	69 f0       	breq	.+26     	; 0xe78 <EXTI_enuSetSenceMode+0x96>
     e5e:	24 c0       	rjmp	.+72     	; 0xea8 <EXTI_enuSetSenceMode+0xc6>
     e60:	28 85       	ldd	r18, Y+8	; 0x08
     e62:	39 85       	ldd	r19, Y+9	; 0x09
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <EXTI_enuSetSenceMode+0x8a>
     e6a:	82 c0       	rjmp	.+260    	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
     e6c:	88 85       	ldd	r24, Y+8	; 0x08
     e6e:	99 85       	ldd	r25, Y+9	; 0x09
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	91 05       	cpc	r25, r1
     e74:	89 f0       	breq	.+34     	; 0xe98 <EXTI_enuSetSenceMode+0xb6>
     e76:	18 c0       	rjmp	.+48     	; 0xea8 <EXTI_enuSetSenceMode+0xc6>
		{
		case FALLING_EDGE:
			MCUCR|=(1<<1);
     e78:	a5 e5       	ldi	r26, 0x55	; 85
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e5 e5       	ldi	r30, 0x55	; 85
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	82 60       	ori	r24, 0x02	; 2
     e84:	8c 93       	st	X, r24
     e86:	74 c0       	rjmp	.+232    	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case RISING_EDGE:
			MCUCR|=(3<<0);
     e88:	a5 e5       	ldi	r26, 0x55	; 85
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e5 e5       	ldi	r30, 0x55	; 85
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	83 60       	ori	r24, 0x03	; 3
     e94:	8c 93       	st	X, r24
     e96:	6c c0       	rjmp	.+216    	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case ANY_LOGICAL_CHANGE:
			MCUCR|=(1<<0);
     e98:	a5 e5       	ldi	r26, 0x55	; 85
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e5       	ldi	r30, 0x55	; 85
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	8c 93       	st	X, r24
     ea6:	64 c0       	rjmp	.+200    	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case LOW_LEVEL:
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	61 c0       	rjmp	.+194    	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		}
		break;
	case 1:
		MCUCR&=~(3<<2);
     eae:	a5 e5       	ldi	r26, 0x55	; 85
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e5       	ldi	r30, 0x55	; 85
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	83 7f       	andi	r24, 0xF3	; 243
     eba:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3f 83       	std	Y+7, r19	; 0x07
     ec4:	2e 83       	std	Y+6, r18	; 0x06
     ec6:	8e 81       	ldd	r24, Y+6	; 0x06
     ec8:	9f 81       	ldd	r25, Y+7	; 0x07
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	91 05       	cpc	r25, r1
     ece:	f1 f0       	breq	.+60     	; 0xf0c <EXTI_enuSetSenceMode+0x12a>
     ed0:	2e 81       	ldd	r18, Y+6	; 0x06
     ed2:	3f 81       	ldd	r19, Y+7	; 0x07
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	2c f4       	brge	.+10     	; 0xee4 <EXTI_enuSetSenceMode+0x102>
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	69 f0       	breq	.+26     	; 0xefc <EXTI_enuSetSenceMode+0x11a>
     ee2:	24 c0       	rjmp	.+72     	; 0xf2c <EXTI_enuSetSenceMode+0x14a>
     ee4:	2e 81       	ldd	r18, Y+6	; 0x06
     ee6:	3f 81       	ldd	r19, Y+7	; 0x07
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <EXTI_enuSetSenceMode+0x10e>
     eee:	40 c0       	rjmp	.+128    	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	9f 81       	ldd	r25, Y+7	; 0x07
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	91 05       	cpc	r25, r1
     ef8:	89 f0       	breq	.+34     	; 0xf1c <EXTI_enuSetSenceMode+0x13a>
     efa:	18 c0       	rjmp	.+48     	; 0xf2c <EXTI_enuSetSenceMode+0x14a>
		{
		case FALLING_EDGE:
			MCUCR|=(1<<3);
     efc:	a5 e5       	ldi	r26, 0x55	; 85
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e5 e5       	ldi	r30, 0x55	; 85
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 60       	ori	r24, 0x08	; 8
     f08:	8c 93       	st	X, r24
     f0a:	32 c0       	rjmp	.+100    	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case RISING_EDGE:
			MCUCR|=(3<<2);
     f0c:	a5 e5       	ldi	r26, 0x55	; 85
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e5 e5       	ldi	r30, 0x55	; 85
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8c 60       	ori	r24, 0x0C	; 12
     f18:	8c 93       	st	X, r24
     f1a:	2a c0       	rjmp	.+84     	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case ANY_LOGICAL_CHANGE:
			MCUCR|=(1<<2);
     f1c:	a5 e5       	ldi	r26, 0x55	; 85
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e5 e5       	ldi	r30, 0x55	; 85
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	84 60       	ori	r24, 0x04	; 4
     f28:	8c 93       	st	X, r24
     f2a:	22 c0       	rjmp	.+68     	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case LOW_LEVEL:
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	1f c0       	rjmp	.+62     	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		}
		break;
	case 2:
		MCUCSR&=~(1<<6);
     f32:	a4 e5       	ldi	r26, 0x54	; 84
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e4 e5       	ldi	r30, 0x54	; 84
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7b       	andi	r24, 0xBF	; 191
     f3e:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3d 83       	std	Y+5, r19	; 0x05
     f48:	2c 83       	std	Y+4, r18	; 0x04
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	79 f0       	breq	.+30     	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
     f52:	2c 81       	ldd	r18, Y+4	; 0x04
     f54:	3d 81       	ldd	r19, Y+5	; 0x05
     f56:	21 30       	cpi	r18, 0x01	; 1
     f58:	31 05       	cpc	r19, r1
     f5a:	41 f4       	brne	.+16     	; 0xf6c <EXTI_enuSetSenceMode+0x18a>
		{
		case FALLING_EDGE:
			break;
		case RISING_EDGE:
			MCUCSR|=(1<<6);
     f5c:	a4 e5       	ldi	r26, 0x54	; 84
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e4 e5       	ldi	r30, 0x54	; 84
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	8c 93       	st	X, r24
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <EXTI_enuSetSenceMode+0x18e>
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		break;
	}

return Local_enuErrorState;
     f70:	89 81       	ldd	r24, Y+1	; 0x01
}
     f72:	2b 96       	adiw	r28, 0x0b	; 11
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <EXTI_enuEnableINT>:
ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <EXTI_enuEnableINT+0x6>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <EXTI_enuEnableINT+0x8>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTI_ID)
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3c 83       	std	Y+4, r19	; 0x04
     f9e:	2b 83       	std	Y+3, r18	; 0x03
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	89 f0       	breq	.+34     	; 0xfcc <EXTI_enuEnableINT+0x48>
     faa:	2b 81       	ldd	r18, Y+3	; 0x03
     fac:	3c 81       	ldd	r19, Y+4	; 0x04
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	a1 f0       	breq	.+40     	; 0xfdc <EXTI_enuEnableINT+0x58>
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	c1 f4       	brne	.+48     	; 0xfec <EXTI_enuEnableINT+0x68>
	{
	case 0:
		GICR|=(1<<6);
     fbc:	ab e5       	ldi	r26, 0x5B	; 91
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	eb e5       	ldi	r30, 0x5B	; 91
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	8c 93       	st	X, r24
     fca:	12 c0       	rjmp	.+36     	; 0xff0 <EXTI_enuEnableINT+0x6c>
		break;
	case 1:
		GICR|=(1<<7);
     fcc:	ab e5       	ldi	r26, 0x5B	; 91
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	eb e5       	ldi	r30, 0x5B	; 91
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 68       	ori	r24, 0x80	; 128
     fd8:	8c 93       	st	X, r24
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <EXTI_enuEnableINT+0x6c>
		break;
	case 2:
		GICR|=(1<<5);
     fdc:	ab e5       	ldi	r26, 0x5B	; 91
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e5       	ldi	r30, 0x5B	; 91
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 62       	ori	r24, 0x20	; 32
     fe8:	8c 93       	st	X, r24
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <EXTI_enuEnableINT+0x6c>
		break;
	default:
		Local_enuErrorState = ES_Out_Of_Range;
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

return Local_enuErrorState;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <EXTI_enuDisableINT>:
ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <EXTI_enuDisableINT+0x6>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <EXTI_enuDisableINT+0x8>
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTI_ID)
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3c 83       	std	Y+4, r19	; 0x04
    101a:	2b 83       	std	Y+3, r18	; 0x03
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	91 05       	cpc	r25, r1
    1024:	89 f0       	breq	.+34     	; 0x1048 <EXTI_enuDisableINT+0x48>
    1026:	2b 81       	ldd	r18, Y+3	; 0x03
    1028:	3c 81       	ldd	r19, Y+4	; 0x04
    102a:	22 30       	cpi	r18, 0x02	; 2
    102c:	31 05       	cpc	r19, r1
    102e:	a1 f0       	breq	.+40     	; 0x1058 <EXTI_enuDisableINT+0x58>
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	c1 f4       	brne	.+48     	; 0x1068 <EXTI_enuDisableINT+0x68>
		{
		case 0:
			GICR&=~(1<<6);
    1038:	ab e5       	ldi	r26, 0x5B	; 91
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	eb e5       	ldi	r30, 0x5B	; 91
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8f 7b       	andi	r24, 0xBF	; 191
    1044:	8c 93       	st	X, r24
    1046:	12 c0       	rjmp	.+36     	; 0x106c <EXTI_enuDisableINT+0x6c>
			break;
		case 1:
			GICR&=~(1<<7);
    1048:	ab e5       	ldi	r26, 0x5B	; 91
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	eb e5       	ldi	r30, 0x5B	; 91
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8f 77       	andi	r24, 0x7F	; 127
    1054:	8c 93       	st	X, r24
    1056:	0a c0       	rjmp	.+20     	; 0x106c <EXTI_enuDisableINT+0x6c>
			break;
		case 2:
			GICR&=~(1<<5);
    1058:	ab e5       	ldi	r26, 0x5B	; 91
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e5       	ldi	r30, 0x5B	; 91
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7d       	andi	r24, 0xDF	; 223
    1064:	8c 93       	st	X, r24
    1066:	02 c0       	rjmp	.+4      	; 0x106c <EXTI_enuDisableINT+0x6c>
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_enuErrorState;
    106c:	89 81       	ldd	r24, Y+1	; 0x01
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <EXTI_enuCallBackF>:

ES_t EXTI_enuCallBackF(void(*Copy_PFunApp)(void),u8 Copy_u8EXTI_ID)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <EXTI_enuCallBackF+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <EXTI_enuCallBackF+0x8>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
    108c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_PFunApp)
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	9b 81       	ldd	r25, Y+3	; 0x03
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	99 f0       	breq	.+38     	; 0x10c0 <EXTI_enuCallBackF+0x44>
	{
		if(Copy_u8EXTI_ID<3)
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	68 f4       	brcc	.+26     	; 0x10ba <EXTI_enuCallBackF+0x3e>
			EXTI_APFunINIT[Copy_u8EXTI_ID] = Copy_PFunApp;
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	2a 81       	ldd	r18, Y+2	; 0x02
    10a8:	3b 81       	ldd	r19, Y+3	; 0x03
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	fc 01       	movw	r30, r24
    10b0:	e2 59       	subi	r30, 0x92	; 146
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	31 83       	std	Z+1, r19	; 0x01
    10b6:	20 83       	st	Z, r18
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <EXTI_enuCallBackF+0x48>
		else
			Local_enuErrorState = ES_Out_Of_Range;
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <EXTI_enuCallBackF+0x48>
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <__vector_1>:
ISR(VECT_INT0)
{
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	2f 93       	push	r18
    10e0:	3f 93       	push	r19
    10e2:	4f 93       	push	r20
    10e4:	5f 93       	push	r21
    10e6:	6f 93       	push	r22
    10e8:	7f 93       	push	r23
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	af 93       	push	r26
    10f0:	bf 93       	push	r27
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[0])
    10fe:	80 91 6e 00 	lds	r24, 0x006E
    1102:	90 91 6f 00 	lds	r25, 0x006F
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	29 f0       	breq	.+10     	; 0x1114 <__vector_1+0x40>
	{
		EXTI_APFunINIT[0]();
    110a:	e0 91 6e 00 	lds	r30, 0x006E
    110e:	f0 91 6f 00 	lds	r31, 0x006F
    1112:	09 95       	icall
	}
}
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <__vector_2>:

ISR(VECT_INT1)
{
    113a:	1f 92       	push	r1
    113c:	0f 92       	push	r0
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	0f 92       	push	r0
    1142:	11 24       	eor	r1, r1
    1144:	2f 93       	push	r18
    1146:	3f 93       	push	r19
    1148:	4f 93       	push	r20
    114a:	5f 93       	push	r21
    114c:	6f 93       	push	r22
    114e:	7f 93       	push	r23
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	af 93       	push	r26
    1156:	bf 93       	push	r27
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[1])
    1164:	80 91 70 00 	lds	r24, 0x0070
    1168:	90 91 71 00 	lds	r25, 0x0071
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	29 f0       	breq	.+10     	; 0x117a <__vector_2+0x40>
		{
			EXTI_APFunINIT[1]();
    1170:	e0 91 70 00 	lds	r30, 0x0070
    1174:	f0 91 71 00 	lds	r31, 0x0071
    1178:	09 95       	icall
		}
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <__vector_3>:

ISR(VECT_INT2)
{
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[2])
    11ca:	80 91 72 00 	lds	r24, 0x0072
    11ce:	90 91 73 00 	lds	r25, 0x0073
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <__vector_3+0x40>
		{
			EXTI_APFunINIT[2]();
    11d6:	e0 91 72 00 	lds	r30, 0x0072
    11da:	f0 91 73 00 	lds	r31, 0x0073
    11de:	09 95       	icall
		}
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	ff 91       	pop	r31
    11e6:	ef 91       	pop	r30
    11e8:	bf 91       	pop	r27
    11ea:	af 91       	pop	r26
    11ec:	9f 91       	pop	r25
    11ee:	8f 91       	pop	r24
    11f0:	7f 91       	pop	r23
    11f2:	6f 91       	pop	r22
    11f4:	5f 91       	pop	r21
    11f6:	4f 91       	pop	r20
    11f8:	3f 91       	pop	r19
    11fa:	2f 91       	pop	r18
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <DIO_enuInit>:
#include "../DIO/DIO_config.h"
#include "../DIO/DIO_Private.h"


ES_t DIO_enuInit(void)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	0f 92       	push	r0
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    1214:	ea e3       	ldi	r30, 0x3A	; 58
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	80 83       	st	Z, r24

	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    121c:	e7 e3       	ldi	r30, 0x37	; 55
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	86 eb       	ldi	r24, 0xB6	; 182
    1222:	80 83       	st	Z, r24

	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    1224:	e4 e3       	ldi	r30, 0x34	; 52
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	86 eb       	ldi	r24, 0xB6	; 182
    122a:	80 83       	st	Z, r24

	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    122c:	e1 e3       	ldi	r30, 0x31	; 49
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	86 eb       	ldi	r24, 0xB6	; 182
    1232:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    1234:	eb e3       	ldi	r30, 0x3B	; 59
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	10 82       	st	Z, r1

	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    123a:	e8 e3       	ldi	r30, 0x38	; 56
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	8a e3       	ldi	r24, 0x3A	; 58
    1240:	80 83       	st	Z, r24

	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    1242:	e5 e3       	ldi	r30, 0x35	; 53
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8a e3       	ldi	r24, 0x3A	; 58
    1248:	80 83       	st	Z, r24

	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    124a:	e2 e3       	ldi	r30, 0x32	; 50
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a e3       	ldi	r24, 0x3A	; 58
    1250:	80 83       	st	Z, r24

	Local_enuErrorStates = ES_OK;
    1252:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorStates;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <DIO_enuSetPortDir+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <DIO_enuSetPortDir+0x8>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	8a 83       	std	Y+2, r24	; 0x02
    126e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	84 30       	cpi	r24, 0x04	; 4
    1278:	a0 f5       	brcc	.+104    	; 0x12e2 <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3d 83       	std	Y+5, r19	; 0x05
    1282:	2c 83       	std	Y+4, r18	; 0x04
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	91 05       	cpc	r25, r1
    128c:	d1 f0       	breq	.+52     	; 0x12c2 <DIO_enuSetPortDir+0x64>
    128e:	2c 81       	ldd	r18, Y+4	; 0x04
    1290:	3d 81       	ldd	r19, Y+5	; 0x05
    1292:	22 30       	cpi	r18, 0x02	; 2
    1294:	31 05       	cpc	r19, r1
    1296:	2c f4       	brge	.+10     	; 0x12a2 <DIO_enuSetPortDir+0x44>
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	9d 81       	ldd	r25, Y+5	; 0x05
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	61 f0       	breq	.+24     	; 0x12b8 <DIO_enuSetPortDir+0x5a>
    12a0:	1e c0       	rjmp	.+60     	; 0x12de <DIO_enuSetPortDir+0x80>
    12a2:	2c 81       	ldd	r18, Y+4	; 0x04
    12a4:	3d 81       	ldd	r19, Y+5	; 0x05
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	81 f0       	breq	.+32     	; 0x12cc <DIO_enuSetPortDir+0x6e>
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	91 05       	cpc	r25, r1
    12b4:	81 f0       	breq	.+32     	; 0x12d6 <DIO_enuSetPortDir+0x78>
    12b6:	13 c0       	rjmp	.+38     	; 0x12de <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
					DDRA = Copy_u8PortValue;break;
    12b8:	ea e3       	ldi	r30, 0x3A	; 58
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	80 83       	st	Z, r24
    12c0:	0e c0       	rjmp	.+28     	; 0x12de <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
					DDRB = Copy_u8PortValue;break;
    12c2:	e7 e3       	ldi	r30, 0x37	; 55
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	80 83       	st	Z, r24
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
					DDRC= Copy_u8PortValue;break;
    12cc:	e4 e3       	ldi	r30, 0x34	; 52
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	80 83       	st	Z, r24
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
					DDRD = Copy_u8PortValue;break;
    12d6:	e1 e3       	ldi	r30, 0x31	; 49
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <DIO_enuSetPortVAL+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_enuSetPortVAL+0x8>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	84 30       	cpi	r24, 0x04	; 4
    1312:	a0 f5       	brcc	.+104    	; 0x137c <DIO_enuSetPortVAL+0x84>
		{
			switch(Copy_u8PortID)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3d 83       	std	Y+5, r19	; 0x05
    131c:	2c 83       	std	Y+4, r18	; 0x04
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	d1 f0       	breq	.+52     	; 0x135c <DIO_enuSetPortVAL+0x64>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	2c f4       	brge	.+10     	; 0x133c <DIO_enuSetPortVAL+0x44>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	61 f0       	breq	.+24     	; 0x1352 <DIO_enuSetPortVAL+0x5a>
    133a:	1e c0       	rjmp	.+60     	; 0x1378 <DIO_enuSetPortVAL+0x80>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <DIO_enuSetPortVAL+0x6e>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	91 05       	cpc	r25, r1
    134e:	81 f0       	breq	.+32     	; 0x1370 <DIO_enuSetPortVAL+0x78>
    1350:	13 c0       	rjmp	.+38     	; 0x1378 <DIO_enuSetPortVAL+0x80>
			{
			case DIO_PORTA:
						PORTA = Copy_u8PortValue;break;
    1352:	eb e3       	ldi	r30, 0x3B	; 59
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24
    135a:	0e c0       	rjmp	.+28     	; 0x1378 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTB:
						PORTB = Copy_u8PortValue;break;
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	80 83       	st	Z, r24
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTC:
						PORTC= Copy_u8PortValue;break;
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	80 83       	st	Z, r24
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTD:
						PORTD = Copy_u8PortValue;break;
    1370:	e2 e3       	ldi	r30, 0x32	; 50
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
    1378:	19 82       	std	Y+1, r1	; 0x01
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_enuSetPortVAL+0x88>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_enuToggelPort+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <DIO_enuToggelPort+0x8>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <DIO_enuToggelPort+0x1a>
    13aa:	40 c0       	rjmp	.+128    	; 0x142c <DIO_enuToggelPort+0x9a>
			{
				switch(Copy_u8PortID)
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3c 83       	std	Y+4, r19	; 0x04
    13b4:	2b 83       	std	Y+3, r18	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	91 05       	cpc	r25, r1
    13be:	e9 f0       	breq	.+58     	; 0x13fa <DIO_enuToggelPort+0x68>
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	3c 81       	ldd	r19, Y+4	; 0x04
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	2c f4       	brge	.+10     	; 0x13d4 <DIO_enuToggelPort+0x42>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	61 f0       	breq	.+24     	; 0x13ea <DIO_enuToggelPort+0x58>
    13d2:	2a c0       	rjmp	.+84     	; 0x1428 <DIO_enuToggelPort+0x96>
    13d4:	2b 81       	ldd	r18, Y+3	; 0x03
    13d6:	3c 81       	ldd	r19, Y+4	; 0x04
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	b1 f0       	breq	.+44     	; 0x140a <DIO_enuToggelPort+0x78>
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	83 30       	cpi	r24, 0x03	; 3
    13e4:	91 05       	cpc	r25, r1
    13e6:	c9 f0       	breq	.+50     	; 0x141a <DIO_enuToggelPort+0x88>
    13e8:	1f c0       	rjmp	.+62     	; 0x1428 <DIO_enuToggelPort+0x96>
				{
				case DIO_PORTA:
							PORTA = ~PORTA ;break;
    13ea:	ab e3       	ldi	r26, 0x3B	; 59
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	eb e3       	ldi	r30, 0x3B	; 59
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 95       	com	r24
    13f6:	8c 93       	st	X, r24
    13f8:	17 c0       	rjmp	.+46     	; 0x1428 <DIO_enuToggelPort+0x96>
				case DIO_PORTB:
							PORTB = ~PORTB ;break;
    13fa:	a8 e3       	ldi	r26, 0x38	; 56
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e8 e3       	ldi	r30, 0x38	; 56
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 95       	com	r24
    1406:	8c 93       	st	X, r24
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <DIO_enuToggelPort+0x96>
				case DIO_PORTC:
							PORTC = ~PORTC ;break;
    140a:	a5 e3       	ldi	r26, 0x35	; 53
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	80 95       	com	r24
    1416:	8c 93       	st	X, r24
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <DIO_enuToggelPort+0x96>
				case DIO_PORTD:
							PORTD = ~PORTD ;break;
    141a:	a2 e3       	ldi	r26, 0x32	; 50
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e2 e3       	ldi	r30, 0x32	; 50
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 95       	com	r24
    1426:	8c 93       	st	X, r24
				}
				Local_enuErrorStates = ES_OK;
    1428:	19 82       	std	Y+1, r1	; 0x01
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_enuToggelPort+0x9e>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	89 83       	std	Y+1, r24	; 0x01
			}
	return Local_enuErrorStates;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIO_enuGetPortVAL+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <DIO_enuGetPortVAL+0x8>
    1448:	00 d0       	rcall	.+0      	; 0x144a <DIO_enuGetPortVAL+0xa>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	7c 83       	std	Y+4, r23	; 0x04
    1452:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	09 f4       	brne	.+2      	; 0x1462 <DIO_enuGetPortVAL+0x22>
    1460:	42 c0       	rjmp	.+132    	; 0x14e6 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	e0 f5       	brcc	.+120    	; 0x14e0 <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3e 83       	std	Y+6, r19	; 0x06
    1470:	2d 83       	std	Y+5, r18	; 0x05
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	91 05       	cpc	r25, r1
    147a:	e1 f0       	breq	.+56     	; 0x14b4 <DIO_enuGetPortVAL+0x74>
    147c:	2d 81       	ldd	r18, Y+5	; 0x05
    147e:	3e 81       	ldd	r19, Y+6	; 0x06
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	2c f4       	brge	.+10     	; 0x1490 <DIO_enuGetPortVAL+0x50>
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	61 f0       	breq	.+24     	; 0x14a6 <DIO_enuGetPortVAL+0x66>
    148e:	26 c0       	rjmp	.+76     	; 0x14dc <DIO_enuGetPortVAL+0x9c>
    1490:	2d 81       	ldd	r18, Y+5	; 0x05
    1492:	3e 81       	ldd	r19, Y+6	; 0x06
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	a1 f0       	breq	.+40     	; 0x14c2 <DIO_enuGetPortVAL+0x82>
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	b1 f0       	breq	.+44     	; 0x14d0 <DIO_enuGetPortVAL+0x90>
    14a4:	1b c0       	rjmp	.+54     	; 0x14dc <DIO_enuGetPortVAL+0x9c>
			{
				case DIO_PORTA:
					*Copy_Pu8Value = PINA ;break;
    14a6:	e9 e3       	ldi	r30, 0x39	; 57
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	eb 81       	ldd	r30, Y+3	; 0x03
    14ae:	fc 81       	ldd	r31, Y+4	; 0x04
    14b0:	80 83       	st	Z, r24
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTB:
					*Copy_Pu8Value = PINB ;break;
    14b4:	e6 e3       	ldi	r30, 0x36	; 54
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	eb 81       	ldd	r30, Y+3	; 0x03
    14bc:	fc 81       	ldd	r31, Y+4	; 0x04
    14be:	80 83       	st	Z, r24
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTC:
					*Copy_Pu8Value = PINC ;break;
    14c2:	e3 e3       	ldi	r30, 0x33	; 51
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	eb 81       	ldd	r30, Y+3	; 0x03
    14ca:	fc 81       	ldd	r31, Y+4	; 0x04
    14cc:	80 83       	st	Z, r24
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTD:
					*Copy_Pu8Value = PIND ;break;
    14d0:	e0 e3       	ldi	r30, 0x30	; 48
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	eb 81       	ldd	r30, Y+3	; 0x03
    14d8:	fc 81       	ldd	r31, Y+4	; 0x04
    14da:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
    14dc:	19 82       	std	Y+1, r1	; 0x01
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		 Local_enuErrorStates = ES_NULLPOINTER;
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	26 96       	adiw	r28, 0x06	; 6
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_enuSetPINDir+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_enuSetPINDir+0x8>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <DIO_enuSetPINDir+0xa>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	6b 83       	std	Y+3, r22	; 0x03
    1510:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	84 30       	cpi	r24, 0x04	; 4
    151a:	08 f0       	brcs	.+2      	; 0x151e <DIO_enuSetPINDir+0x20>
    151c:	d0 c0       	rjmp	.+416    	; 0x16be <DIO_enuSetPINDir+0x1c0>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	08 f0       	brcs	.+2      	; 0x1526 <DIO_enuSetPINDir+0x28>
    1524:	cc c0       	rjmp	.+408    	; 0x16be <DIO_enuSetPINDir+0x1c0>
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	08 f0       	brcs	.+2      	; 0x152e <DIO_enuSetPINDir+0x30>
    152c:	c8 c0       	rjmp	.+400    	; 0x16be <DIO_enuSetPINDir+0x1c0>
	{

			switch(Copy_u8PortID)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3e 83       	std	Y+6, r19	; 0x06
    1536:	2d 83       	std	Y+5, r18	; 0x05
    1538:	6d 81       	ldd	r22, Y+5	; 0x05
    153a:	7e 81       	ldd	r23, Y+6	; 0x06
    153c:	61 30       	cpi	r22, 0x01	; 1
    153e:	71 05       	cpc	r23, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <DIO_enuSetPINDir+0x46>
    1542:	41 c0       	rjmp	.+130    	; 0x15c6 <DIO_enuSetPINDir+0xc8>
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	91 05       	cpc	r25, r1
    154c:	34 f4       	brge	.+12     	; 0x155a <DIO_enuSetPINDir+0x5c>
    154e:	2d 81       	ldd	r18, Y+5	; 0x05
    1550:	3e 81       	ldd	r19, Y+6	; 0x06
    1552:	21 15       	cp	r18, r1
    1554:	31 05       	cpc	r19, r1
    1556:	71 f0       	breq	.+28     	; 0x1574 <DIO_enuSetPINDir+0x76>
    1558:	b0 c0       	rjmp	.+352    	; 0x16ba <DIO_enuSetPINDir+0x1bc>
    155a:	6d 81       	ldd	r22, Y+5	; 0x05
    155c:	7e 81       	ldd	r23, Y+6	; 0x06
    155e:	62 30       	cpi	r22, 0x02	; 2
    1560:	71 05       	cpc	r23, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <DIO_enuSetPINDir+0x68>
    1564:	59 c0       	rjmp	.+178    	; 0x1618 <DIO_enuSetPINDir+0x11a>
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <DIO_enuSetPINDir+0x74>
    1570:	7c c0       	rjmp	.+248    	; 0x166a <DIO_enuSetPINDir+0x16c>
    1572:	a3 c0       	rjmp	.+326    	; 0x16ba <DIO_enuSetPINDir+0x1bc>
			{
				case DIO_PORTA:
							DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1574:	aa e3       	ldi	r26, 0x3A	; 58
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ea e3       	ldi	r30, 0x3A	; 58
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_enuSetPINDir+0x92>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	2a 95       	dec	r18
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_enuSetPINDir+0x8e>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
							DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    159a:	aa e3       	ldi	r26, 0x3A	; 58
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ea e3       	ldi	r30, 0x3A	; 58
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	b9 01       	movw	r22, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_enuSetPINDir+0xbc>
    15b6:	66 0f       	add	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	8a 95       	dec	r24
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_enuSetPINDir+0xb8>
    15be:	cb 01       	movw	r24, r22
    15c0:	84 2b       	or	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	7a c0       	rjmp	.+244    	; 0x16ba <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTB:
							DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    15c6:	a7 e3       	ldi	r26, 0x37	; 55
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_enuSetPINDir+0xe4>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	2a 95       	dec	r18
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_enuSetPINDir+0xe0>
    15e6:	80 95       	com	r24
    15e8:	84 23       	and	r24, r20
    15ea:	8c 93       	st	X, r24
							DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    15ec:	a7 e3       	ldi	r26, 0x37	; 55
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e7 e3       	ldi	r30, 0x37	; 55
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	b9 01       	movw	r22, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_enuSetPINDir+0x10e>
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_enuSetPINDir+0x10a>
    1610:	cb 01       	movw	r24, r22
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	51 c0       	rjmp	.+162    	; 0x16ba <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTC:
							DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1618:	a4 e3       	ldi	r26, 0x34	; 52
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e4 e3       	ldi	r30, 0x34	; 52
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_enuSetPINDir+0x136>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	2a 95       	dec	r18
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_enuSetPINDir+0x132>
    1638:	80 95       	com	r24
    163a:	84 23       	and	r24, r20
    163c:	8c 93       	st	X, r24
							DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    163e:	a4 e3       	ldi	r26, 0x34	; 52
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e4 e3       	ldi	r30, 0x34	; 52
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	b9 01       	movw	r22, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_enuSetPINDir+0x160>
    165a:	66 0f       	add	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_enuSetPINDir+0x15c>
    1662:	cb 01       	movw	r24, r22
    1664:	84 2b       	or	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	28 c0       	rjmp	.+80     	; 0x16ba <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTD:
							DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    166a:	a1 e3       	ldi	r26, 0x31	; 49
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e1 e3       	ldi	r30, 0x31	; 49
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_enuSetPINDir+0x188>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	2a 95       	dec	r18
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_enuSetPINDir+0x184>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
							DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1690:	a1 e3       	ldi	r26, 0x31	; 49
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e1 e3       	ldi	r30, 0x31	; 49
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b9 01       	movw	r22, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_enuSetPINDir+0x1b2>
    16ac:	66 0f       	add	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	8a 95       	dec	r24
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_enuSetPINDir+0x1ae>
    16b4:	cb 01       	movw	r24, r22
    16b6:	84 2b       	or	r24, r20
    16b8:	8c 93       	st	X, r24
							break;
			}
			Local_enuErrorStates = ES_OK;
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c4:	26 96       	adiw	r28, 0x06	; 6
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <DIO_enuSetPINVAL+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <DIO_enuSetPINVAL+0x8>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <DIO_enuSetPINVAL+0xa>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	6b 83       	std	Y+3, r22	; 0x03
    16e8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	84 30       	cpi	r24, 0x04	; 4
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <DIO_enuSetPINVAL+0x20>
    16f4:	d0 c0       	rjmp	.+416    	; 0x1896 <DIO_enuSetPINVAL+0x1c0>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 30       	cpi	r24, 0x08	; 8
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <DIO_enuSetPINVAL+0x28>
    16fc:	cc c0       	rjmp	.+408    	; 0x1896 <DIO_enuSetPINVAL+0x1c0>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	08 f0       	brcs	.+2      	; 0x1706 <DIO_enuSetPINVAL+0x30>
    1704:	c8 c0       	rjmp	.+400    	; 0x1896 <DIO_enuSetPINVAL+0x1c0>
		{

				switch(Copy_u8PortID)
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3e 83       	std	Y+6, r19	; 0x06
    170e:	2d 83       	std	Y+5, r18	; 0x05
    1710:	6d 81       	ldd	r22, Y+5	; 0x05
    1712:	7e 81       	ldd	r23, Y+6	; 0x06
    1714:	61 30       	cpi	r22, 0x01	; 1
    1716:	71 05       	cpc	r23, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <DIO_enuSetPINVAL+0x46>
    171a:	41 c0       	rjmp	.+130    	; 0x179e <DIO_enuSetPINVAL+0xc8>
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	91 05       	cpc	r25, r1
    1724:	34 f4       	brge	.+12     	; 0x1732 <DIO_enuSetPINVAL+0x5c>
    1726:	2d 81       	ldd	r18, Y+5	; 0x05
    1728:	3e 81       	ldd	r19, Y+6	; 0x06
    172a:	21 15       	cp	r18, r1
    172c:	31 05       	cpc	r19, r1
    172e:	71 f0       	breq	.+28     	; 0x174c <DIO_enuSetPINVAL+0x76>
    1730:	b0 c0       	rjmp	.+352    	; 0x1892 <DIO_enuSetPINVAL+0x1bc>
    1732:	6d 81       	ldd	r22, Y+5	; 0x05
    1734:	7e 81       	ldd	r23, Y+6	; 0x06
    1736:	62 30       	cpi	r22, 0x02	; 2
    1738:	71 05       	cpc	r23, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <DIO_enuSetPINVAL+0x68>
    173c:	59 c0       	rjmp	.+178    	; 0x17f0 <DIO_enuSetPINVAL+0x11a>
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	91 05       	cpc	r25, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <DIO_enuSetPINVAL+0x74>
    1748:	7c c0       	rjmp	.+248    	; 0x1842 <DIO_enuSetPINVAL+0x16c>
    174a:	a3 c0       	rjmp	.+326    	; 0x1892 <DIO_enuSetPINVAL+0x1bc>
				{
					case DIO_PORTA:
								PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    174c:	ab e3       	ldi	r26, 0x3B	; 59
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	eb e3       	ldi	r30, 0x3B	; 59
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_enuSetPINVAL+0x92>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	2a 95       	dec	r18
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <DIO_enuSetPINVAL+0x8e>
    176c:	80 95       	com	r24
    176e:	84 23       	and	r24, r20
    1770:	8c 93       	st	X, r24
								PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1772:	ab e3       	ldi	r26, 0x3B	; 59
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	b9 01       	movw	r22, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_enuSetPINVAL+0xbc>
    178e:	66 0f       	add	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	8a 95       	dec	r24
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_enuSetPINVAL+0xb8>
    1796:	cb 01       	movw	r24, r22
    1798:	84 2b       	or	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	7a c0       	rjmp	.+244    	; 0x1892 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTB:
								PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    179e:	a8 e3       	ldi	r26, 0x38	; 56
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e8 e3       	ldi	r30, 0x38	; 56
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_enuSetPINVAL+0xe4>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	2a 95       	dec	r18
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_enuSetPINVAL+0xe0>
    17be:	80 95       	com	r24
    17c0:	84 23       	and	r24, r20
    17c2:	8c 93       	st	X, r24
								PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    17c4:	a8 e3       	ldi	r26, 0x38	; 56
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e8 e3       	ldi	r30, 0x38	; 56
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	b9 01       	movw	r22, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_enuSetPINVAL+0x10e>
    17e0:	66 0f       	add	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	8a 95       	dec	r24
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_enuSetPINVAL+0x10a>
    17e8:	cb 01       	movw	r24, r22
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	51 c0       	rjmp	.+162    	; 0x1892 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTC:
								PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    17f0:	a5 e3       	ldi	r26, 0x35	; 53
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e5 e3       	ldi	r30, 0x35	; 53
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <DIO_enuSetPINVAL+0x136>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	2a 95       	dec	r18
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <DIO_enuSetPINVAL+0x132>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
								PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1816:	a5 e3       	ldi	r26, 0x35	; 53
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e3       	ldi	r30, 0x35	; 53
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	b9 01       	movw	r22, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_enuSetPINVAL+0x160>
    1832:	66 0f       	add	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	8a 95       	dec	r24
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_enuSetPINVAL+0x15c>
    183a:	cb 01       	movw	r24, r22
    183c:	84 2b       	or	r24, r20
    183e:	8c 93       	st	X, r24
    1840:	28 c0       	rjmp	.+80     	; 0x1892 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTD:
								PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1842:	a2 e3       	ldi	r26, 0x32	; 50
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e2 e3       	ldi	r30, 0x32	; 50
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_enuSetPINVAL+0x188>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	2a 95       	dec	r18
    1860:	e2 f7       	brpl	.-8      	; 0x185a <DIO_enuSetPINVAL+0x184>
    1862:	80 95       	com	r24
    1864:	84 23       	and	r24, r20
    1866:	8c 93       	st	X, r24
								PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1868:	a2 e3       	ldi	r26, 0x32	; 50
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e2 e3       	ldi	r30, 0x32	; 50
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	b9 01       	movw	r22, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_enuSetPINVAL+0x1b2>
    1884:	66 0f       	add	r22, r22
    1886:	77 1f       	adc	r23, r23
    1888:	8a 95       	dec	r24
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_enuSetPINVAL+0x1ae>
    188c:	cb 01       	movw	r24, r22
    188e:	84 2b       	or	r24, r20
    1890:	8c 93       	st	X, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    1892:	19 82       	std	Y+1, r1	; 0x01
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_enuSetPINVAL+0x1c4>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorStates;
    189a:	89 81       	ldd	r24, Y+1	; 0x01
}
    189c:	26 96       	adiw	r28, 0x06	; 6
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <DIO_enuToggelPIN+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <DIO_enuToggelPIN+0x8>
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	84 30       	cpi	r24, 0x04	; 4
    18c8:	08 f0       	brcs	.+2      	; 0x18cc <DIO_enuToggelPIN+0x1e>
    18ca:	74 c0       	rjmp	.+232    	; 0x19b4 <DIO_enuToggelPIN+0x106>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	88 30       	cpi	r24, 0x08	; 8
    18d0:	08 f0       	brcs	.+2      	; 0x18d4 <DIO_enuToggelPIN+0x26>
    18d2:	70 c0       	rjmp	.+224    	; 0x19b4 <DIO_enuToggelPIN+0x106>
			{

					switch(Copy_u8PortID)
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	3d 83       	std	Y+5, r19	; 0x05
    18dc:	2c 83       	std	Y+4, r18	; 0x04
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 05       	cpc	r25, r1
    18e6:	49 f1       	breq	.+82     	; 0x193a <DIO_enuToggelPIN+0x8c>
    18e8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ea:	3d 81       	ldd	r19, Y+5	; 0x05
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	2c f4       	brge	.+10     	; 0x18fc <DIO_enuToggelPIN+0x4e>
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	9d 81       	ldd	r25, Y+5	; 0x05
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	61 f0       	breq	.+24     	; 0x1912 <DIO_enuToggelPIN+0x64>
    18fa:	5a c0       	rjmp	.+180    	; 0x19b0 <DIO_enuToggelPIN+0x102>
    18fc:	2c 81       	ldd	r18, Y+4	; 0x04
    18fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	71 f1       	breq	.+92     	; 0x1962 <DIO_enuToggelPIN+0xb4>
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	83 30       	cpi	r24, 0x03	; 3
    190c:	91 05       	cpc	r25, r1
    190e:	e9 f1       	breq	.+122    	; 0x198a <DIO_enuToggelPIN+0xdc>
    1910:	4f c0       	rjmp	.+158    	; 0x19b0 <DIO_enuToggelPIN+0x102>
					{
						case DIO_PORTA:
									PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
    1912:	ab e3       	ldi	r26, 0x3B	; 59
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	eb e3       	ldi	r30, 0x3B	; 59
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_enuToggelPIN+0x82>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_enuToggelPIN+0x7e>
    1934:	84 27       	eor	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	3b c0       	rjmp	.+118    	; 0x19b0 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTB:
									PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
    193a:	a8 e3       	ldi	r26, 0x38	; 56
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e8 e3       	ldi	r30, 0x38	; 56
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_enuToggelPIN+0xaa>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_enuToggelPIN+0xa6>
    195c:	84 27       	eor	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	27 c0       	rjmp	.+78     	; 0x19b0 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTC:
									PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
    1962:	a5 e3       	ldi	r26, 0x35	; 53
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e5 e3       	ldi	r30, 0x35	; 53
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_enuToggelPIN+0xd2>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_enuToggelPIN+0xce>
    1984:	84 27       	eor	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	13 c0       	rjmp	.+38     	; 0x19b0 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTD:
									PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
    198a:	a2 e3       	ldi	r26, 0x32	; 50
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_enuToggelPIN+0xfa>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <DIO_enuToggelPIN+0xf6>
    19ac:	84 27       	eor	r24, r20
    19ae:	8c 93       	st	X, r24
									break;
					}
					Local_enuErrorStates = ES_OK;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <DIO_enuToggelPIN+0x10a>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorStates;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	27 97       	sbiw	r28, 0x07	; 7
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	6b 83       	std	Y+3, r22	; 0x03
    19e2:	5d 83       	std	Y+5, r21	; 0x05
    19e4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <DIO_enuGetPINVAL+0x2a>
    19f2:	7d c0       	rjmp	.+250    	; 0x1aee <DIO_enuGetPINVAL+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	84 30       	cpi	r24, 0x04	; 4
    19f8:	08 f0       	brcs	.+2      	; 0x19fc <DIO_enuGetPINVAL+0x32>
    19fa:	76 c0       	rjmp	.+236    	; 0x1ae8 <DIO_enuGetPINVAL+0x11e>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 30       	cpi	r24, 0x08	; 8
    1a00:	08 f0       	brcs	.+2      	; 0x1a04 <DIO_enuGetPINVAL+0x3a>
    1a02:	72 c0       	rjmp	.+228    	; 0x1ae8 <DIO_enuGetPINVAL+0x11e>
		{

				switch(Copy_u8PortID)
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3f 83       	std	Y+7, r19	; 0x07
    1a0c:	2e 83       	std	Y+6, r18	; 0x06
    1a0e:	4e 81       	ldd	r20, Y+6	; 0x06
    1a10:	5f 81       	ldd	r21, Y+7	; 0x07
    1a12:	41 30       	cpi	r20, 0x01	; 1
    1a14:	51 05       	cpc	r21, r1
    1a16:	59 f1       	breq	.+86     	; 0x1a6e <DIO_enuGetPINVAL+0xa4>
    1a18:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	91 05       	cpc	r25, r1
    1a20:	34 f4       	brge	.+12     	; 0x1a2e <DIO_enuGetPINVAL+0x64>
    1a22:	2e 81       	ldd	r18, Y+6	; 0x06
    1a24:	3f 81       	ldd	r19, Y+7	; 0x07
    1a26:	21 15       	cp	r18, r1
    1a28:	31 05       	cpc	r19, r1
    1a2a:	69 f0       	breq	.+26     	; 0x1a46 <DIO_enuGetPINVAL+0x7c>
    1a2c:	5b c0       	rjmp	.+182    	; 0x1ae4 <DIO_enuGetPINVAL+0x11a>
    1a2e:	4e 81       	ldd	r20, Y+6	; 0x06
    1a30:	5f 81       	ldd	r21, Y+7	; 0x07
    1a32:	42 30       	cpi	r20, 0x02	; 2
    1a34:	51 05       	cpc	r21, r1
    1a36:	79 f1       	breq	.+94     	; 0x1a96 <DIO_enuGetPINVAL+0xcc>
    1a38:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	91 05       	cpc	r25, r1
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <DIO_enuGetPINVAL+0x7a>
    1a42:	3d c0       	rjmp	.+122    	; 0x1abe <DIO_enuGetPINVAL+0xf4>
    1a44:	4f c0       	rjmp	.+158    	; 0x1ae4 <DIO_enuGetPINVAL+0x11a>
				{
					case DIO_PORTA:
						*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
    1a46:	e9 e3       	ldi	r30, 0x39	; 57
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a9 01       	movw	r20, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_enuGetPINVAL+0x94>
    1a5a:	55 95       	asr	r21
    1a5c:	47 95       	ror	r20
    1a5e:	8a 95       	dec	r24
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_enuGetPINVAL+0x90>
    1a62:	ca 01       	movw	r24, r20
    1a64:	81 70       	andi	r24, 0x01	; 1
    1a66:	ec 81       	ldd	r30, Y+4	; 0x04
    1a68:	fd 81       	ldd	r31, Y+5	; 0x05
    1a6a:	80 83       	st	Z, r24
    1a6c:	3b c0       	rjmp	.+118    	; 0x1ae4 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTB:
						*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
    1a6e:	e6 e3       	ldi	r30, 0x36	; 54
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a9 01       	movw	r20, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_enuGetPINVAL+0xbc>
    1a82:	55 95       	asr	r21
    1a84:	47 95       	ror	r20
    1a86:	8a 95       	dec	r24
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_enuGetPINVAL+0xb8>
    1a8a:	ca 01       	movw	r24, r20
    1a8c:	81 70       	andi	r24, 0x01	; 1
    1a8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a90:	fd 81       	ldd	r31, Y+5	; 0x05
    1a92:	80 83       	st	Z, r24
    1a94:	27 c0       	rjmp	.+78     	; 0x1ae4 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTC:
						*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
    1a96:	e3 e3       	ldi	r30, 0x33	; 51
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	88 2f       	mov	r24, r24
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a9 01       	movw	r20, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_enuGetPINVAL+0xe4>
    1aaa:	55 95       	asr	r21
    1aac:	47 95       	ror	r20
    1aae:	8a 95       	dec	r24
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_enuGetPINVAL+0xe0>
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	81 70       	andi	r24, 0x01	; 1
    1ab6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab8:	fd 81       	ldd	r31, Y+5	; 0x05
    1aba:	80 83       	st	Z, r24
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTD:
						*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
    1abe:	e0 e3       	ldi	r30, 0x30	; 48
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a9 01       	movw	r20, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_enuGetPINVAL+0x10c>
    1ad2:	55 95       	asr	r21
    1ad4:	47 95       	ror	r20
    1ad6:	8a 95       	dec	r24
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_enuGetPINVAL+0x108>
    1ada:	ca 01       	movw	r24, r20
    1adc:	81 70       	andi	r24, 0x01	; 1
    1ade:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae2:	80 83       	st	Z, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    1ae4:	19 82       	std	Y+1, r1	; 0x01
    1ae6:	05 c0       	rjmp	.+10     	; 0x1af2 <DIO_enuGetPINVAL+0x128>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    1ae8:	83 e0       	ldi	r24, 0x03	; 3
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_enuGetPINVAL+0x128>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
    1aee:	82 e0       	ldi	r24, 0x02	; 2
    1af0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af4:	27 96       	adiw	r28, 0x07	; 7
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <ADC_enuINIT>:

static volatile void (*ADC_PfunISRfun)(void) = NULL;

/*===================================================================================================================================*/
ES_t ADC_enuINIT(void)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	0f 92       	push	r0
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	89 83       	std	Y+1, r24	; 0x01


#if ADC_PRES == ADC_PRES_128
	ADCSRA|=7;
    1b14:	a6 e2       	ldi	r26, 0x26	; 38
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	87 60       	ori	r24, 0x07	; 7
    1b20:	8c 93       	st	X, r24


#if ADC_VOLTAGE_REF == ADC_AREF_REF
	ADMUX&=~(3<<6);
#elif ADC_VOLTAGE_REF == ADC_AVCC_REF
	ADMUX|=(1<<6);
    1b22:	a7 e2       	ldi	r26, 0x27	; 39
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e7 e2       	ldi	r30, 0x27	; 39
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 64       	ori	r24, 0x40	; 64
    1b2e:	8c 93       	st	X, r24
#error"Wrong Voltage reference Selection"
#endif


#if ADC_ADJ == ADC_RIGHT_ADJ
	ADMUX&=~(1<<5);
    1b30:	a7 e2       	ldi	r26, 0x27	; 39
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e7 e2       	ldi	r30, 0x27	; 39
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	8f 7d       	andi	r24, 0xDF	; 223
    1b3c:	8c 93       	st	X, r24
#error"Wrong Adjust Selection"

#endif


	return Local_enuErrorState;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <ADC_enuStartConversion>:
/*===================================================================================================================================*/
ES_t ADC_enuStartConversion(void)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	89 83       	std	Y+1, r24	; 0x01

	 ADCSRA|=(1<<6);
    1b56:	a6 e2       	ldi	r26, 0x26	; 38
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e6 e2       	ldi	r30, 0x26	; 38
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 64       	ori	r24, 0x40	; 64
    1b62:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <ADC_enuPollingSystem>:
/*===================================================================================================================================*/
ES_t ADC_enuPollingSystem(void)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	89 83       	std	Y+1, r24	; 0x01

	while(((ADCSRA>>4)&1) == 0);
    1b7c:	e6 e2       	ldi	r30, 0x26	; 38
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	82 95       	swap	r24
    1b84:	8f 70       	andi	r24, 0x0F	; 15
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	a9 f3       	breq	.-22     	; 0x1b7c <ADC_enuPollingSystem+0xe>
	ADCSRA|=(1<<4);
    1b92:	a6 e2       	ldi	r26, 0x26	; 38
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e6 e2       	ldi	r30, 0x26	; 38
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 61       	ori	r24, 0x10	; 16
    1b9e:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <ADC_enuReadHighVal>:
/*===================================================================================================================================*/
ES_t ADC_enuReadHighVal(u8 *Copy_Pu8Value)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <ADC_enuReadHighVal+0x6>
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	9b 83       	std	Y+3, r25	; 0x03
    1bb8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	89 83       	std	Y+1, r24	; 0x01

#if ADC_ADJ == ADC_RIGHT_ADJ
 *Copy_Pu8Value = (ADCL>>2);
    1bbe:	e4 e2       	ldi	r30, 0x24	; 36
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	86 95       	lsr	r24
    1bc6:	86 95       	lsr	r24
    1bc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1bca:	fb 81       	ldd	r31, Y+3	; 0x03
    1bcc:	80 83       	st	Z, r24
 *Copy_Pu8Value |= (ADCH<<6);
    1bce:	ea 81       	ldd	r30, Y+2	; 0x02
    1bd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1bd2:	80 81       	ld	r24, Z
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	e5 e2       	ldi	r30, 0x25	; 37
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	00 24       	eor	r0, r0
    1be2:	96 95       	lsr	r25
    1be4:	87 95       	ror	r24
    1be6:	07 94       	ror	r0
    1be8:	96 95       	lsr	r25
    1bea:	87 95       	ror	r24
    1bec:	07 94       	ror	r0
    1bee:	98 2f       	mov	r25, r24
    1bf0:	80 2d       	mov	r24, r0
    1bf2:	82 2b       	or	r24, r18
    1bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    1bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    1bf8:	80 83       	st	Z, r24
#elif ADC_ADJ == ADC_LEFT_ADJ
 temp = ADCH;
#else
#error"ADC ADJ is Wrong"
#endif
	return Local_enuErrorState;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <ADC_enuRead>:
/*===================================================================================================================================*/
ES_t ADC_enuRead(u16 *Copy_Pu16Value)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <ADC_enuRead+0x6>
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	9b 83       	std	Y+3, r25	; 0x03
    1c16:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	89 83       	std	Y+1, r24	; 0x01

#if ADC_ADJ == ADC_RIGHT_ADJ
	*Copy_Pu16Value = ADCL;
    1c1c:	e4 e2       	ldi	r30, 0x24	; 36
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	ea 81       	ldd	r30, Y+2	; 0x02
    1c28:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
	(*Copy_Pu16Value) |= ((u16)ADCH<<8);
    1c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c30:	fb 81       	ldd	r31, Y+3	; 0x03
    1c32:	20 81       	ld	r18, Z
    1c34:	31 81       	ldd	r19, Z+1	; 0x01
    1c36:	e5 e2       	ldi	r30, 0x25	; 37
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	98 2f       	mov	r25, r24
    1c42:	88 27       	eor	r24, r24
    1c44:	82 2b       	or	r24, r18
    1c46:	93 2b       	or	r25, r19
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	80 83       	st	Z, r24

#else
#error"ADC ADJ is Wrong"
#endif

	return Local_enuErrorState;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <ADC_enuEnableInterrupt>:
/*===================================================================================================================================*/
ES_t ADC_enuEnableInterrupt()
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	0f 92       	push	r0
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|=(1<<3);
    1c6c:	a6 e2       	ldi	r26, 0x26	; 38
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e6 e2       	ldi	r30, 0x26	; 38
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	88 60       	ori	r24, 0x08	; 8
    1c78:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <ADC_enuDisableInterrupt>:
/*===================================================================================================================================*/
ES_t ADC_enuDisableInterrupt()
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA&=~(1<<3);
    1c92:	a6 e2       	ldi	r26, 0x26	; 38
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e6 e2       	ldi	r30, 0x26	; 38
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	87 7f       	andi	r24, 0xF7	; 247
    1c9e:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <ADC_enuEnableADC>:
/*===================================================================================================================================*/
ES_t ADC_enuEnableADC(void)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	0f 92       	push	r0
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|=(1<<7);
    1cb8:	a6 e2       	ldi	r26, 0x26	; 38
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e6 e2       	ldi	r30, 0x26	; 38
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 68       	ori	r24, 0x80	; 128
    1cc4:	8c 93       	st	X, r24
	return Local_enuErrorState;
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <ADC_enuDisableADC>:
/*===================================================================================================================================*/
ES_t ADC_enuDisableADC(void)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA&=~(1<<7);
    1cde:	a6 e2       	ldi	r26, 0x26	; 38
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e6 e2       	ldi	r30, 0x26	; 38
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8f 77       	andi	r24, 0x7F	; 127
    1cea:	8c 93       	st	X, r24
	return Local_enuErrorState;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <ADC_enuSelectChannel>:
/*===================================================================================================================================*/
ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <ADC_enuSelectChannel+0x6>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <ADC_enuSelectChannel+0x8>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=~(0x1f<<0);
    1d08:	a7 e2       	ldi	r26, 0x27	; 39
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e7 e2       	ldi	r30, 0x27	; 39
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	80 7e       	andi	r24, 0xE0	; 224
    1d14:	8c 93       	st	X, r24

	switch(Copy_u8ChannelID)
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	3c 83       	std	Y+4, r19	; 0x04
    1d1e:	2b 83       	std	Y+3, r18	; 0x03
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	84 30       	cpi	r24, 0x04	; 4
    1d26:	91 05       	cpc	r25, r1
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <ADC_enuSelectChannel+0x36>
    1d2a:	42 c0       	rjmp	.+132    	; 0x1db0 <ADC_enuSelectChannel+0xba>
    1d2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d30:	25 30       	cpi	r18, 0x05	; 5
    1d32:	31 05       	cpc	r19, r1
    1d34:	84 f4       	brge	.+32     	; 0x1d56 <ADC_enuSelectChannel+0x60>
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	82 30       	cpi	r24, 0x02	; 2
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	41 f1       	breq	.+80     	; 0x1d90 <ADC_enuSelectChannel+0x9a>
    1d40:	2b 81       	ldd	r18, Y+3	; 0x03
    1d42:	3c 81       	ldd	r19, Y+4	; 0x04
    1d44:	23 30       	cpi	r18, 0x03	; 3
    1d46:	31 05       	cpc	r19, r1
    1d48:	5c f5       	brge	.+86     	; 0x1da0 <ADC_enuSelectChannel+0xaa>
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	91 05       	cpc	r25, r1
    1d52:	b1 f0       	breq	.+44     	; 0x1d80 <ADC_enuSelectChannel+0x8a>
    1d54:	4d c0       	rjmp	.+154    	; 0x1df0 <ADC_enuSelectChannel+0xfa>
    1d56:	2b 81       	ldd	r18, Y+3	; 0x03
    1d58:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5a:	26 30       	cpi	r18, 0x06	; 6
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	c1 f1       	breq	.+112    	; 0x1dd0 <ADC_enuSelectChannel+0xda>
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	86 30       	cpi	r24, 0x06	; 6
    1d66:	91 05       	cpc	r25, r1
    1d68:	5c f1       	brlt	.+86     	; 0x1dc0 <ADC_enuSelectChannel+0xca>
    1d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6e:	27 30       	cpi	r18, 0x07	; 7
    1d70:	31 05       	cpc	r19, r1
    1d72:	b1 f1       	breq	.+108    	; 0x1de0 <ADC_enuSelectChannel+0xea>
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	86 31       	cpi	r24, 0x16	; 22
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	d9 f1       	breq	.+118    	; 0x1df4 <ADC_enuSelectChannel+0xfe>
    1d7e:	38 c0       	rjmp	.+112    	; 0x1df0 <ADC_enuSelectChannel+0xfa>
	{
	case ADC_CHANNEL_0:
		break;
	case ADC_CHANNEL_1:
		ADMUX|=1;
    1d80:	a7 e2       	ldi	r26, 0x27	; 39
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e7 e2       	ldi	r30, 0x27	; 39
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	81 60       	ori	r24, 0x01	; 1
    1d8c:	8c 93       	st	X, r24
    1d8e:	32 c0       	rjmp	.+100    	; 0x1df4 <ADC_enuSelectChannel+0xfe>
			break;
	case ADC_CHANNEL_2:
		ADMUX|=2;
    1d90:	a7 e2       	ldi	r26, 0x27	; 39
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e7 e2       	ldi	r30, 0x27	; 39
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	82 60       	ori	r24, 0x02	; 2
    1d9c:	8c 93       	st	X, r24
    1d9e:	2a c0       	rjmp	.+84     	; 0x1df4 <ADC_enuSelectChannel+0xfe>
			break;
	case ADC_CHANNEL_3:
		ADMUX|=3;
    1da0:	a7 e2       	ldi	r26, 0x27	; 39
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e7 e2       	ldi	r30, 0x27	; 39
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	83 60       	ori	r24, 0x03	; 3
    1dac:	8c 93       	st	X, r24
    1dae:	22 c0       	rjmp	.+68     	; 0x1df4 <ADC_enuSelectChannel+0xfe>
			break;
	case ADC_CHANNEL_4:
		ADMUX|=4;
    1db0:	a7 e2       	ldi	r26, 0x27	; 39
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e7 e2       	ldi	r30, 0x27	; 39
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	84 60       	ori	r24, 0x04	; 4
    1dbc:	8c 93       	st	X, r24
    1dbe:	1a c0       	rjmp	.+52     	; 0x1df4 <ADC_enuSelectChannel+0xfe>
			break;
	case ADC_CHANNEL_5:
		ADMUX|=5;
    1dc0:	a7 e2       	ldi	r26, 0x27	; 39
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e7 e2       	ldi	r30, 0x27	; 39
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	85 60       	ori	r24, 0x05	; 5
    1dcc:	8c 93       	st	X, r24
    1dce:	12 c0       	rjmp	.+36     	; 0x1df4 <ADC_enuSelectChannel+0xfe>
			break;
	case ADC_CHANNEL_6:
		ADMUX|=6;
    1dd0:	a7 e2       	ldi	r26, 0x27	; 39
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e7 e2       	ldi	r30, 0x27	; 39
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	86 60       	ori	r24, 0x06	; 6
    1ddc:	8c 93       	st	X, r24
    1dde:	0a c0       	rjmp	.+20     	; 0x1df4 <ADC_enuSelectChannel+0xfe>
			break;
	case ADC_CHANNEL_7:
		ADMUX|=7;
    1de0:	a7 e2       	ldi	r26, 0x27	; 39
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e7 e2       	ldi	r30, 0x27	; 39
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	87 60       	ori	r24, 0x07	; 7
    1dec:	8c 93       	st	X, r24
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <ADC_enuSelectChannel+0xfe>
			break;
			default:
				Local_enuErrorState = ES_Out_Of_Range;
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <ADC_enuEnableTriggMod>:
/*===================================================================================================================================*/
ES_t ADC_enuEnableTriggMod(u8 Copy_u8TrigerringSource)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <ADC_enuEnableTriggMod+0x6>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01


	SFIOR&=~(7<<5);
    1e14:	a0 e5       	ldi	r26, 0x50	; 80
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e0 e5       	ldi	r30, 0x50	; 80
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8f 71       	andi	r24, 0x1F	; 31
    1e20:	8c 93       	st	X, r24
	SFIOR|=(6<<5);
#elif Copy_u8TrigerringSource == TIMER_COUNTER1_CAPTURE_EVENT
	SFIOR|=(7<<5);

#endif
	ADCSRA|=(1<<5);
    1e22:	a6 e2       	ldi	r26, 0x26	; 38
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e6 e2       	ldi	r30, 0x26	; 38
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 62       	ori	r24, 0x20	; 32
    1e2e:	8c 93       	st	X, r24
	return Local_enuErrorState;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <ADC_enuDisableTriggaringMod>:
/*===================================================================================================================================*/
ES_t ADC_enuDisableTriggaringMod(void)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	0f 92       	push	r0
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA&=~(1<<5);
    1e4a:	a6 e2       	ldi	r26, 0x26	; 38
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e6 e2       	ldi	r30, 0x26	; 38
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8f 7d       	andi	r24, 0xDF	; 223
    1e56:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <ADCE_enuCallBack>:
/*===================================================================================================================================*/
ES_t ADCE_enuCallBack(void (*Copy_PfunAPPfun)(void))
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <ADCE_enuCallBack+0x6>
    1e68:	0f 92       	push	r0
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	9b 83       	std	Y+3, r25	; 0x03
    1e70:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	89 83       	std	Y+1, r24	; 0x01

	ADC_PfunISRfun = Copy_PfunAPPfun;
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7a:	90 93 75 00 	sts	0x0075, r25
    1e7e:	80 93 74 00 	sts	0x0074, r24

	return Local_enuErrorState;
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <__vector_16>:
ISR(VECT_ADC)
{
    1e90:	1f 92       	push	r1
    1e92:	0f 92       	push	r0
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	0f 92       	push	r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	2f 93       	push	r18
    1e9c:	3f 93       	push	r19
    1e9e:	4f 93       	push	r20
    1ea0:	5f 93       	push	r21
    1ea2:	6f 93       	push	r22
    1ea4:	7f 93       	push	r23
    1ea6:	8f 93       	push	r24
    1ea8:	9f 93       	push	r25
    1eaa:	af 93       	push	r26
    1eac:	bf 93       	push	r27
    1eae:	ef 93       	push	r30
    1eb0:	ff 93       	push	r31
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfunISRfun)
    1eba:	80 91 74 00 	lds	r24, 0x0074
    1ebe:	90 91 75 00 	lds	r25, 0x0075
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	29 f0       	breq	.+10     	; 0x1ed0 <__vector_16+0x40>
		ADC_PfunISRfun();
    1ec6:	e0 91 74 00 	lds	r30, 0x0074
    1eca:	f0 91 75 00 	lds	r31, 0x0075
    1ece:	09 95       	icall
}
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	ff 91       	pop	r31
    1ed6:	ef 91       	pop	r30
    1ed8:	bf 91       	pop	r27
    1eda:	af 91       	pop	r26
    1edc:	9f 91       	pop	r25
    1ede:	8f 91       	pop	r24
    1ee0:	7f 91       	pop	r23
    1ee2:	6f 91       	pop	r22
    1ee4:	5f 91       	pop	r21
    1ee6:	4f 91       	pop	r20
    1ee8:	3f 91       	pop	r19
    1eea:	2f 91       	pop	r18
    1eec:	0f 90       	pop	r0
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	0f 90       	pop	r0
    1ef2:	1f 90       	pop	r1
    1ef4:	18 95       	reti

00001ef6 <LCD_enuINIT>:


#include<util/delay.h>

ES_t LCD_enuINIT(void)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	e8 97       	sbiw	r28, 0x38	; 56
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a0 e2       	ldi	r26, 0x20	; 32
    1f10:	b2 e4       	ldi	r27, 0x42	; 66
    1f12:	8d ab       	std	Y+53, r24	; 0x35
    1f14:	9e ab       	std	Y+54, r25	; 0x36
    1f16:	af ab       	std	Y+55, r26	; 0x37
    1f18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f20:	98 ad       	ldd	r25, Y+56	; 0x38
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a e7       	ldi	r20, 0x7A	; 122
    1f28:	53 e4       	ldi	r21, 0x43	; 67
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	89 ab       	std	Y+49, r24	; 0x31
    1f34:	9a ab       	std	Y+50, r25	; 0x32
    1f36:	ab ab       	std	Y+51, r26	; 0x33
    1f38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f40:	9c a9       	ldd	r25, Y+52	; 0x34
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	5f e3       	ldi	r21, 0x3F	; 63
    1f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	2c f4       	brge	.+10     	; 0x1f5c <LCD_enuINIT+0x66>
		__ticks = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	98 ab       	std	Y+48, r25	; 0x30
    1f58:	8f a7       	std	Y+47, r24	; 0x2f
    1f5a:	3f c0       	rjmp	.+126    	; 0x1fda <LCD_enuINIT+0xe4>
	else if (__tmp > 65535)
    1f5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f60:	8b a9       	ldd	r24, Y+51	; 0x33
    1f62:	9c a9       	ldd	r25, Y+52	; 0x34
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	57 e4       	ldi	r21, 0x47	; 71
    1f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	4c f5       	brge	.+82     	; 0x1fc6 <LCD_enuINIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f74:	6d a9       	ldd	r22, Y+53	; 0x35
    1f76:	7e a9       	ldd	r23, Y+54	; 0x36
    1f78:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e2       	ldi	r20, 0x20	; 32
    1f82:	51 e4       	ldi	r21, 0x41	; 65
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	98 ab       	std	Y+48, r25	; 0x30
    1f9a:	8f a7       	std	Y+47, r24	; 0x2f
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <LCD_enuINIT+0xc6>
    1f9e:	89 e1       	ldi	r24, 0x19	; 25
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9e a7       	std	Y+46, r25	; 0x2e
    1fa4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fa6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fa8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <LCD_enuINIT+0xb4>
    1fae:	9e a7       	std	Y+46, r25	; 0x2e
    1fb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	98 ab       	std	Y+48, r25	; 0x30
    1fba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	69 f7       	brne	.-38     	; 0x1f9e <LCD_enuINIT+0xa8>
    1fc4:	14 c0       	rjmp	.+40     	; 0x1fee <LCD_enuINIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fca:	8b a9       	ldd	r24, Y+51	; 0x33
    1fcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	98 ab       	std	Y+48, r25	; 0x30
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
    1fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1fde:	9c a7       	std	Y+44, r25	; 0x2c
    1fe0:	8b a7       	std	Y+43, r24	; 0x2b
    1fe2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <LCD_enuINIT+0xf0>
    1fea:	9c a7       	std	Y+44, r25	; 0x2c
    1fec:	8b a7       	std	Y+43, r24	; 0x2b
	//ES_t Local_enuErrorState = ES_NOK;
	_delay_ms(40);
	DIO_enuSetPINDir(EN_Port,EN_Pin,DIO_OUTPUT);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	62 e0       	ldi	r22, 0x02	; 2
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(RS_Port,RS_Pin,DIO_OUTPUT);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(RW_Port,RW_Pin,DIO_OUTPUT);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB4_Port,DB4_Pin,DIO_OUTPUT);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	64 e0       	ldi	r22, 0x04	; 4
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB5_Port,DB5_Pin,DIO_OUTPUT);
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	65 e0       	ldi	r22, 0x05	; 5
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB6_Port,DB6_Pin,DIO_OUTPUT);
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	66 e0       	ldi	r22, 0x06	; 6
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB7_Port,DB7_Pin,DIO_OUTPUT);
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	67 e0       	ldi	r22, 0x07	; 7
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>

#if LCDMODE == EIGHTMODE
	DIO_enuSetPINDir(DB0_Port,DB0_Pin,DIO_OUTPUT);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB1_Port,DB1_Pin,DIO_OUTPUT);
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB2_Port,DB2_Pin,DIO_OUTPUT);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	62 e0       	ldi	r22, 0x02	; 2
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB3_Port,DB3_Pin,DIO_OUTPUT);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	63 e0       	ldi	r22, 0x03	; 3
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
#endif
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	LCD_VidDOPRVTask(SETFUN);
    2066:	88 e3       	ldi	r24, 0x38	; 56
    2068:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_VidDOPRVTask>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e8       	ldi	r26, 0x80	; 128
    2072:	bf e3       	ldi	r27, 0x3F	; 63
    2074:	8f a3       	std	Y+39, r24	; 0x27
    2076:	98 a7       	std	Y+40, r25	; 0x28
    2078:	a9 a7       	std	Y+41, r26	; 0x29
    207a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6f a1       	ldd	r22, Y+39	; 0x27
    207e:	78 a5       	ldd	r23, Y+40	; 0x28
    2080:	89 a5       	ldd	r24, Y+41	; 0x29
    2082:	9a a5       	ldd	r25, Y+42	; 0x2a
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	53 e4       	ldi	r21, 0x43	; 67
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8b a3       	std	Y+35, r24	; 0x23
    2096:	9c a3       	std	Y+36, r25	; 0x24
    2098:	ad a3       	std	Y+37, r26	; 0x25
    209a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209c:	6b a1       	ldd	r22, Y+35	; 0x23
    209e:	7c a1       	ldd	r23, Y+36	; 0x24
    20a0:	8d a1       	ldd	r24, Y+37	; 0x25
    20a2:	9e a1       	ldd	r25, Y+38	; 0x26
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_enuINIT+0x1c8>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_enuINIT+0x246>
	else if (__tmp > 65535)
    20be:	6b a1       	ldd	r22, Y+35	; 0x23
    20c0:	7c a1       	ldd	r23, Y+36	; 0x24
    20c2:	8d a1       	ldd	r24, Y+37	; 0x25
    20c4:	9e a1       	ldd	r25, Y+38	; 0x26
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_enuINIT+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6f a1       	ldd	r22, Y+39	; 0x27
    20d8:	78 a5       	ldd	r23, Y+40	; 0x28
    20da:	89 a5       	ldd	r24, Y+41	; 0x29
    20dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9a a3       	std	Y+34, r25	; 0x22
    20fc:	89 a3       	std	Y+33, r24	; 0x21
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_enuINIT+0x228>
    2100:	89 e1       	ldi	r24, 0x19	; 25
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	98 a3       	std	Y+32, r25	; 0x20
    2106:	8f 8f       	std	Y+31, r24	; 0x1f
    2108:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210a:	98 a1       	ldd	r25, Y+32	; 0x20
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_enuINIT+0x216>
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9a a3       	std	Y+34, r25	; 0x22
    211c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	89 a1       	ldd	r24, Y+33	; 0x21
    2120:	9a a1       	ldd	r25, Y+34	; 0x22
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_enuINIT+0x20a>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LCD_enuINIT+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6b a1       	ldd	r22, Y+35	; 0x23
    212a:	7c a1       	ldd	r23, Y+36	; 0x24
    212c:	8d a1       	ldd	r24, Y+37	; 0x25
    212e:	9e a1       	ldd	r25, Y+38	; 0x26
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9a a3       	std	Y+34, r25	; 0x22
    213a:	89 a3       	std	Y+33, r24	; 0x21
    213c:	89 a1       	ldd	r24, Y+33	; 0x21
    213e:	9a a1       	ldd	r25, Y+34	; 0x22
    2140:	9e 8f       	std	Y+30, r25	; 0x1e
    2142:	8d 8f       	std	Y+29, r24	; 0x1d
    2144:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2146:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_enuINIT+0x252>
    214c:	9e 8f       	std	Y+30, r25	; 0x1e
    214e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidDOPRVTask(DISPON_OFF);
    2150:	8f e0       	ldi	r24, 0x0F	; 15
    2152:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_VidDOPRVTask>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 e8       	ldi	r26, 0x80	; 128
    215c:	bf e3       	ldi	r27, 0x3F	; 63
    215e:	89 8f       	std	Y+25, r24	; 0x19
    2160:	9a 8f       	std	Y+26, r25	; 0x1a
    2162:	ab 8f       	std	Y+27, r26	; 0x1b
    2164:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	69 8d       	ldd	r22, Y+25	; 0x19
    2168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    216a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a e7       	ldi	r20, 0x7A	; 122
    2174:	53 e4       	ldi	r21, 0x43	; 67
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	8d 8b       	std	Y+21, r24	; 0x15
    2180:	9e 8b       	std	Y+22, r25	; 0x16
    2182:	af 8b       	std	Y+23, r26	; 0x17
    2184:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2186:	6d 89       	ldd	r22, Y+21	; 0x15
    2188:	7e 89       	ldd	r23, Y+22	; 0x16
    218a:	8f 89       	ldd	r24, Y+23	; 0x17
    218c:	98 8d       	ldd	r25, Y+24	; 0x18
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	2c f4       	brge	.+10     	; 0x21a8 <LCD_enuINIT+0x2b2>
		__ticks = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
    21a6:	3f c0       	rjmp	.+126    	; 0x2226 <LCD_enuINIT+0x330>
	else if (__tmp > 65535)
    21a8:	6d 89       	ldd	r22, Y+21	; 0x15
    21aa:	7e 89       	ldd	r23, Y+22	; 0x16
    21ac:	8f 89       	ldd	r24, Y+23	; 0x17
    21ae:	98 8d       	ldd	r25, Y+24	; 0x18
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	4f e7       	ldi	r20, 0x7F	; 127
    21b6:	57 e4       	ldi	r21, 0x47	; 71
    21b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21bc:	18 16       	cp	r1, r24
    21be:	4c f5       	brge	.+82     	; 0x2212 <LCD_enuINIT+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	69 8d       	ldd	r22, Y+25	; 0x19
    21c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <LCD_enuINIT+0x312>
    21ea:	89 e1       	ldi	r24, 0x19	; 25
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9a 8b       	std	Y+18, r25	; 0x12
    21f0:	89 8b       	std	Y+17, r24	; 0x11
    21f2:	89 89       	ldd	r24, Y+17	; 0x11
    21f4:	9a 89       	ldd	r25, Y+18	; 0x12
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <LCD_enuINIT+0x300>
    21fa:	9a 8b       	std	Y+18, r25	; 0x12
    21fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	8b 89       	ldd	r24, Y+19	; 0x13
    220a:	9c 89       	ldd	r25, Y+20	; 0x14
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	69 f7       	brne	.-38     	; 0x21ea <LCD_enuINIT+0x2f4>
    2210:	14 c0       	rjmp	.+40     	; 0x223a <LCD_enuINIT+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2212:	6d 89       	ldd	r22, Y+21	; 0x15
    2214:	7e 89       	ldd	r23, Y+22	; 0x16
    2216:	8f 89       	ldd	r24, Y+23	; 0x17
    2218:	98 8d       	ldd	r25, Y+24	; 0x18
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9c 8b       	std	Y+20, r25	; 0x14
    2224:	8b 8b       	std	Y+19, r24	; 0x13
    2226:	8b 89       	ldd	r24, Y+19	; 0x13
    2228:	9c 89       	ldd	r25, Y+20	; 0x14
    222a:	98 8b       	std	Y+16, r25	; 0x10
    222c:	8f 87       	std	Y+15, r24	; 0x0f
    222e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2230:	98 89       	ldd	r25, Y+16	; 0x10
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <LCD_enuINIT+0x33c>
    2236:	98 8b       	std	Y+16, r25	; 0x10
    2238:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCD_VidDOPRVTask(DISP_CLEAR);
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_VidDOPRVTask>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a0 ec       	ldi	r26, 0xC0	; 192
    2246:	bf e3       	ldi	r27, 0x3F	; 63
    2248:	8b 87       	std	Y+11, r24	; 0x0b
    224a:	9c 87       	std	Y+12, r25	; 0x0c
    224c:	ad 87       	std	Y+13, r26	; 0x0d
    224e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2250:	6b 85       	ldd	r22, Y+11	; 0x0b
    2252:	7c 85       	ldd	r23, Y+12	; 0x0c
    2254:	8d 85       	ldd	r24, Y+13	; 0x0d
    2256:	9e 85       	ldd	r25, Y+14	; 0x0e
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4a e7       	ldi	r20, 0x7A	; 122
    225e:	53 e4       	ldi	r21, 0x43	; 67
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	8f 83       	std	Y+7, r24	; 0x07
    226a:	98 87       	std	Y+8, r25	; 0x08
    226c:	a9 87       	std	Y+9, r26	; 0x09
    226e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e8       	ldi	r20, 0x80	; 128
    227e:	5f e3       	ldi	r21, 0x3F	; 63
    2280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2284:	88 23       	and	r24, r24
    2286:	2c f4       	brge	.+10     	; 0x2292 <LCD_enuINIT+0x39c>
		__ticks = 1;
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	3f c0       	rjmp	.+126    	; 0x2310 <LCD_enuINIT+0x41a>
	else if (__tmp > 65535)
    2292:	6f 81       	ldd	r22, Y+7	; 0x07
    2294:	78 85       	ldd	r23, Y+8	; 0x08
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	3f ef       	ldi	r19, 0xFF	; 255
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	57 e4       	ldi	r21, 0x47	; 71
    22a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	4c f5       	brge	.+82     	; 0x22fc <LCD_enuINIT+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e2       	ldi	r20, 0x20	; 32
    22b8:	51 e4       	ldi	r21, 0x41	; 65
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	bc 01       	movw	r22, r24
    22c4:	cd 01       	movw	r24, r26
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	0f c0       	rjmp	.+30     	; 0x22f2 <LCD_enuINIT+0x3fc>
    22d4:	89 e1       	ldi	r24, 0x19	; 25
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9c 83       	std	Y+4, r25	; 0x04
    22da:	8b 83       	std	Y+3, r24	; 0x03
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <LCD_enuINIT+0x3ea>
    22e4:	9c 83       	std	Y+4, r25	; 0x04
    22e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	69 f7       	brne	.-38     	; 0x22d4 <LCD_enuINIT+0x3de>
    22fa:	14 c0       	rjmp	.+40     	; 0x2324 <LCD_enuINIT+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_enuINIT+0x426>
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.5);
	LCD_VidDOPRVTask(ENTRYSET);
    2324:	86 e0       	ldi	r24, 0x06	; 6
    2326:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_VidDOPRVTask>

	return 0;//Local_enuErrorState;
    232a:	80 e0       	ldi	r24, 0x00	; 0
}
    232c:	e8 96       	adiw	r28, 0x38	; 56
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <LCD_VidDOPRVTask>:

static inline void LCD_VidDOPRVTask(u8 Copy_u8Commnd)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	2f 97       	sbiw	r28, 0x0f	; 15
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	8f 87       	std	Y+15, r24	; 0x0f

		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	61 e0       	ldi	r22, 0x01	; 1
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Copy_u8Commnd>>4)&1);
    2368:	8f 85       	ldd	r24, Y+15	; 0x0f
    236a:	82 95       	swap	r24
    236c:	8f 70       	andi	r24, 0x0F	; 15
    236e:	98 2f       	mov	r25, r24
    2370:	91 70       	andi	r25, 0x01	; 1
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	64 e0       	ldi	r22, 0x04	; 4
    2376:	49 2f       	mov	r20, r25
    2378:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Copy_u8Commnd>>5)&1);
    237c:	8f 85       	ldd	r24, Y+15	; 0x0f
    237e:	82 95       	swap	r24
    2380:	86 95       	lsr	r24
    2382:	87 70       	andi	r24, 0x07	; 7
    2384:	98 2f       	mov	r25, r24
    2386:	91 70       	andi	r25, 0x01	; 1
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	65 e0       	ldi	r22, 0x05	; 5
    238c:	49 2f       	mov	r20, r25
    238e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Copy_u8Commnd>>6)&1);
    2392:	8f 85       	ldd	r24, Y+15	; 0x0f
    2394:	82 95       	swap	r24
    2396:	86 95       	lsr	r24
    2398:	86 95       	lsr	r24
    239a:	83 70       	andi	r24, 0x03	; 3
    239c:	98 2f       	mov	r25, r24
    239e:	91 70       	andi	r25, 0x01	; 1
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	66 e0       	ldi	r22, 0x06	; 6
    23a4:	49 2f       	mov	r20, r25
    23a6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Copy_u8Commnd>>7)&1);
    23aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ac:	98 2f       	mov	r25, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	99 27       	eor	r25, r25
    23b2:	99 1f       	adc	r25, r25
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	67 e0       	ldi	r22, 0x07	; 7
    23b8:	49 2f       	mov	r20, r25
    23ba:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Copy_u8Commnd>>0)&1);
    23be:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c0:	98 2f       	mov	r25, r24
    23c2:	91 70       	andi	r25, 0x01	; 1
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	49 2f       	mov	r20, r25
    23ca:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Copy_u8Commnd>>1)&1);
    23ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d0:	86 95       	lsr	r24
    23d2:	98 2f       	mov	r25, r24
    23d4:	91 70       	andi	r25, 0x01	; 1
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	49 2f       	mov	r20, r25
    23dc:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Copy_u8Commnd>>2)&1);
    23e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e2:	86 95       	lsr	r24
    23e4:	86 95       	lsr	r24
    23e6:	98 2f       	mov	r25, r24
    23e8:	91 70       	andi	r25, 0x01	; 1
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	62 e0       	ldi	r22, 0x02	; 2
    23ee:	49 2f       	mov	r20, r25
    23f0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Copy_u8Commnd>>3)&1);
    23f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f6:	86 95       	lsr	r24
    23f8:	86 95       	lsr	r24
    23fa:	86 95       	lsr	r24
    23fc:	98 2f       	mov	r25, r24
    23fe:	91 70       	andi	r25, 0x01	; 1
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	63 e0       	ldi	r22, 0x03	; 3
    2404:	49 2f       	mov	r20, r25
    2406:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	62 e0       	ldi	r22, 0x02	; 2
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a0 e2       	ldi	r26, 0x20	; 32
    241a:	b1 e4       	ldi	r27, 0x41	; 65
    241c:	8b 87       	std	Y+11, r24	; 0x0b
    241e:	9c 87       	std	Y+12, r25	; 0x0c
    2420:	ad 87       	std	Y+13, r26	; 0x0d
    2422:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	6b 85       	ldd	r22, Y+11	; 0x0b
    2426:	7c 85       	ldd	r23, Y+12	; 0x0c
    2428:	8d 85       	ldd	r24, Y+13	; 0x0d
    242a:	9e 85       	ldd	r25, Y+14	; 0x0e
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a e7       	ldi	r20, 0x7A	; 122
    2432:	53 e4       	ldi	r21, 0x43	; 67
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8f 83       	std	Y+7, r24	; 0x07
    243e:	98 87       	std	Y+8, r25	; 0x08
    2440:	a9 87       	std	Y+9, r26	; 0x09
    2442:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2444:	6f 81       	ldd	r22, Y+7	; 0x07
    2446:	78 85       	ldd	r23, Y+8	; 0x08
    2448:	89 85       	ldd	r24, Y+9	; 0x09
    244a:	9a 85       	ldd	r25, Y+10	; 0x0a
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	2c f4       	brge	.+10     	; 0x2466 <LCD_VidDOPRVTask+0x128>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <LCD_VidDOPRVTask+0x1a6>
	else if (__tmp > 65535)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	4c f5       	brge	.+82     	; 0x24d0 <LCD_VidDOPRVTask+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2480:	7c 85       	ldd	r23, Y+12	; 0x0c
    2482:	8d 85       	ldd	r24, Y+13	; 0x0d
    2484:	9e 85       	ldd	r25, Y+14	; 0x0e
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <LCD_VidDOPRVTask+0x188>
    24a8:	89 e1       	ldi	r24, 0x19	; 25
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9c 83       	std	Y+4, r25	; 0x04
    24ae:	8b 83       	std	Y+3, r24	; 0x03
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <LCD_VidDOPRVTask+0x176>
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	69 f7       	brne	.-38     	; 0x24a8 <LCD_VidDOPRVTask+0x16a>
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <LCD_VidDOPRVTask+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d0:	6f 81       	ldd	r22, Y+7	; 0x07
    24d2:	78 85       	ldd	r23, Y+8	; 0x08
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	9a 83       	std	Y+2, r25	; 0x02
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_VidDOPRVTask+0x1b2>
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	62 e0       	ldi	r22, 0x02	; 2
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>


}
    2502:	2f 96       	adiw	r28, 0x0f	; 15
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <LCD_enuSndComnd>:


ES_t LCD_enuSndComnd(u8 Copy_u8Commnd)
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	60 97       	sbiw	r28, 0x10	; 16
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	62 e0       	ldi	r22, 0x02	; 2
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Copy_u8Commnd>>4)&1);
    254c:	88 89       	ldd	r24, Y+16	; 0x10
    254e:	82 95       	swap	r24
    2550:	8f 70       	andi	r24, 0x0F	; 15
    2552:	98 2f       	mov	r25, r24
    2554:	91 70       	andi	r25, 0x01	; 1
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	64 e0       	ldi	r22, 0x04	; 4
    255a:	49 2f       	mov	r20, r25
    255c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Copy_u8Commnd>>5)&1);
    2560:	88 89       	ldd	r24, Y+16	; 0x10
    2562:	82 95       	swap	r24
    2564:	86 95       	lsr	r24
    2566:	87 70       	andi	r24, 0x07	; 7
    2568:	98 2f       	mov	r25, r24
    256a:	91 70       	andi	r25, 0x01	; 1
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	65 e0       	ldi	r22, 0x05	; 5
    2570:	49 2f       	mov	r20, r25
    2572:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Copy_u8Commnd>>6)&1);
    2576:	88 89       	ldd	r24, Y+16	; 0x10
    2578:	82 95       	swap	r24
    257a:	86 95       	lsr	r24
    257c:	86 95       	lsr	r24
    257e:	83 70       	andi	r24, 0x03	; 3
    2580:	98 2f       	mov	r25, r24
    2582:	91 70       	andi	r25, 0x01	; 1
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	66 e0       	ldi	r22, 0x06	; 6
    2588:	49 2f       	mov	r20, r25
    258a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Copy_u8Commnd>>7)&1);
    258e:	88 89       	ldd	r24, Y+16	; 0x10
    2590:	98 2f       	mov	r25, r24
    2592:	99 1f       	adc	r25, r25
    2594:	99 27       	eor	r25, r25
    2596:	99 1f       	adc	r25, r25
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	67 e0       	ldi	r22, 0x07	; 7
    259c:	49 2f       	mov	r20, r25
    259e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Copy_u8Commnd>>0)&1);
    25a2:	88 89       	ldd	r24, Y+16	; 0x10
    25a4:	98 2f       	mov	r25, r24
    25a6:	91 70       	andi	r25, 0x01	; 1
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	49 2f       	mov	r20, r25
    25ae:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Copy_u8Commnd>>1)&1);
    25b2:	88 89       	ldd	r24, Y+16	; 0x10
    25b4:	86 95       	lsr	r24
    25b6:	98 2f       	mov	r25, r24
    25b8:	91 70       	andi	r25, 0x01	; 1
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	49 2f       	mov	r20, r25
    25c0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Copy_u8Commnd>>2)&1);
    25c4:	88 89       	ldd	r24, Y+16	; 0x10
    25c6:	86 95       	lsr	r24
    25c8:	86 95       	lsr	r24
    25ca:	98 2f       	mov	r25, r24
    25cc:	91 70       	andi	r25, 0x01	; 1
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	62 e0       	ldi	r22, 0x02	; 2
    25d2:	49 2f       	mov	r20, r25
    25d4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Copy_u8Commnd>>3)&1);
    25d8:	88 89       	ldd	r24, Y+16	; 0x10
    25da:	86 95       	lsr	r24
    25dc:	86 95       	lsr	r24
    25de:	86 95       	lsr	r24
    25e0:	98 2f       	mov	r25, r24
    25e2:	91 70       	andi	r25, 0x01	; 1
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	63 e0       	ldi	r22, 0x03	; 3
    25e8:	49 2f       	mov	r20, r25
    25ea:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	62 e0       	ldi	r22, 0x02	; 2
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e2       	ldi	r26, 0x20	; 32
    25fe:	b1 e4       	ldi	r27, 0x41	; 65
    2600:	8b 87       	std	Y+11, r24	; 0x0b
    2602:	9c 87       	std	Y+12, r25	; 0x0c
    2604:	ad 87       	std	Y+13, r26	; 0x0d
    2606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	6b 85       	ldd	r22, Y+11	; 0x0b
    260a:	7c 85       	ldd	r23, Y+12	; 0x0c
    260c:	8d 85       	ldd	r24, Y+13	; 0x0d
    260e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a e7       	ldi	r20, 0x7A	; 122
    2616:	53 e4       	ldi	r21, 0x43	; 67
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8f 83       	std	Y+7, r24	; 0x07
    2622:	98 87       	std	Y+8, r25	; 0x08
    2624:	a9 87       	std	Y+9, r26	; 0x09
    2626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_enuSndComnd+0x136>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <LCD_enuSndComnd+0x1b4>
	else if (__tmp > 65535)
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	78 85       	ldd	r23, Y+8	; 0x08
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <LCD_enuSndComnd+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <LCD_enuSndComnd+0x196>
    268c:	89 e1       	ldi	r24, 0x19	; 25
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9c 83       	std	Y+4, r25	; 0x04
    2692:	8b 83       	std	Y+3, r24	; 0x03
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_enuSndComnd+0x184>
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <LCD_enuSndComnd+0x178>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <LCD_enuSndComnd+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6f 81       	ldd	r22, Y+7	; 0x07
    26b6:	78 85       	ldd	r23, Y+8	; 0x08
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_enuSndComnd+0x1c0>
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    26e6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    26e8:	60 96       	adiw	r28, 0x10	; 16
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <LCD_enuDispChar>:
ES_t LCD_enuDispChar(u8 Copy_u8Char)
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <LCD_enuDispChar+0x6>
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
	LCD_VidDOPRVTask(Copy_u8Char);
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_VidDOPRVTask>
	return Local_enuErrorState;
    271a:	89 81       	ldd	r24, Y+1	; 0x01
}
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <main>:
#include"../MCAL/ADC/ADC_Config.h"
#include"../MCAL/ADC/ADC_int.h"
#include<util/delay.h>

int main()
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <main+0x6>
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62

	DIO_enuSetPortDir(DIO_u8PORTD,0xff);
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	6f ef       	ldi	r22, 0xFF	; 255
    2734:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_enuSetPortDir>

	DIO_enuSetPINDir(DIO_u8PORTA,DIO_u8PIN0,DIO_INPUT);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DIO_u8PORTA,DIO_u8PIN2,DIO_INPUT);
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	62 e0       	ldi	r22, 0x02	; 2
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPINDir>
	ADC_enuEnableADC();
    274c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <ADC_enuEnableADC>
	ADC_enuINIT();
    2750:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <ADC_enuINIT>
	ADC_enuSelectChannel(ADC_CHANNEL_0);
    2754:	86 e1       	ldi	r24, 0x16	; 22
    2756:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ADC_enuSelectChannel>
	ADC_enuEnableTriggMod(ADC_FREE_RUNNING);
    275a:	8c e0       	ldi	r24, 0x0C	; 12
    275c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <ADC_enuEnableTriggMod>
	ADC_enuStartConversion();
    2760:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <ADC_enuStartConversion>
	//ADC_enuDisableInterrupt();
	//ADC_enuStartConversion();


	u8 adcread =0;
    2764:	19 82       	std	Y+1, r1	; 0x01
	u8 adcread1 =0;
    2766:	1a 82       	std	Y+2, r1	; 0x02

	while(1)
	{


		ADC_enuSelectChannel(ADC_CHANNEL_0);
    2768:	86 e1       	ldi	r24, 0x16	; 22
    276a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ADC_enuSelectChannel>
		ADC_enuPollingSystem();
    276e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <ADC_enuPollingSystem>
		ADC_enuReadHighVal(&adcread);
    2772:	ce 01       	movw	r24, r28
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ADC_enuReadHighVal>
		//DIO_enuSetPortVAL(DIO_u8PORTD,adcread);
		if(adcread>=100)
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	84 36       	cpi	r24, 0x64	; 100
    277e:	30 f0       	brcs	.+12     	; 0x278c <main+0x66>
		{
		//DIO_enuSetPINVAL(DIO_u8PORTD,DIO_u8PIN3,DIO_LOW);
		DIO_enuSetPINVAL(DIO_u8PORTD,DIO_u8PIN4,DIO_HIGH);
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	64 e0       	ldi	r22, 0x04	; 4
    2784:	41 e0       	ldi	r20, 0x01	; 1
    2786:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
    278a:	05 c0       	rjmp	.+10     	; 0x2796 <main+0x70>
		}
		else
		{
			DIO_enuSetPINVAL(DIO_u8PORTD,DIO_u8PIN4,DIO_LOW);
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	64 e0       	ldi	r22, 0x04	; 4
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
		}

		ADC_enuSelectChannel(ADC_CHANNEL_2);
    2796:	82 e0       	ldi	r24, 0x02	; 2
    2798:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ADC_enuSelectChannel>
				ADC_enuPollingSystem();
    279c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <ADC_enuPollingSystem>
				ADC_enuReadHighVal(&adcread1);
    27a0:	ce 01       	movw	r24, r28
    27a2:	02 96       	adiw	r24, 0x02	; 2
    27a4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ADC_enuReadHighVal>
				//DIO_enuSetPortVAL(DIO_u8PORTD,adcread);
		//_delay_ms(1000);


			if(adcread1>=100)
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	84 36       	cpi	r24, 0x64	; 100
    27ac:	30 f0       	brcs	.+12     	; 0x27ba <main+0x94>
			DIO_enuSetPINVAL(DIO_u8PORTD,DIO_u8PIN3,DIO_HIGH);
    27ae:	83 e0       	ldi	r24, 0x03	; 3
    27b0:	63 e0       	ldi	r22, 0x03	; 3
    27b2:	41 e0       	ldi	r20, 0x01	; 1
    27b4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
    27b8:	d7 cf       	rjmp	.-82     	; 0x2768 <main+0x42>
			else
				DIO_enuSetPINVAL(DIO_u8PORTD,DIO_u8PIN3,DIO_LOW);
    27ba:	83 e0       	ldi	r24, 0x03	; 3
    27bc:	63 e0       	ldi	r22, 0x03	; 3
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_enuSetPINVAL>
    27c4:	d1 cf       	rjmp	.-94     	; 0x2768 <main+0x42>

000027c6 <__prologue_saves__>:
    27c6:	2f 92       	push	r2
    27c8:	3f 92       	push	r3
    27ca:	4f 92       	push	r4
    27cc:	5f 92       	push	r5
    27ce:	6f 92       	push	r6
    27d0:	7f 92       	push	r7
    27d2:	8f 92       	push	r8
    27d4:	9f 92       	push	r9
    27d6:	af 92       	push	r10
    27d8:	bf 92       	push	r11
    27da:	cf 92       	push	r12
    27dc:	df 92       	push	r13
    27de:	ef 92       	push	r14
    27e0:	ff 92       	push	r15
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	ca 1b       	sub	r28, r26
    27f0:	db 0b       	sbc	r29, r27
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	09 94       	ijmp

000027fe <__epilogue_restores__>:
    27fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2800:	39 88       	ldd	r3, Y+17	; 0x11
    2802:	48 88       	ldd	r4, Y+16	; 0x10
    2804:	5f 84       	ldd	r5, Y+15	; 0x0f
    2806:	6e 84       	ldd	r6, Y+14	; 0x0e
    2808:	7d 84       	ldd	r7, Y+13	; 0x0d
    280a:	8c 84       	ldd	r8, Y+12	; 0x0c
    280c:	9b 84       	ldd	r9, Y+11	; 0x0b
    280e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2810:	b9 84       	ldd	r11, Y+9	; 0x09
    2812:	c8 84       	ldd	r12, Y+8	; 0x08
    2814:	df 80       	ldd	r13, Y+7	; 0x07
    2816:	ee 80       	ldd	r14, Y+6	; 0x06
    2818:	fd 80       	ldd	r15, Y+5	; 0x05
    281a:	0c 81       	ldd	r16, Y+4	; 0x04
    281c:	1b 81       	ldd	r17, Y+3	; 0x03
    281e:	aa 81       	ldd	r26, Y+2	; 0x02
    2820:	b9 81       	ldd	r27, Y+1	; 0x01
    2822:	ce 0f       	add	r28, r30
    2824:	d1 1d       	adc	r29, r1
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	ed 01       	movw	r28, r26
    2832:	08 95       	ret

00002834 <_exit>:
    2834:	f8 94       	cli

00002836 <__stop_program>:
    2836:	ff cf       	rjmp	.-2      	; 0x2836 <__stop_program>
