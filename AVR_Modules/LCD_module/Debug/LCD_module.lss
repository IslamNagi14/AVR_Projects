
LCD_module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000027c8  0000283c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002160  00000000  00000000  00002864  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c55  00000000  00000000  000049c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005619  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005759  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000058c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007512  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000083fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000091ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000930c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009d67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <main>
      7a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_enuInit>:
#include "../MCAL/DIO_config.h"
#include "../MCAL/DIO_Private.h"


ES_t DIO_enuInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     b44:	ea e3       	ldi	r30, 0x3A	; 58
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	80 83       	st	Z, r24

	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     b4c:	e7 e3       	ldi	r30, 0x37	; 55
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	86 eb       	ldi	r24, 0xB6	; 182
     b52:	80 83       	st	Z, r24

	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     b54:	e4 e3       	ldi	r30, 0x34	; 52
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	86 eb       	ldi	r24, 0xB6	; 182
     b5a:	80 83       	st	Z, r24

	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     b5c:	e1 e3       	ldi	r30, 0x31	; 49
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	86 eb       	ldi	r24, 0xB6	; 182
     b62:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
     b64:	eb e3       	ldi	r30, 0x3B	; 59
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1

	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
     b6a:	e8 e3       	ldi	r30, 0x38	; 56
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8a e3       	ldi	r24, 0x3A	; 58
     b70:	80 83       	st	Z, r24

	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
     b72:	e5 e3       	ldi	r30, 0x35	; 53
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	8a e3       	ldi	r24, 0x3A	; 58
     b78:	80 83       	st	Z, r24

	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
     b7a:	e2 e3       	ldi	r30, 0x32	; 50
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	8a e3       	ldi	r24, 0x3A	; 58
     b80:	80 83       	st	Z, r24

	Local_enuErrorStates = ES_OK;
     b82:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorStates;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
}
     b86:	0f 90       	pop	r0
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <DIO_enuSetPortDir+0x6>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <DIO_enuSetPortDir+0x8>
     b96:	0f 92       	push	r0
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	8a 83       	std	Y+2, r24	; 0x02
     b9e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	84 30       	cpi	r24, 0x04	; 4
     ba8:	a0 f5       	brcc	.+104    	; 0xc12 <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	3d 83       	std	Y+5, r19	; 0x05
     bb2:	2c 83       	std	Y+4, r18	; 0x04
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	9d 81       	ldd	r25, Y+5	; 0x05
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 05       	cpc	r25, r1
     bbc:	d1 f0       	breq	.+52     	; 0xbf2 <DIO_enuSetPortDir+0x64>
     bbe:	2c 81       	ldd	r18, Y+4	; 0x04
     bc0:	3d 81       	ldd	r19, Y+5	; 0x05
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <DIO_enuSetPortDir+0x44>
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	9d 81       	ldd	r25, Y+5	; 0x05
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	61 f0       	breq	.+24     	; 0xbe8 <DIO_enuSetPortDir+0x5a>
     bd0:	1e c0       	rjmp	.+60     	; 0xc0e <DIO_enuSetPortDir+0x80>
     bd2:	2c 81       	ldd	r18, Y+4	; 0x04
     bd4:	3d 81       	ldd	r19, Y+5	; 0x05
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	81 f0       	breq	.+32     	; 0xbfc <DIO_enuSetPortDir+0x6e>
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	91 05       	cpc	r25, r1
     be4:	81 f0       	breq	.+32     	; 0xc06 <DIO_enuSetPortDir+0x78>
     be6:	13 c0       	rjmp	.+38     	; 0xc0e <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
					DDRA = Copy_u8PortValue;break;
     be8:	ea e3       	ldi	r30, 0x3A	; 58
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	80 83       	st	Z, r24
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
					DDRB = Copy_u8PortValue;break;
     bf2:	e7 e3       	ldi	r30, 0x37	; 55
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	80 83       	st	Z, r24
     bfa:	09 c0       	rjmp	.+18     	; 0xc0e <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
					DDRC= Copy_u8PortValue;break;
     bfc:	e4 e3       	ldi	r30, 0x34	; 52
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	80 83       	st	Z, r24
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
					DDRD = Copy_u8PortValue;break;
     c06:	e1 e3       	ldi	r30, 0x31	; 49
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
     c0e:	19 82       	std	Y+1, r1	; 0x01
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     c16:	89 81       	ldd	r24, Y+1	; 0x01
}
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <DIO_enuSetPortVAL+0x6>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <DIO_enuSetPortVAL+0x8>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	8a 83       	std	Y+2, r24	; 0x02
     c38:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	84 30       	cpi	r24, 0x04	; 4
     c42:	a0 f5       	brcc	.+104    	; 0xcac <DIO_enuSetPortVAL+0x84>
		{
			switch(Copy_u8PortID)
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	3d 83       	std	Y+5, r19	; 0x05
     c4c:	2c 83       	std	Y+4, r18	; 0x04
     c4e:	8c 81       	ldd	r24, Y+4	; 0x04
     c50:	9d 81       	ldd	r25, Y+5	; 0x05
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	91 05       	cpc	r25, r1
     c56:	d1 f0       	breq	.+52     	; 0xc8c <DIO_enuSetPortVAL+0x64>
     c58:	2c 81       	ldd	r18, Y+4	; 0x04
     c5a:	3d 81       	ldd	r19, Y+5	; 0x05
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	31 05       	cpc	r19, r1
     c60:	2c f4       	brge	.+10     	; 0xc6c <DIO_enuSetPortVAL+0x44>
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	9d 81       	ldd	r25, Y+5	; 0x05
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	61 f0       	breq	.+24     	; 0xc82 <DIO_enuSetPortVAL+0x5a>
     c6a:	1e c0       	rjmp	.+60     	; 0xca8 <DIO_enuSetPortVAL+0x80>
     c6c:	2c 81       	ldd	r18, Y+4	; 0x04
     c6e:	3d 81       	ldd	r19, Y+5	; 0x05
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	81 f0       	breq	.+32     	; 0xc96 <DIO_enuSetPortVAL+0x6e>
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	83 30       	cpi	r24, 0x03	; 3
     c7c:	91 05       	cpc	r25, r1
     c7e:	81 f0       	breq	.+32     	; 0xca0 <DIO_enuSetPortVAL+0x78>
     c80:	13 c0       	rjmp	.+38     	; 0xca8 <DIO_enuSetPortVAL+0x80>
			{
			case DIO_PORTA:
						PORTA = Copy_u8PortValue;break;
     c82:	eb e3       	ldi	r30, 0x3B	; 59
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	80 83       	st	Z, r24
     c8a:	0e c0       	rjmp	.+28     	; 0xca8 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTB:
						PORTB = Copy_u8PortValue;break;
     c8c:	e8 e3       	ldi	r30, 0x38	; 56
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	80 83       	st	Z, r24
     c94:	09 c0       	rjmp	.+18     	; 0xca8 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTC:
						PORTC= Copy_u8PortValue;break;
     c96:	e5 e3       	ldi	r30, 0x35	; 53
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	80 83       	st	Z, r24
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTD:
						PORTD = Copy_u8PortValue;break;
     ca0:	e2 e3       	ldi	r30, 0x32	; 50
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     ca8:	19 82       	std	Y+1, r1	; 0x01
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_enuSetPortVAL+0x88>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <DIO_enuToggelPort+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <DIO_enuToggelPort+0x8>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <DIO_enuToggelPort+0x1a>
     cda:	40 c0       	rjmp	.+128    	; 0xd5c <DIO_enuToggelPort+0x9a>
			{
				switch(Copy_u8PortID)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	3c 83       	std	Y+4, r19	; 0x04
     ce4:	2b 83       	std	Y+3, r18	; 0x03
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	91 05       	cpc	r25, r1
     cee:	e9 f0       	breq	.+58     	; 0xd2a <DIO_enuToggelPort+0x68>
     cf0:	2b 81       	ldd	r18, Y+3	; 0x03
     cf2:	3c 81       	ldd	r19, Y+4	; 0x04
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	2c f4       	brge	.+10     	; 0xd04 <DIO_enuToggelPort+0x42>
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	61 f0       	breq	.+24     	; 0xd1a <DIO_enuToggelPort+0x58>
     d02:	2a c0       	rjmp	.+84     	; 0xd58 <DIO_enuToggelPort+0x96>
     d04:	2b 81       	ldd	r18, Y+3	; 0x03
     d06:	3c 81       	ldd	r19, Y+4	; 0x04
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	b1 f0       	breq	.+44     	; 0xd3a <DIO_enuToggelPort+0x78>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	83 30       	cpi	r24, 0x03	; 3
     d14:	91 05       	cpc	r25, r1
     d16:	c9 f0       	breq	.+50     	; 0xd4a <DIO_enuToggelPort+0x88>
     d18:	1f c0       	rjmp	.+62     	; 0xd58 <DIO_enuToggelPort+0x96>
				{
				case DIO_PORTA:
							PORTA = ~PORTA ;break;
     d1a:	ab e3       	ldi	r26, 0x3B	; 59
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	eb e3       	ldi	r30, 0x3B	; 59
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 95       	com	r24
     d26:	8c 93       	st	X, r24
     d28:	17 c0       	rjmp	.+46     	; 0xd58 <DIO_enuToggelPort+0x96>
				case DIO_PORTB:
							PORTB = ~PORTB ;break;
     d2a:	a8 e3       	ldi	r26, 0x38	; 56
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 e3       	ldi	r30, 0x38	; 56
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 95       	com	r24
     d36:	8c 93       	st	X, r24
     d38:	0f c0       	rjmp	.+30     	; 0xd58 <DIO_enuToggelPort+0x96>
				case DIO_PORTC:
							PORTC = ~PORTC ;break;
     d3a:	a5 e3       	ldi	r26, 0x35	; 53
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e5 e3       	ldi	r30, 0x35	; 53
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 95       	com	r24
     d46:	8c 93       	st	X, r24
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <DIO_enuToggelPort+0x96>
				case DIO_PORTD:
							PORTD = ~PORTD ;break;
     d4a:	a2 e3       	ldi	r26, 0x32	; 50
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e2 e3       	ldi	r30, 0x32	; 50
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 95       	com	r24
     d56:	8c 93       	st	X, r24
				}
				Local_enuErrorStates = ES_OK;
     d58:	19 82       	std	Y+1, r1	; 0x01
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_enuToggelPort+0x9e>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	89 83       	std	Y+1, r24	; 0x01
			}
	return Local_enuErrorStates;
     d60:	89 81       	ldd	r24, Y+1	; 0x01
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <DIO_enuGetPortVAL+0x6>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <DIO_enuGetPortVAL+0x8>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <DIO_enuGetPortVAL+0xa>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	7c 83       	std	Y+4, r23	; 0x04
     d82:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	09 f4       	brne	.+2      	; 0xd92 <DIO_enuGetPortVAL+0x22>
     d90:	42 c0       	rjmp	.+132    	; 0xe16 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	e0 f5       	brcc	.+120    	; 0xe10 <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3e 83       	std	Y+6, r19	; 0x06
     da0:	2d 83       	std	Y+5, r18	; 0x05
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	e1 f0       	breq	.+56     	; 0xde4 <DIO_enuGetPortVAL+0x74>
     dac:	2d 81       	ldd	r18, Y+5	; 0x05
     dae:	3e 81       	ldd	r19, Y+6	; 0x06
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	2c f4       	brge	.+10     	; 0xdc0 <DIO_enuGetPortVAL+0x50>
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	61 f0       	breq	.+24     	; 0xdd6 <DIO_enuGetPortVAL+0x66>
     dbe:	26 c0       	rjmp	.+76     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
     dc0:	2d 81       	ldd	r18, Y+5	; 0x05
     dc2:	3e 81       	ldd	r19, Y+6	; 0x06
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	a1 f0       	breq	.+40     	; 0xdf2 <DIO_enuGetPortVAL+0x82>
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	9e 81       	ldd	r25, Y+6	; 0x06
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	91 05       	cpc	r25, r1
     dd2:	b1 f0       	breq	.+44     	; 0xe00 <DIO_enuGetPortVAL+0x90>
     dd4:	1b c0       	rjmp	.+54     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
			{
				case DIO_PORTA:
					*Copy_Pu8Value = PINA ;break;
     dd6:	e9 e3       	ldi	r30, 0x39	; 57
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	eb 81       	ldd	r30, Y+3	; 0x03
     dde:	fc 81       	ldd	r31, Y+4	; 0x04
     de0:	80 83       	st	Z, r24
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTB:
					*Copy_Pu8Value = PINB ;break;
     de4:	e6 e3       	ldi	r30, 0x36	; 54
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	eb 81       	ldd	r30, Y+3	; 0x03
     dec:	fc 81       	ldd	r31, Y+4	; 0x04
     dee:	80 83       	st	Z, r24
     df0:	0d c0       	rjmp	.+26     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTC:
					*Copy_Pu8Value = PINC ;break;
     df2:	e3 e3       	ldi	r30, 0x33	; 51
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	80 83       	st	Z, r24
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTD:
					*Copy_Pu8Value = PIND ;break;
     e00:	e0 e3       	ldi	r30, 0x30	; 48
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	eb 81       	ldd	r30, Y+3	; 0x03
     e08:	fc 81       	ldd	r31, Y+4	; 0x04
     e0a:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     e0c:	19 82       	std	Y+1, r1	; 0x01
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		 Local_enuErrorStates = ES_NULLPOINTER;
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1c:	26 96       	adiw	r28, 0x06	; 6
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_enuSetPINDir+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_enuSetPINDir+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <DIO_enuSetPINDir+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	6b 83       	std	Y+3, r22	; 0x03
     e40:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	84 30       	cpi	r24, 0x04	; 4
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <DIO_enuSetPINDir+0x20>
     e4c:	d0 c0       	rjmp	.+416    	; 0xfee <DIO_enuSetPINDir+0x1c0>
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	08 f0       	brcs	.+2      	; 0xe56 <DIO_enuSetPINDir+0x28>
     e54:	cc c0       	rjmp	.+408    	; 0xfee <DIO_enuSetPINDir+0x1c0>
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	82 30       	cpi	r24, 0x02	; 2
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <DIO_enuSetPINDir+0x30>
     e5c:	c8 c0       	rjmp	.+400    	; 0xfee <DIO_enuSetPINDir+0x1c0>
	{

			switch(Copy_u8PortID)
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3e 83       	std	Y+6, r19	; 0x06
     e66:	2d 83       	std	Y+5, r18	; 0x05
     e68:	6d 81       	ldd	r22, Y+5	; 0x05
     e6a:	7e 81       	ldd	r23, Y+6	; 0x06
     e6c:	61 30       	cpi	r22, 0x01	; 1
     e6e:	71 05       	cpc	r23, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <DIO_enuSetPINDir+0x46>
     e72:	41 c0       	rjmp	.+130    	; 0xef6 <DIO_enuSetPINDir+0xc8>
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	91 05       	cpc	r25, r1
     e7c:	34 f4       	brge	.+12     	; 0xe8a <DIO_enuSetPINDir+0x5c>
     e7e:	2d 81       	ldd	r18, Y+5	; 0x05
     e80:	3e 81       	ldd	r19, Y+6	; 0x06
     e82:	21 15       	cp	r18, r1
     e84:	31 05       	cpc	r19, r1
     e86:	71 f0       	breq	.+28     	; 0xea4 <DIO_enuSetPINDir+0x76>
     e88:	b0 c0       	rjmp	.+352    	; 0xfea <DIO_enuSetPINDir+0x1bc>
     e8a:	6d 81       	ldd	r22, Y+5	; 0x05
     e8c:	7e 81       	ldd	r23, Y+6	; 0x06
     e8e:	62 30       	cpi	r22, 0x02	; 2
     e90:	71 05       	cpc	r23, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <DIO_enuSetPINDir+0x68>
     e94:	59 c0       	rjmp	.+178    	; 0xf48 <DIO_enuSetPINDir+0x11a>
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <DIO_enuSetPINDir+0x74>
     ea0:	7c c0       	rjmp	.+248    	; 0xf9a <DIO_enuSetPINDir+0x16c>
     ea2:	a3 c0       	rjmp	.+326    	; 0xfea <DIO_enuSetPINDir+0x1bc>
			{
				case DIO_PORTA:
							DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     ea4:	aa e3       	ldi	r26, 0x3A	; 58
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ea e3       	ldi	r30, 0x3A	; 58
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_enuSetPINDir+0x92>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	2a 95       	dec	r18
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_enuSetPINDir+0x8e>
     ec4:	80 95       	com	r24
     ec6:	84 23       	and	r24, r20
     ec8:	8c 93       	st	X, r24
							DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     eca:	aa e3       	ldi	r26, 0x3A	; 58
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ea e3       	ldi	r30, 0x3A	; 58
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	b9 01       	movw	r22, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_enuSetPINDir+0xbc>
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	8a 95       	dec	r24
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_enuSetPINDir+0xb8>
     eee:	cb 01       	movw	r24, r22
     ef0:	84 2b       	or	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	7a c0       	rjmp	.+244    	; 0xfea <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTB:
							DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     ef6:	a7 e3       	ldi	r26, 0x37	; 55
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e7 e3       	ldi	r30, 0x37	; 55
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_enuSetPINDir+0xe4>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	2a 95       	dec	r18
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_enuSetPINDir+0xe0>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
							DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     f1c:	a7 e3       	ldi	r26, 0x37	; 55
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e3       	ldi	r30, 0x37	; 55
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	b9 01       	movw	r22, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_enuSetPINDir+0x10e>
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	8a 95       	dec	r24
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_enuSetPINDir+0x10a>
     f40:	cb 01       	movw	r24, r22
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	51 c0       	rjmp	.+162    	; 0xfea <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTC:
							DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     f48:	a4 e3       	ldi	r26, 0x34	; 52
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e4 e3       	ldi	r30, 0x34	; 52
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_enuSetPINDir+0x136>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	2a 95       	dec	r18
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_enuSetPINDir+0x132>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
							DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     f6e:	a4 e3       	ldi	r26, 0x34	; 52
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e4 e3       	ldi	r30, 0x34	; 52
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	b9 01       	movw	r22, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_enuSetPINDir+0x160>
     f8a:	66 0f       	add	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	8a 95       	dec	r24
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_enuSetPINDir+0x15c>
     f92:	cb 01       	movw	r24, r22
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	28 c0       	rjmp	.+80     	; 0xfea <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTD:
							DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     f9a:	a1 e3       	ldi	r26, 0x31	; 49
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e1 e3       	ldi	r30, 0x31	; 49
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_enuSetPINDir+0x188>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	2a 95       	dec	r18
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_enuSetPINDir+0x184>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
							DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     fc0:	a1 e3       	ldi	r26, 0x31	; 49
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e3       	ldi	r30, 0x31	; 49
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	b9 01       	movw	r22, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_enuSetPINDir+0x1b2>
     fdc:	66 0f       	add	r22, r22
     fde:	77 1f       	adc	r23, r23
     fe0:	8a 95       	dec	r24
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_enuSetPINDir+0x1ae>
     fe4:	cb 01       	movw	r24, r22
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
							break;
			}
			Local_enuErrorStates = ES_OK;
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff4:	26 96       	adiw	r28, 0x06	; 6
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <DIO_enuSetPINVAL+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_enuSetPINVAL+0x8>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <DIO_enuSetPINVAL+0xa>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	6b 83       	std	Y+3, r22	; 0x03
    1018:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	08 f0       	brcs	.+2      	; 0x1026 <DIO_enuSetPINVAL+0x20>
    1024:	d0 c0       	rjmp	.+416    	; 0x11c6 <DIO_enuSetPINVAL+0x1c0>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	08 f0       	brcs	.+2      	; 0x102e <DIO_enuSetPINVAL+0x28>
    102c:	cc c0       	rjmp	.+408    	; 0x11c6 <DIO_enuSetPINVAL+0x1c0>
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	08 f0       	brcs	.+2      	; 0x1036 <DIO_enuSetPINVAL+0x30>
    1034:	c8 c0       	rjmp	.+400    	; 0x11c6 <DIO_enuSetPINVAL+0x1c0>
		{

				switch(Copy_u8PortID)
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3e 83       	std	Y+6, r19	; 0x06
    103e:	2d 83       	std	Y+5, r18	; 0x05
    1040:	6d 81       	ldd	r22, Y+5	; 0x05
    1042:	7e 81       	ldd	r23, Y+6	; 0x06
    1044:	61 30       	cpi	r22, 0x01	; 1
    1046:	71 05       	cpc	r23, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <DIO_enuSetPINVAL+0x46>
    104a:	41 c0       	rjmp	.+130    	; 0x10ce <DIO_enuSetPINVAL+0xc8>
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	91 05       	cpc	r25, r1
    1054:	34 f4       	brge	.+12     	; 0x1062 <DIO_enuSetPINVAL+0x5c>
    1056:	2d 81       	ldd	r18, Y+5	; 0x05
    1058:	3e 81       	ldd	r19, Y+6	; 0x06
    105a:	21 15       	cp	r18, r1
    105c:	31 05       	cpc	r19, r1
    105e:	71 f0       	breq	.+28     	; 0x107c <DIO_enuSetPINVAL+0x76>
    1060:	b0 c0       	rjmp	.+352    	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
    1062:	6d 81       	ldd	r22, Y+5	; 0x05
    1064:	7e 81       	ldd	r23, Y+6	; 0x06
    1066:	62 30       	cpi	r22, 0x02	; 2
    1068:	71 05       	cpc	r23, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <DIO_enuSetPINVAL+0x68>
    106c:	59 c0       	rjmp	.+178    	; 0x1120 <DIO_enuSetPINVAL+0x11a>
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <DIO_enuSetPINVAL+0x74>
    1078:	7c c0       	rjmp	.+248    	; 0x1172 <DIO_enuSetPINVAL+0x16c>
    107a:	a3 c0       	rjmp	.+326    	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
				{
					case DIO_PORTA:
								PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_enuSetPINVAL+0x92>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	2a 95       	dec	r18
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_enuSetPINVAL+0x8e>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
								PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    10a2:	ab e3       	ldi	r26, 0x3B	; 59
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e3       	ldi	r30, 0x3B	; 59
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	b9 01       	movw	r22, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_enuSetPINVAL+0xbc>
    10be:	66 0f       	add	r22, r22
    10c0:	77 1f       	adc	r23, r23
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_enuSetPINVAL+0xb8>
    10c6:	cb 01       	movw	r24, r22
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	7a c0       	rjmp	.+244    	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTB:
								PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    10ce:	a8 e3       	ldi	r26, 0x38	; 56
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e8 e3       	ldi	r30, 0x38	; 56
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enuSetPINVAL+0xe4>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	2a 95       	dec	r18
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_enuSetPINVAL+0xe0>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
								PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    10f4:	a8 e3       	ldi	r26, 0x38	; 56
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e8 e3       	ldi	r30, 0x38	; 56
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	b9 01       	movw	r22, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_enuSetPINVAL+0x10e>
    1110:	66 0f       	add	r22, r22
    1112:	77 1f       	adc	r23, r23
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_enuSetPINVAL+0x10a>
    1118:	cb 01       	movw	r24, r22
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	51 c0       	rjmp	.+162    	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTC:
								PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1120:	a5 e3       	ldi	r26, 0x35	; 53
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e3       	ldi	r30, 0x35	; 53
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_enuSetPINVAL+0x136>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	2a 95       	dec	r18
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_enuSetPINVAL+0x132>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
								PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1146:	a5 e3       	ldi	r26, 0x35	; 53
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	b9 01       	movw	r22, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_enuSetPINVAL+0x160>
    1162:	66 0f       	add	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_enuSetPINVAL+0x15c>
    116a:	cb 01       	movw	r24, r22
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	28 c0       	rjmp	.+80     	; 0x11c2 <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTD:
								PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
    1172:	a2 e3       	ldi	r26, 0x32	; 50
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e2 e3       	ldi	r30, 0x32	; 50
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_enuSetPINVAL+0x188>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	2a 95       	dec	r18
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_enuSetPINVAL+0x184>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
								PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
    1198:	a2 e3       	ldi	r26, 0x32	; 50
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e2 e3       	ldi	r30, 0x32	; 50
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	b9 01       	movw	r22, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_enuSetPINVAL+0x1b2>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_enuSetPINVAL+0x1ae>
    11bc:	cb 01       	movw	r24, r22
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_enuSetPINVAL+0x1c4>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorStates;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	26 96       	adiw	r28, 0x06	; 6
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_enuToggelPIN+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_enuToggelPIN+0x8>
    11e6:	0f 92       	push	r0
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <DIO_enuToggelPIN+0x1e>
    11fa:	74 c0       	rjmp	.+232    	; 0x12e4 <DIO_enuToggelPIN+0x106>
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	08 f0       	brcs	.+2      	; 0x1204 <DIO_enuToggelPIN+0x26>
    1202:	70 c0       	rjmp	.+224    	; 0x12e4 <DIO_enuToggelPIN+0x106>
			{

					switch(Copy_u8PortID)
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3d 83       	std	Y+5, r19	; 0x05
    120c:	2c 83       	std	Y+4, r18	; 0x04
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	49 f1       	breq	.+82     	; 0x126a <DIO_enuToggelPIN+0x8c>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	2c f4       	brge	.+10     	; 0x122c <DIO_enuToggelPIN+0x4e>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	61 f0       	breq	.+24     	; 0x1242 <DIO_enuToggelPIN+0x64>
    122a:	5a c0       	rjmp	.+180    	; 0x12e0 <DIO_enuToggelPIN+0x102>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	71 f1       	breq	.+92     	; 0x1292 <DIO_enuToggelPIN+0xb4>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	91 05       	cpc	r25, r1
    123e:	e9 f1       	breq	.+122    	; 0x12ba <DIO_enuToggelPIN+0xdc>
    1240:	4f c0       	rjmp	.+158    	; 0x12e0 <DIO_enuToggelPIN+0x102>
					{
						case DIO_PORTA:
									PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
    1242:	ab e3       	ldi	r26, 0x3B	; 59
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e3       	ldi	r30, 0x3B	; 59
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_enuToggelPIN+0x82>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_enuToggelPIN+0x7e>
    1264:	84 27       	eor	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	3b c0       	rjmp	.+118    	; 0x12e0 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTB:
									PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
    126a:	a8 e3       	ldi	r26, 0x38	; 56
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e8 e3       	ldi	r30, 0x38	; 56
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_enuToggelPIN+0xaa>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_enuToggelPIN+0xa6>
    128c:	84 27       	eor	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	27 c0       	rjmp	.+78     	; 0x12e0 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTC:
									PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
    1292:	a5 e3       	ldi	r26, 0x35	; 53
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_enuToggelPIN+0xd2>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_enuToggelPIN+0xce>
    12b4:	84 27       	eor	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	13 c0       	rjmp	.+38     	; 0x12e0 <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTD:
									PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
    12ba:	a2 e3       	ldi	r26, 0x32	; 50
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enuToggelPIN+0xfa>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_enuToggelPIN+0xf6>
    12dc:	84 27       	eor	r24, r20
    12de:	8c 93       	st	X, r24
									break;
					}
					Local_enuErrorStates = ES_OK;
    12e0:	19 82       	std	Y+1, r1	; 0x01
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_enuToggelPIN+0x10a>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorStates;
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	27 97       	sbiw	r28, 0x07	; 7
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	6b 83       	std	Y+3, r22	; 0x03
    1312:	5d 83       	std	Y+5, r21	; 0x05
    1314:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	09 f4       	brne	.+2      	; 0x1324 <DIO_enuGetPINVAL+0x2a>
    1322:	7d c0       	rjmp	.+250    	; 0x141e <DIO_enuGetPINVAL+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	08 f0       	brcs	.+2      	; 0x132c <DIO_enuGetPINVAL+0x32>
    132a:	76 c0       	rjmp	.+236    	; 0x1418 <DIO_enuGetPINVAL+0x11e>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 30       	cpi	r24, 0x08	; 8
    1330:	08 f0       	brcs	.+2      	; 0x1334 <DIO_enuGetPINVAL+0x3a>
    1332:	72 c0       	rjmp	.+228    	; 0x1418 <DIO_enuGetPINVAL+0x11e>
		{

				switch(Copy_u8PortID)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3f 83       	std	Y+7, r19	; 0x07
    133c:	2e 83       	std	Y+6, r18	; 0x06
    133e:	4e 81       	ldd	r20, Y+6	; 0x06
    1340:	5f 81       	ldd	r21, Y+7	; 0x07
    1342:	41 30       	cpi	r20, 0x01	; 1
    1344:	51 05       	cpc	r21, r1
    1346:	59 f1       	breq	.+86     	; 0x139e <DIO_enuGetPINVAL+0xa4>
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	91 05       	cpc	r25, r1
    1350:	34 f4       	brge	.+12     	; 0x135e <DIO_enuGetPINVAL+0x64>
    1352:	2e 81       	ldd	r18, Y+6	; 0x06
    1354:	3f 81       	ldd	r19, Y+7	; 0x07
    1356:	21 15       	cp	r18, r1
    1358:	31 05       	cpc	r19, r1
    135a:	69 f0       	breq	.+26     	; 0x1376 <DIO_enuGetPINVAL+0x7c>
    135c:	5b c0       	rjmp	.+182    	; 0x1414 <DIO_enuGetPINVAL+0x11a>
    135e:	4e 81       	ldd	r20, Y+6	; 0x06
    1360:	5f 81       	ldd	r21, Y+7	; 0x07
    1362:	42 30       	cpi	r20, 0x02	; 2
    1364:	51 05       	cpc	r21, r1
    1366:	79 f1       	breq	.+94     	; 0x13c6 <DIO_enuGetPINVAL+0xcc>
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <DIO_enuGetPINVAL+0x7a>
    1372:	3d c0       	rjmp	.+122    	; 0x13ee <DIO_enuGetPINVAL+0xf4>
    1374:	4f c0       	rjmp	.+158    	; 0x1414 <DIO_enuGetPINVAL+0x11a>
				{
					case DIO_PORTA:
						*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
    1376:	e9 e3       	ldi	r30, 0x39	; 57
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_enuGetPINVAL+0x94>
    138a:	55 95       	asr	r21
    138c:	47 95       	ror	r20
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_enuGetPINVAL+0x90>
    1392:	ca 01       	movw	r24, r20
    1394:	81 70       	andi	r24, 0x01	; 1
    1396:	ec 81       	ldd	r30, Y+4	; 0x04
    1398:	fd 81       	ldd	r31, Y+5	; 0x05
    139a:	80 83       	st	Z, r24
    139c:	3b c0       	rjmp	.+118    	; 0x1414 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTB:
						*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
    139e:	e6 e3       	ldi	r30, 0x36	; 54
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a9 01       	movw	r20, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_enuGetPINVAL+0xbc>
    13b2:	55 95       	asr	r21
    13b4:	47 95       	ror	r20
    13b6:	8a 95       	dec	r24
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_enuGetPINVAL+0xb8>
    13ba:	ca 01       	movw	r24, r20
    13bc:	81 70       	andi	r24, 0x01	; 1
    13be:	ec 81       	ldd	r30, Y+4	; 0x04
    13c0:	fd 81       	ldd	r31, Y+5	; 0x05
    13c2:	80 83       	st	Z, r24
    13c4:	27 c0       	rjmp	.+78     	; 0x1414 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTC:
						*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
    13c6:	e3 e3       	ldi	r30, 0x33	; 51
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a9 01       	movw	r20, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_enuGetPINVAL+0xe4>
    13da:	55 95       	asr	r21
    13dc:	47 95       	ror	r20
    13de:	8a 95       	dec	r24
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_enuGetPINVAL+0xe0>
    13e2:	ca 01       	movw	r24, r20
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	ec 81       	ldd	r30, Y+4	; 0x04
    13e8:	fd 81       	ldd	r31, Y+5	; 0x05
    13ea:	80 83       	st	Z, r24
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <DIO_enuGetPINVAL+0x11a>
								break;
					case DIO_PORTD:
						*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
    13ee:	e0 e3       	ldi	r30, 0x30	; 48
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a9 01       	movw	r20, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_enuGetPINVAL+0x10c>
    1402:	55 95       	asr	r21
    1404:	47 95       	ror	r20
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_enuGetPINVAL+0x108>
    140a:	ca 01       	movw	r24, r20
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	ec 81       	ldd	r30, Y+4	; 0x04
    1410:	fd 81       	ldd	r31, Y+5	; 0x05
    1412:	80 83       	st	Z, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
    1414:	19 82       	std	Y+1, r1	; 0x01
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <DIO_enuGetPINVAL+0x128>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_enuGetPINVAL+0x128>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    1422:	89 81       	ldd	r24, Y+1	; 0x01
}
    1424:	27 96       	adiw	r28, 0x07	; 7
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <LCD_enuINIT>:
#include"../MCAL/DIO_int.h"

#include<util/delay.h>

ES_t LCD_enuINIT(void)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	e8 97       	sbiw	r28, 0x38	; 56
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 e2       	ldi	r26, 0x20	; 32
    1450:	b2 e4       	ldi	r27, 0x42	; 66
    1452:	8d ab       	std	Y+53, r24	; 0x35
    1454:	9e ab       	std	Y+54, r25	; 0x36
    1456:	af ab       	std	Y+55, r26	; 0x37
    1458:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145a:	6d a9       	ldd	r22, Y+53	; 0x35
    145c:	7e a9       	ldd	r23, Y+54	; 0x36
    145e:	8f a9       	ldd	r24, Y+55	; 0x37
    1460:	98 ad       	ldd	r25, Y+56	; 0x38
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	4a e7       	ldi	r20, 0x7A	; 122
    1468:	53 e4       	ldi	r21, 0x43	; 67
    146a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	89 ab       	std	Y+49, r24	; 0x31
    1474:	9a ab       	std	Y+50, r25	; 0x32
    1476:	ab ab       	std	Y+51, r26	; 0x33
    1478:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    147a:	69 a9       	ldd	r22, Y+49	; 0x31
    147c:	7a a9       	ldd	r23, Y+50	; 0x32
    147e:	8b a9       	ldd	r24, Y+51	; 0x33
    1480:	9c a9       	ldd	r25, Y+52	; 0x34
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    148e:	88 23       	and	r24, r24
    1490:	2c f4       	brge	.+10     	; 0x149c <LCD_enuINIT+0x66>
		__ticks = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	98 ab       	std	Y+48, r25	; 0x30
    1498:	8f a7       	std	Y+47, r24	; 0x2f
    149a:	3f c0       	rjmp	.+126    	; 0x151a <LCD_enuINIT+0xe4>
	else if (__tmp > 65535)
    149c:	69 a9       	ldd	r22, Y+49	; 0x31
    149e:	7a a9       	ldd	r23, Y+50	; 0x32
    14a0:	8b a9       	ldd	r24, Y+51	; 0x33
    14a2:	9c a9       	ldd	r25, Y+52	; 0x34
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	4c f5       	brge	.+82     	; 0x1506 <LCD_enuINIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b4:	6d a9       	ldd	r22, Y+53	; 0x35
    14b6:	7e a9       	ldd	r23, Y+54	; 0x36
    14b8:	8f a9       	ldd	r24, Y+55	; 0x37
    14ba:	98 ad       	ldd	r25, Y+56	; 0x38
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	98 ab       	std	Y+48, r25	; 0x30
    14da:	8f a7       	std	Y+47, r24	; 0x2f
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <LCD_enuINIT+0xc6>
    14de:	89 e1       	ldi	r24, 0x19	; 25
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9e a7       	std	Y+46, r25	; 0x2e
    14e4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    14e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <LCD_enuINIT+0xb4>
    14ee:	9e a7       	std	Y+46, r25	; 0x2e
    14f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f4:	98 a9       	ldd	r25, Y+48	; 0x30
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	98 ab       	std	Y+48, r25	; 0x30
    14fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    14fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	69 f7       	brne	.-38     	; 0x14de <LCD_enuINIT+0xa8>
    1504:	14 c0       	rjmp	.+40     	; 0x152e <LCD_enuINIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1506:	69 a9       	ldd	r22, Y+49	; 0x31
    1508:	7a a9       	ldd	r23, Y+50	; 0x32
    150a:	8b a9       	ldd	r24, Y+51	; 0x33
    150c:	9c a9       	ldd	r25, Y+52	; 0x34
    150e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	98 ab       	std	Y+48, r25	; 0x30
    1518:	8f a7       	std	Y+47, r24	; 0x2f
    151a:	8f a5       	ldd	r24, Y+47	; 0x2f
    151c:	98 a9       	ldd	r25, Y+48	; 0x30
    151e:	9c a7       	std	Y+44, r25	; 0x2c
    1520:	8b a7       	std	Y+43, r24	; 0x2b
    1522:	8b a5       	ldd	r24, Y+43	; 0x2b
    1524:	9c a5       	ldd	r25, Y+44	; 0x2c
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <LCD_enuINIT+0xf0>
    152a:	9c a7       	std	Y+44, r25	; 0x2c
    152c:	8b a7       	std	Y+43, r24	; 0x2b
	//ES_t Local_enuErrorState = ES_NOK;
	_delay_ms(40);
	DIO_enuSetPINDir(EN_Port,EN_Pin,DIO_OUTPUT);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	62 e0       	ldi	r22, 0x02	; 2
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(RS_Port,RS_Pin,DIO_OUTPUT);
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(RW_Port,RW_Pin,DIO_OUTPUT);
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	41 e0       	ldi	r20, 0x01	; 1
    1548:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB4_Port,DB4_Pin,DIO_OUTPUT);
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	64 e0       	ldi	r22, 0x04	; 4
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB5_Port,DB5_Pin,DIO_OUTPUT);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	65 e0       	ldi	r22, 0x05	; 5
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB6_Port,DB6_Pin,DIO_OUTPUT);
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	66 e0       	ldi	r22, 0x06	; 6
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB7_Port,DB7_Pin,DIO_OUTPUT);
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	67 e0       	ldi	r22, 0x07	; 7
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>

#if LCDMODE == EIGHTMODE
	DIO_enuSetPINDir(DB0_Port,DB0_Pin,DIO_OUTPUT);
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB1_Port,DB1_Pin,DIO_OUTPUT);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB2_Port,DB2_Pin,DIO_OUTPUT);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
	DIO_enuSetPINDir(DB3_Port,DB3_Pin,DIO_OUTPUT);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	63 e0       	ldi	r22, 0x03	; 3
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPINDir>
#endif
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	LCD_VidDOPRVTask(SETFUN);
    15a6:	88 e3       	ldi	r24, 0x38	; 56
    15a8:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidDOPRVTask>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 e8       	ldi	r26, 0x80	; 128
    15b2:	bf e3       	ldi	r27, 0x3F	; 63
    15b4:	8f a3       	std	Y+39, r24	; 0x27
    15b6:	98 a7       	std	Y+40, r25	; 0x28
    15b8:	a9 a7       	std	Y+41, r26	; 0x29
    15ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15bc:	6f a1       	ldd	r22, Y+39	; 0x27
    15be:	78 a5       	ldd	r23, Y+40	; 0x28
    15c0:	89 a5       	ldd	r24, Y+41	; 0x29
    15c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a e7       	ldi	r20, 0x7A	; 122
    15ca:	53 e4       	ldi	r21, 0x43	; 67
    15cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8b a3       	std	Y+35, r24	; 0x23
    15d6:	9c a3       	std	Y+36, r25	; 0x24
    15d8:	ad a3       	std	Y+37, r26	; 0x25
    15da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15dc:	6b a1       	ldd	r22, Y+35	; 0x23
    15de:	7c a1       	ldd	r23, Y+36	; 0x24
    15e0:	8d a1       	ldd	r24, Y+37	; 0x25
    15e2:	9e a1       	ldd	r25, Y+38	; 0x26
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	2c f4       	brge	.+10     	; 0x15fe <LCD_enuINIT+0x1c8>
		__ticks = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9a a3       	std	Y+34, r25	; 0x22
    15fa:	89 a3       	std	Y+33, r24	; 0x21
    15fc:	3f c0       	rjmp	.+126    	; 0x167c <LCD_enuINIT+0x246>
	else if (__tmp > 65535)
    15fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1600:	7c a1       	ldd	r23, Y+36	; 0x24
    1602:	8d a1       	ldd	r24, Y+37	; 0x25
    1604:	9e a1       	ldd	r25, Y+38	; 0x26
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	4c f5       	brge	.+82     	; 0x1668 <LCD_enuINIT+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1616:	6f a1       	ldd	r22, Y+39	; 0x27
    1618:	78 a5       	ldd	r23, Y+40	; 0x28
    161a:	89 a5       	ldd	r24, Y+41	; 0x29
    161c:	9a a5       	ldd	r25, Y+42	; 0x2a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	51 e4       	ldi	r21, 0x41	; 65
    1626:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9a a3       	std	Y+34, r25	; 0x22
    163c:	89 a3       	std	Y+33, r24	; 0x21
    163e:	0f c0       	rjmp	.+30     	; 0x165e <LCD_enuINIT+0x228>
    1640:	89 e1       	ldi	r24, 0x19	; 25
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	98 a3       	std	Y+32, r25	; 0x20
    1646:	8f 8f       	std	Y+31, r24	; 0x1f
    1648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164a:	98 a1       	ldd	r25, Y+32	; 0x20
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <LCD_enuINIT+0x216>
    1650:	98 a3       	std	Y+32, r25	; 0x20
    1652:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	89 a1       	ldd	r24, Y+33	; 0x21
    1656:	9a a1       	ldd	r25, Y+34	; 0x22
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9a a3       	std	Y+34, r25	; 0x22
    165c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165e:	89 a1       	ldd	r24, Y+33	; 0x21
    1660:	9a a1       	ldd	r25, Y+34	; 0x22
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f7       	brne	.-38     	; 0x1640 <LCD_enuINIT+0x20a>
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <LCD_enuINIT+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1668:	6b a1       	ldd	r22, Y+35	; 0x23
    166a:	7c a1       	ldd	r23, Y+36	; 0x24
    166c:	8d a1       	ldd	r24, Y+37	; 0x25
    166e:	9e a1       	ldd	r25, Y+38	; 0x26
    1670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9a a3       	std	Y+34, r25	; 0x22
    167a:	89 a3       	std	Y+33, r24	; 0x21
    167c:	89 a1       	ldd	r24, Y+33	; 0x21
    167e:	9a a1       	ldd	r25, Y+34	; 0x22
    1680:	9e 8f       	std	Y+30, r25	; 0x1e
    1682:	8d 8f       	std	Y+29, r24	; 0x1d
    1684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <LCD_enuINIT+0x252>
    168c:	9e 8f       	std	Y+30, r25	; 0x1e
    168e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidDOPRVTask(DISPON_OFF);
    1690:	8f e0       	ldi	r24, 0x0F	; 15
    1692:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidDOPRVTask>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e8       	ldi	r26, 0x80	; 128
    169c:	bf e3       	ldi	r27, 0x3F	; 63
    169e:	89 8f       	std	Y+25, r24	; 0x19
    16a0:	9a 8f       	std	Y+26, r25	; 0x1a
    16a2:	ab 8f       	std	Y+27, r26	; 0x1b
    16a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	69 8d       	ldd	r22, Y+25	; 0x19
    16a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a e7       	ldi	r20, 0x7A	; 122
    16b4:	53 e4       	ldi	r21, 0x43	; 67
    16b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	8d 8b       	std	Y+21, r24	; 0x15
    16c0:	9e 8b       	std	Y+22, r25	; 0x16
    16c2:	af 8b       	std	Y+23, r26	; 0x17
    16c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16c6:	6d 89       	ldd	r22, Y+21	; 0x15
    16c8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ca:	8f 89       	ldd	r24, Y+23	; 0x17
    16cc:	98 8d       	ldd	r25, Y+24	; 0x18
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e8       	ldi	r20, 0x80	; 128
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16da:	88 23       	and	r24, r24
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <LCD_enuINIT+0x2b2>
		__ticks = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9c 8b       	std	Y+20, r25	; 0x14
    16e4:	8b 8b       	std	Y+19, r24	; 0x13
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <LCD_enuINIT+0x330>
	else if (__tmp > 65535)
    16e8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ea:	7e 89       	ldd	r23, Y+22	; 0x16
    16ec:	8f 89       	ldd	r24, Y+23	; 0x17
    16ee:	98 8d       	ldd	r25, Y+24	; 0x18
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	3f ef       	ldi	r19, 0xFF	; 255
    16f4:	4f e7       	ldi	r20, 0x7F	; 127
    16f6:	57 e4       	ldi	r21, 0x47	; 71
    16f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16fc:	18 16       	cp	r1, r24
    16fe:	4c f5       	brge	.+82     	; 0x1752 <LCD_enuINIT+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1700:	69 8d       	ldd	r22, Y+25	; 0x19
    1702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9c 8b       	std	Y+20, r25	; 0x14
    1726:	8b 8b       	std	Y+19, r24	; 0x13
    1728:	0f c0       	rjmp	.+30     	; 0x1748 <LCD_enuINIT+0x312>
    172a:	89 e1       	ldi	r24, 0x19	; 25
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9a 8b       	std	Y+18, r25	; 0x12
    1730:	89 8b       	std	Y+17, r24	; 0x11
    1732:	89 89       	ldd	r24, Y+17	; 0x11
    1734:	9a 89       	ldd	r25, Y+18	; 0x12
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_enuINIT+0x300>
    173a:	9a 8b       	std	Y+18, r25	; 0x12
    173c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173e:	8b 89       	ldd	r24, Y+19	; 0x13
    1740:	9c 89       	ldd	r25, Y+20	; 0x14
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	69 f7       	brne	.-38     	; 0x172a <LCD_enuINIT+0x2f4>
    1750:	14 c0       	rjmp	.+40     	; 0x177a <LCD_enuINIT+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1752:	6d 89       	ldd	r22, Y+21	; 0x15
    1754:	7e 89       	ldd	r23, Y+22	; 0x16
    1756:	8f 89       	ldd	r24, Y+23	; 0x17
    1758:	98 8d       	ldd	r25, Y+24	; 0x18
    175a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9c 8b       	std	Y+20, r25	; 0x14
    1764:	8b 8b       	std	Y+19, r24	; 0x13
    1766:	8b 89       	ldd	r24, Y+19	; 0x13
    1768:	9c 89       	ldd	r25, Y+20	; 0x14
    176a:	98 8b       	std	Y+16, r25	; 0x10
    176c:	8f 87       	std	Y+15, r24	; 0x0f
    176e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1770:	98 89       	ldd	r25, Y+16	; 0x10
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_enuINIT+0x33c>
    1776:	98 8b       	std	Y+16, r25	; 0x10
    1778:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCD_VidDOPRVTask(DISP_CLEAR);
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidDOPRVTask>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a0 ec       	ldi	r26, 0xC0	; 192
    1786:	bf e3       	ldi	r27, 0x3F	; 63
    1788:	8b 87       	std	Y+11, r24	; 0x0b
    178a:	9c 87       	std	Y+12, r25	; 0x0c
    178c:	ad 87       	std	Y+13, r26	; 0x0d
    178e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6b 85       	ldd	r22, Y+11	; 0x0b
    1792:	7c 85       	ldd	r23, Y+12	; 0x0c
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a e7       	ldi	r20, 0x7A	; 122
    179e:	53 e4       	ldi	r21, 0x43	; 67
    17a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8f 83       	std	Y+7, r24	; 0x07
    17aa:	98 87       	std	Y+8, r25	; 0x08
    17ac:	a9 87       	std	Y+9, r26	; 0x09
    17ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <LCD_enuINIT+0x39c>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <LCD_enuINIT+0x41a>
	else if (__tmp > 65535)
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	4c f5       	brge	.+82     	; 0x183c <LCD_enuINIT+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <LCD_enuINIT+0x3fc>
    1814:	89 e1       	ldi	r24, 0x19	; 25
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <LCD_enuINIT+0x3ea>
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f7       	brne	.-38     	; 0x1814 <LCD_enuINIT+0x3de>
    183a:	14 c0       	rjmp	.+40     	; 0x1864 <LCD_enuINIT+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD_enuINIT+0x426>
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.5);
	LCD_VidDOPRVTask(ENTRYSET);
    1864:	86 e0       	ldi	r24, 0x06	; 6
    1866:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidDOPRVTask>

	return 0;//Local_enuErrorState;
    186a:	80 e0       	ldi	r24, 0x00	; 0
}
    186c:	e8 96       	adiw	r28, 0x38	; 56
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <LCD_VidDOPRVTask>:

static inline void LCD_VidDOPRVTask(u8 Copy_u8Commnd)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	2f 97       	sbiw	r28, 0x0f	; 15
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	8f 87       	std	Y+15, r24	; 0x0f

		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	62 e0       	ldi	r22, 0x02	; 2
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Copy_u8Commnd>>4)&1);
    18a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18aa:	82 95       	swap	r24
    18ac:	8f 70       	andi	r24, 0x0F	; 15
    18ae:	98 2f       	mov	r25, r24
    18b0:	91 70       	andi	r25, 0x01	; 1
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	64 e0       	ldi	r22, 0x04	; 4
    18b6:	49 2f       	mov	r20, r25
    18b8:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Copy_u8Commnd>>5)&1);
    18bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18be:	82 95       	swap	r24
    18c0:	86 95       	lsr	r24
    18c2:	87 70       	andi	r24, 0x07	; 7
    18c4:	98 2f       	mov	r25, r24
    18c6:	91 70       	andi	r25, 0x01	; 1
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	65 e0       	ldi	r22, 0x05	; 5
    18cc:	49 2f       	mov	r20, r25
    18ce:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Copy_u8Commnd>>6)&1);
    18d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d4:	82 95       	swap	r24
    18d6:	86 95       	lsr	r24
    18d8:	86 95       	lsr	r24
    18da:	83 70       	andi	r24, 0x03	; 3
    18dc:	98 2f       	mov	r25, r24
    18de:	91 70       	andi	r25, 0x01	; 1
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	66 e0       	ldi	r22, 0x06	; 6
    18e4:	49 2f       	mov	r20, r25
    18e6:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Copy_u8Commnd>>7)&1);
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	98 2f       	mov	r25, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	99 27       	eor	r25, r25
    18f2:	99 1f       	adc	r25, r25
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	67 e0       	ldi	r22, 0x07	; 7
    18f8:	49 2f       	mov	r20, r25
    18fa:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Copy_u8Commnd>>0)&1);
    18fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1900:	98 2f       	mov	r25, r24
    1902:	91 70       	andi	r25, 0x01	; 1
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	49 2f       	mov	r20, r25
    190a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Copy_u8Commnd>>1)&1);
    190e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1910:	86 95       	lsr	r24
    1912:	98 2f       	mov	r25, r24
    1914:	91 70       	andi	r25, 0x01	; 1
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	49 2f       	mov	r20, r25
    191c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Copy_u8Commnd>>2)&1);
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	86 95       	lsr	r24
    1924:	86 95       	lsr	r24
    1926:	98 2f       	mov	r25, r24
    1928:	91 70       	andi	r25, 0x01	; 1
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	62 e0       	ldi	r22, 0x02	; 2
    192e:	49 2f       	mov	r20, r25
    1930:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Copy_u8Commnd>>3)&1);
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	86 95       	lsr	r24
    1938:	86 95       	lsr	r24
    193a:	86 95       	lsr	r24
    193c:	98 2f       	mov	r25, r24
    193e:	91 70       	andi	r25, 0x01	; 1
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	63 e0       	ldi	r22, 0x03	; 3
    1944:	49 2f       	mov	r20, r25
    1946:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	62 e0       	ldi	r22, 0x02	; 2
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e2       	ldi	r26, 0x20	; 32
    195a:	b1 e4       	ldi	r27, 0x41	; 65
    195c:	8b 87       	std	Y+11, r24	; 0x0b
    195e:	9c 87       	std	Y+12, r25	; 0x0c
    1960:	ad 87       	std	Y+13, r26	; 0x0d
    1962:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1964:	6b 85       	ldd	r22, Y+11	; 0x0b
    1966:	7c 85       	ldd	r23, Y+12	; 0x0c
    1968:	8d 85       	ldd	r24, Y+13	; 0x0d
    196a:	9e 85       	ldd	r25, Y+14	; 0x0e
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a e7       	ldi	r20, 0x7A	; 122
    1972:	53 e4       	ldi	r21, 0x43	; 67
    1974:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8f 83       	std	Y+7, r24	; 0x07
    197e:	98 87       	std	Y+8, r25	; 0x08
    1980:	a9 87       	std	Y+9, r26	; 0x09
    1982:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1984:	6f 81       	ldd	r22, Y+7	; 0x07
    1986:	78 85       	ldd	r23, Y+8	; 0x08
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	9a 85       	ldd	r25, Y+10	; 0x0a
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1998:	88 23       	and	r24, r24
    199a:	2c f4       	brge	.+10     	; 0x19a6 <LCD_VidDOPRVTask+0x128>
		__ticks = 1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	3f c0       	rjmp	.+126    	; 0x1a24 <LCD_VidDOPRVTask+0x1a6>
	else if (__tmp > 65535)
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	3f ef       	ldi	r19, 0xFF	; 255
    19b2:	4f e7       	ldi	r20, 0x7F	; 127
    19b4:	57 e4       	ldi	r21, 0x47	; 71
    19b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ba:	18 16       	cp	r1, r24
    19bc:	4c f5       	brge	.+82     	; 0x1a10 <LCD_VidDOPRVTask+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19be:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e2       	ldi	r20, 0x20	; 32
    19cc:	51 e4       	ldi	r21, 0x41	; 65
    19ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	0f c0       	rjmp	.+30     	; 0x1a06 <LCD_VidDOPRVTask+0x188>
    19e8:	89 e1       	ldi	r24, 0x19	; 25
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9c 83       	std	Y+4, r25	; 0x04
    19ee:	8b 83       	std	Y+3, r24	; 0x03
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <LCD_VidDOPRVTask+0x176>
    19f8:	9c 83       	std	Y+4, r25	; 0x04
    19fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	69 f7       	brne	.-38     	; 0x19e8 <LCD_VidDOPRVTask+0x16a>
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <LCD_VidDOPRVTask+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a10:	6f 81       	ldd	r22, Y+7	; 0x07
    1a12:	78 85       	ldd	r23, Y+8	; 0x08
    1a14:	89 85       	ldd	r24, Y+9	; 0x09
    1a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCD_VidDOPRVTask+0x1b2>
    1a34:	9a 83       	std	Y+2, r25	; 0x02
    1a36:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	62 e0       	ldi	r22, 0x02	; 2
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>


}
    1a42:	2f 96       	adiw	r28, 0x0f	; 15
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <LCD_enuSndComnd>:


ES_t LCD_enuSndComnd(u8 Copy_u8Commnd)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	60 97       	sbiw	r28, 0x10	; 16
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	62 e0       	ldi	r22, 0x02	; 2
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Copy_u8Commnd>>4)&1);
    1a8c:	88 89       	ldd	r24, Y+16	; 0x10
    1a8e:	82 95       	swap	r24
    1a90:	8f 70       	andi	r24, 0x0F	; 15
    1a92:	98 2f       	mov	r25, r24
    1a94:	91 70       	andi	r25, 0x01	; 1
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	49 2f       	mov	r20, r25
    1a9c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Copy_u8Commnd>>5)&1);
    1aa0:	88 89       	ldd	r24, Y+16	; 0x10
    1aa2:	82 95       	swap	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	87 70       	andi	r24, 0x07	; 7
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	91 70       	andi	r25, 0x01	; 1
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	65 e0       	ldi	r22, 0x05	; 5
    1ab0:	49 2f       	mov	r20, r25
    1ab2:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Copy_u8Commnd>>6)&1);
    1ab6:	88 89       	ldd	r24, Y+16	; 0x10
    1ab8:	82 95       	swap	r24
    1aba:	86 95       	lsr	r24
    1abc:	86 95       	lsr	r24
    1abe:	83 70       	andi	r24, 0x03	; 3
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	91 70       	andi	r25, 0x01	; 1
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	66 e0       	ldi	r22, 0x06	; 6
    1ac8:	49 2f       	mov	r20, r25
    1aca:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Copy_u8Commnd>>7)&1);
    1ace:	88 89       	ldd	r24, Y+16	; 0x10
    1ad0:	98 2f       	mov	r25, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	99 27       	eor	r25, r25
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	67 e0       	ldi	r22, 0x07	; 7
    1adc:	49 2f       	mov	r20, r25
    1ade:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Copy_u8Commnd>>0)&1);
    1ae2:	88 89       	ldd	r24, Y+16	; 0x10
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	91 70       	andi	r25, 0x01	; 1
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	49 2f       	mov	r20, r25
    1aee:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Copy_u8Commnd>>1)&1);
    1af2:	88 89       	ldd	r24, Y+16	; 0x10
    1af4:	86 95       	lsr	r24
    1af6:	98 2f       	mov	r25, r24
    1af8:	91 70       	andi	r25, 0x01	; 1
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	49 2f       	mov	r20, r25
    1b00:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Copy_u8Commnd>>2)&1);
    1b04:	88 89       	ldd	r24, Y+16	; 0x10
    1b06:	86 95       	lsr	r24
    1b08:	86 95       	lsr	r24
    1b0a:	98 2f       	mov	r25, r24
    1b0c:	91 70       	andi	r25, 0x01	; 1
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	62 e0       	ldi	r22, 0x02	; 2
    1b12:	49 2f       	mov	r20, r25
    1b14:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Copy_u8Commnd>>3)&1);
    1b18:	88 89       	ldd	r24, Y+16	; 0x10
    1b1a:	86 95       	lsr	r24
    1b1c:	86 95       	lsr	r24
    1b1e:	86 95       	lsr	r24
    1b20:	98 2f       	mov	r25, r24
    1b22:	91 70       	andi	r25, 0x01	; 1
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	49 2f       	mov	r20, r25
    1b2a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a0 e2       	ldi	r26, 0x20	; 32
    1b3e:	b1 e4       	ldi	r27, 0x41	; 65
    1b40:	8b 87       	std	Y+11, r24	; 0x0b
    1b42:	9c 87       	std	Y+12, r25	; 0x0c
    1b44:	ad 87       	std	Y+13, r26	; 0x0d
    1b46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a e7       	ldi	r20, 0x7A	; 122
    1b56:	53 e4       	ldi	r21, 0x43	; 67
    1b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	8f 83       	std	Y+7, r24	; 0x07
    1b62:	98 87       	std	Y+8, r25	; 0x08
    1b64:	a9 87       	std	Y+9, r26	; 0x09
    1b66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b68:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6a:	78 85       	ldd	r23, Y+8	; 0x08
    1b6c:	89 85       	ldd	r24, Y+9	; 0x09
    1b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <LCD_enuSndComnd+0x136>
		__ticks = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	3f c0       	rjmp	.+126    	; 0x1c08 <LCD_enuSndComnd+0x1b4>
	else if (__tmp > 65535)
    1b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8c:	78 85       	ldd	r23, Y+8	; 0x08
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	4c f5       	brge	.+82     	; 0x1bf4 <LCD_enuSndComnd+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <LCD_enuSndComnd+0x196>
    1bcc:	89 e1       	ldi	r24, 0x19	; 25
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_enuSndComnd+0x184>
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	69 f7       	brne	.-38     	; 0x1bcc <LCD_enuSndComnd+0x178>
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <LCD_enuSndComnd+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	78 85       	ldd	r23, Y+8	; 0x08
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_enuSndComnd+0x1c0>
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    1c26:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1c28:	60 96       	adiw	r28, 0x10	; 16
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <LCD_enuWriteFrmRI8toLFT>:

ES_t LCD_enuWriteFrmRI8toLFT(void)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	2f 97       	sbiw	r28, 0x0f	; 15
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	62 e0       	ldi	r22, 0x02	; 2
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,DIO_LOW);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,DIO_LOW);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,DIO_HIGH);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,DIO_LOW);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	63 e0       	ldi	r22, 0x03	; 3
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,DIO_LOW);
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	64 e0       	ldi	r22, 0x04	; 4
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,DIO_LOW);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	65 e0       	ldi	r22, 0x05	; 5
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,DIO_LOW);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	66 e0       	ldi	r22, 0x06	; 6
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,DIO_LOW);
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	67 e0       	ldi	r22, 0x07	; 7
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	62 e0       	ldi	r22, 0x02	; 2
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e2       	ldi	r26, 0x20	; 32
    1cd0:	b1 e4       	ldi	r27, 0x41	; 65
    1cd2:	8b 87       	std	Y+11, r24	; 0x0b
    1cd4:	9c 87       	std	Y+12, r25	; 0x0c
    1cd6:	ad 87       	std	Y+13, r26	; 0x0d
    1cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a e7       	ldi	r20, 0x7A	; 122
    1ce8:	53 e4       	ldi	r21, 0x43	; 67
    1cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8f 83       	std	Y+7, r24	; 0x07
    1cf4:	98 87       	std	Y+8, r25	; 0x08
    1cf6:	a9 87       	std	Y+9, r26	; 0x09
    1cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <LCD_enuWriteFrmRI8toLFT+0xe2>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <LCD_enuWriteFrmRI8toLFT+0x160>
	else if (__tmp > 65535)
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <LCD_enuWriteFrmRI8toLFT+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD_enuWriteFrmRI8toLFT+0x142>
    1d5e:	89 e1       	ldi	r24, 0x19	; 25
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_enuWriteFrmRI8toLFT+0x130>
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <LCD_enuWriteFrmRI8toLFT+0x124>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <LCD_enuWriteFrmRI8toLFT+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_enuWriteFrmRI8toLFT+0x16c>
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	62 e0       	ldi	r22, 0x02	; 2
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    1db8:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1dba:	2f 96       	adiw	r28, 0x0f	; 15
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_enuWriteFrmLFTtoRI8>:
ES_t LCD_enuWriteFrmLFTtoRI8(void)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	2f 97       	sbiw	r28, 0x0f	; 15
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	62 e0       	ldi	r22, 0x02	; 2
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,DIO_LOW);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,DIO_HIGH);
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,DIO_HIGH);
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,DIO_LOW);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	63 e0       	ldi	r22, 0x03	; 3
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,DIO_LOW);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	64 e0       	ldi	r22, 0x04	; 4
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,DIO_LOW);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	65 e0       	ldi	r22, 0x05	; 5
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,DIO_LOW);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	66 e0       	ldi	r22, 0x06	; 6
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,DIO_LOW);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	67 e0       	ldi	r22, 0x07	; 7
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	62 e0       	ldi	r22, 0x02	; 2
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e2       	ldi	r26, 0x20	; 32
    1e62:	b1 e4       	ldi	r27, 0x41	; 65
    1e64:	8b 87       	std	Y+11, r24	; 0x0b
    1e66:	9c 87       	std	Y+12, r25	; 0x0c
    1e68:	ad 87       	std	Y+13, r26	; 0x0d
    1e6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a e7       	ldi	r20, 0x7A	; 122
    1e7a:	53 e4       	ldi	r21, 0x43	; 67
    1e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8f 83       	std	Y+7, r24	; 0x07
    1e86:	98 87       	std	Y+8, r25	; 0x08
    1e88:	a9 87       	std	Y+9, r26	; 0x09
    1e8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <LCD_enuWriteFrmLFTtoRI8+0xe2>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <LCD_enuWriteFrmLFTtoRI8+0x160>
	else if (__tmp > 65535)
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <LCD_enuWriteFrmLFTtoRI8+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <LCD_enuWriteFrmLFTtoRI8+0x142>
    1ef0:	89 e1       	ldi	r24, 0x19	; 25
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_enuWriteFrmLFTtoRI8+0x130>
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <LCD_enuWriteFrmLFTtoRI8+0x124>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <LCD_enuWriteFrmLFTtoRI8+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_enuWriteFrmLFTtoRI8+0x16c>
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    1f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1f4c:	2f 96       	adiw	r28, 0x0f	; 15
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_enuCreateLetter>:
ES_t LCD_enuCreateLetter(u8 Copy_u8PatternNUM,u8 *Copy_Pu8Character)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	63 97       	sbiw	r28, 0x13	; 19
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	89 8b       	std	Y+17, r24	; 0x11
    1f74:	7b 8b       	std	Y+19, r23	; 0x13
    1f76:	6a 8b       	std	Y+18, r22	; 0x12
	ES_t Local_enuErrorState = ES_NOK;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	88 8b       	std	Y+16, r24	; 0x10
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	Copy_u8PatternNUM = 0x40 + 8 * Copy_u8PatternNUM;
    1f9a:	89 89       	ldd	r24, Y+17	; 0x11
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	08 96       	adiw	r24, 0x08	; 8
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	89 8b       	std	Y+17, r24	; 0x11
	if(Copy_u8PatternNUM > 0x7f)
    1fb0:	89 89       	ldd	r24, Y+17	; 0x11
    1fb2:	88 23       	and	r24, r24
    1fb4:	14 f4       	brge	.+4      	; 0x1fba <LCD_enuCreateLetter+0x5c>
		Local_enuErrorState = ES_Out_Of_Range;
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	88 8b       	std	Y+16, r24	; 0x10
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Copy_u8PatternNUM>>0)&1);
    1fba:	89 89       	ldd	r24, Y+17	; 0x11
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	91 70       	andi	r25, 0x01	; 1
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	49 2f       	mov	r20, r25
    1fc6:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Copy_u8PatternNUM>>1)&1);
    1fca:	89 89       	ldd	r24, Y+17	; 0x11
    1fcc:	86 95       	lsr	r24
    1fce:	98 2f       	mov	r25, r24
    1fd0:	91 70       	andi	r25, 0x01	; 1
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	49 2f       	mov	r20, r25
    1fd8:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Copy_u8PatternNUM>>2)&1);
    1fdc:	89 89       	ldd	r24, Y+17	; 0x11
    1fde:	86 95       	lsr	r24
    1fe0:	86 95       	lsr	r24
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	91 70       	andi	r25, 0x01	; 1
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	49 2f       	mov	r20, r25
    1fec:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Copy_u8PatternNUM>>3)&1);
    1ff0:	89 89       	ldd	r24, Y+17	; 0x11
    1ff2:	86 95       	lsr	r24
    1ff4:	86 95       	lsr	r24
    1ff6:	86 95       	lsr	r24
    1ff8:	98 2f       	mov	r25, r24
    1ffa:	91 70       	andi	r25, 0x01	; 1
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	63 e0       	ldi	r22, 0x03	; 3
    2000:	49 2f       	mov	r20, r25
    2002:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Copy_u8PatternNUM>>4)&1);
    2006:	89 89       	ldd	r24, Y+17	; 0x11
    2008:	82 95       	swap	r24
    200a:	8f 70       	andi	r24, 0x0F	; 15
    200c:	98 2f       	mov	r25, r24
    200e:	91 70       	andi	r25, 0x01	; 1
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	64 e0       	ldi	r22, 0x04	; 4
    2014:	49 2f       	mov	r20, r25
    2016:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Copy_u8PatternNUM>>5)&1);
    201a:	89 89       	ldd	r24, Y+17	; 0x11
    201c:	82 95       	swap	r24
    201e:	86 95       	lsr	r24
    2020:	87 70       	andi	r24, 0x07	; 7
    2022:	98 2f       	mov	r25, r24
    2024:	91 70       	andi	r25, 0x01	; 1
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	65 e0       	ldi	r22, 0x05	; 5
    202a:	49 2f       	mov	r20, r25
    202c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Copy_u8PatternNUM>>6)&1);
    2030:	89 89       	ldd	r24, Y+17	; 0x11
    2032:	82 95       	swap	r24
    2034:	86 95       	lsr	r24
    2036:	86 95       	lsr	r24
    2038:	83 70       	andi	r24, 0x03	; 3
    203a:	98 2f       	mov	r25, r24
    203c:	91 70       	andi	r25, 0x01	; 1
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	66 e0       	ldi	r22, 0x06	; 6
    2042:	49 2f       	mov	r20, r25
    2044:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Copy_u8PatternNUM>>7)&1);
    2048:	89 89       	ldd	r24, Y+17	; 0x11
    204a:	98 2f       	mov	r25, r24
    204c:	99 1f       	adc	r25, r25
    204e:	99 27       	eor	r25, r25
    2050:	99 1f       	adc	r25, r25
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	67 e0       	ldi	r22, 0x07	; 7
    2056:	49 2f       	mov	r20, r25
    2058:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	62 e0       	ldi	r22, 0x02	; 2
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a0 e2       	ldi	r26, 0x20	; 32
    206c:	b1 e4       	ldi	r27, 0x41	; 65
    206e:	8b 87       	std	Y+11, r24	; 0x0b
    2070:	9c 87       	std	Y+12, r25	; 0x0c
    2072:	ad 87       	std	Y+13, r26	; 0x0d
    2074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	6b 85       	ldd	r22, Y+11	; 0x0b
    2078:	7c 85       	ldd	r23, Y+12	; 0x0c
    207a:	8d 85       	ldd	r24, Y+13	; 0x0d
    207c:	9e 85       	ldd	r25, Y+14	; 0x0e
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a e7       	ldi	r20, 0x7A	; 122
    2084:	53 e4       	ldi	r21, 0x43	; 67
    2086:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	8f 83       	std	Y+7, r24	; 0x07
    2090:	98 87       	std	Y+8, r25	; 0x08
    2092:	a9 87       	std	Y+9, r26	; 0x09
    2094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e8       	ldi	r20, 0x80	; 128
    20a4:	5f e3       	ldi	r21, 0x3F	; 63
    20a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20aa:	88 23       	and	r24, r24
    20ac:	2c f4       	brge	.+10     	; 0x20b8 <LCD_enuCreateLetter+0x15a>
		__ticks = 1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	3f c0       	rjmp	.+126    	; 0x2136 <LCD_enuCreateLetter+0x1d8>
	else if (__tmp > 65535)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	4c f5       	brge	.+82     	; 0x2122 <LCD_enuCreateLetter+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e2       	ldi	r20, 0x20	; 32
    20de:	51 e4       	ldi	r21, 0x41	; 65
    20e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	0f c0       	rjmp	.+30     	; 0x2118 <LCD_enuCreateLetter+0x1ba>
    20fa:	89 e1       	ldi	r24, 0x19	; 25
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_enuCreateLetter+0x1a8>
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	69 f7       	brne	.-38     	; 0x20fa <LCD_enuCreateLetter+0x19c>
    2120:	14 c0       	rjmp	.+40     	; 0x214a <LCD_enuCreateLetter+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2122:	6f 81       	ldd	r22, Y+7	; 0x07
    2124:	78 85       	ldd	r23, Y+8	; 0x08
    2126:	89 85       	ldd	r24, Y+9	; 0x09
    2128:	9a 85       	ldd	r25, Y+10	; 0x0a
    212a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_enuCreateLetter+0x1e4>
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	u8 Local_u8Leteral = 0;
    2154:	1f 86       	std	Y+15, r1	; 0x0f
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	for(Local_u8Leteral = 0; Local_u8Leteral < 8 ;Local_u8Leteral++)
    2160:	1f 86       	std	Y+15, r1	; 0x0f
    2162:	0e c0       	rjmp	.+28     	; 0x2180 <LCD_enuCreateLetter+0x222>
	LCD_VidDOPRVTask(Copy_Pu8Character[Local_u8Leteral]);
    2164:	8f 85       	ldd	r24, Y+15	; 0x0f
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	8a 89       	ldd	r24, Y+18	; 0x12
    216c:	9b 89       	ldd	r25, Y+19	; 0x13
    216e:	fc 01       	movw	r30, r24
    2170:	e2 0f       	add	r30, r18
    2172:	f3 1f       	adc	r31, r19
    2174:	80 81       	ld	r24, Z
    2176:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidDOPRVTask>
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
	u8 Local_u8Leteral = 0;
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
	for(Local_u8Leteral = 0; Local_u8Leteral < 8 ;Local_u8Leteral++)
    217a:	8f 85       	ldd	r24, Y+15	; 0x0f
    217c:	8f 5f       	subi	r24, 0xFF	; 255
    217e:	8f 87       	std	Y+15, r24	; 0x0f
    2180:	8f 85       	ldd	r24, Y+15	; 0x0f
    2182:	88 30       	cpi	r24, 0x08	; 8
    2184:	78 f3       	brcs	.-34     	; 0x2164 <LCD_enuCreateLetter+0x206>
	LCD_VidDOPRVTask(Copy_Pu8Character[Local_u8Leteral]);


	return Local_enuErrorState;
    2186:	88 89       	ldd	r24, Y+16	; 0x10
}
    2188:	63 96       	adiw	r28, 0x13	; 19
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_enuSetCurser>:
ES_t LCD_enuSetCurser(u8 Copy_u8PosX,u8 Copy_u8PosY)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	62 97       	sbiw	r28, 0x12	; 18
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	89 8b       	std	Y+17, r24	; 0x11
    21b0:	6a 8b       	std	Y+18, r22	; 0x12
	ES_t Local_enuErrorState = ES_NOK;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	88 8b       	std	Y+16, r24	; 0x10
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	u8 Local_u8Curser = 0;
    21d4:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_u8PosY == ROW_1 && Copy_u8PosX >= COLWN_1 &&Copy_u8PosX <= COLWN_16)
    21d6:	8a 89       	ldd	r24, Y+18	; 0x12
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	51 f4       	brne	.+20     	; 0x21f0 <LCD_enuSetCurser+0x56>
    21dc:	89 89       	ldd	r24, Y+17	; 0x11
    21de:	88 23       	and	r24, r24
    21e0:	39 f0       	breq	.+14     	; 0x21f0 <LCD_enuSetCurser+0x56>
    21e2:	89 89       	ldd	r24, Y+17	; 0x11
    21e4:	81 31       	cpi	r24, 0x11	; 17
    21e6:	20 f4       	brcc	.+8      	; 0x21f0 <LCD_enuSetCurser+0x56>
		Local_u8Curser = 0x80 + Copy_u8PosX - 1;
    21e8:	89 89       	ldd	r24, Y+17	; 0x11
    21ea:	81 58       	subi	r24, 0x81	; 129
    21ec:	8f 87       	std	Y+15, r24	; 0x0f
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <LCD_enuSetCurser+0x74>
	else if(Copy_u8PosY == ROW_2 && Copy_u8PosX >= COLWN_1 &&Copy_u8PosX <= COLWN_16)
    21f0:	8a 89       	ldd	r24, Y+18	; 0x12
    21f2:	82 30       	cpi	r24, 0x02	; 2
    21f4:	51 f4       	brne	.+20     	; 0x220a <LCD_enuSetCurser+0x70>
    21f6:	89 89       	ldd	r24, Y+17	; 0x11
    21f8:	88 23       	and	r24, r24
    21fa:	39 f0       	breq	.+14     	; 0x220a <LCD_enuSetCurser+0x70>
    21fc:	89 89       	ldd	r24, Y+17	; 0x11
    21fe:	81 31       	cpi	r24, 0x11	; 17
    2200:	20 f4       	brcc	.+8      	; 0x220a <LCD_enuSetCurser+0x70>
		Local_u8Curser = 0xC0 + Copy_u8PosX - 1;
    2202:	89 89       	ldd	r24, Y+17	; 0x11
    2204:	81 54       	subi	r24, 0x41	; 65
    2206:	8f 87       	std	Y+15, r24	; 0x0f
    2208:	02 c0       	rjmp	.+4      	; 0x220e <LCD_enuSetCurser+0x74>
	else
		Local_enuErrorState = ES_Out_Of_Range;
    220a:	83 e0       	ldi	r24, 0x03	; 3
    220c:	88 8b       	std	Y+16, r24	; 0x10
	DIO_enuSetPINVAL(DB0_Port,DB0_Pin,(Local_u8Curser>>0)&1);
    220e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2210:	98 2f       	mov	r25, r24
    2212:	91 70       	andi	r25, 0x01	; 1
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	49 2f       	mov	r20, r25
    221a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB1_Port,DB1_Pin,(Local_u8Curser>>1)&1);
    221e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2220:	86 95       	lsr	r24
    2222:	98 2f       	mov	r25, r24
    2224:	91 70       	andi	r25, 0x01	; 1
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	61 e0       	ldi	r22, 0x01	; 1
    222a:	49 2f       	mov	r20, r25
    222c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB2_Port,DB2_Pin,(Local_u8Curser>>2)&1);
    2230:	8f 85       	ldd	r24, Y+15	; 0x0f
    2232:	86 95       	lsr	r24
    2234:	86 95       	lsr	r24
    2236:	98 2f       	mov	r25, r24
    2238:	91 70       	andi	r25, 0x01	; 1
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	62 e0       	ldi	r22, 0x02	; 2
    223e:	49 2f       	mov	r20, r25
    2240:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB3_Port,DB3_Pin,(Local_u8Curser>>3)&1);
    2244:	8f 85       	ldd	r24, Y+15	; 0x0f
    2246:	86 95       	lsr	r24
    2248:	86 95       	lsr	r24
    224a:	86 95       	lsr	r24
    224c:	98 2f       	mov	r25, r24
    224e:	91 70       	andi	r25, 0x01	; 1
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	63 e0       	ldi	r22, 0x03	; 3
    2254:	49 2f       	mov	r20, r25
    2256:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB4_Port,DB4_Pin,(Local_u8Curser>>4)&1);
    225a:	8f 85       	ldd	r24, Y+15	; 0x0f
    225c:	82 95       	swap	r24
    225e:	8f 70       	andi	r24, 0x0F	; 15
    2260:	98 2f       	mov	r25, r24
    2262:	91 70       	andi	r25, 0x01	; 1
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	64 e0       	ldi	r22, 0x04	; 4
    2268:	49 2f       	mov	r20, r25
    226a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB5_Port,DB5_Pin,(Local_u8Curser>>5)&1);
    226e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2270:	82 95       	swap	r24
    2272:	86 95       	lsr	r24
    2274:	87 70       	andi	r24, 0x07	; 7
    2276:	98 2f       	mov	r25, r24
    2278:	91 70       	andi	r25, 0x01	; 1
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	65 e0       	ldi	r22, 0x05	; 5
    227e:	49 2f       	mov	r20, r25
    2280:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB6_Port,DB6_Pin,(Local_u8Curser>>6)&1);
    2284:	8f 85       	ldd	r24, Y+15	; 0x0f
    2286:	82 95       	swap	r24
    2288:	86 95       	lsr	r24
    228a:	86 95       	lsr	r24
    228c:	83 70       	andi	r24, 0x03	; 3
    228e:	98 2f       	mov	r25, r24
    2290:	91 70       	andi	r25, 0x01	; 1
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	66 e0       	ldi	r22, 0x06	; 6
    2296:	49 2f       	mov	r20, r25
    2298:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	DIO_enuSetPINVAL(DB7_Port,DB7_Pin,(Local_u8Curser>>7)&1);
    229c:	8f 85       	ldd	r24, Y+15	; 0x0f
    229e:	98 2f       	mov	r25, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	99 27       	eor	r25, r25
    22a4:	99 1f       	adc	r25, r25
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	67 e0       	ldi	r22, 0x07	; 7
    22aa:	49 2f       	mov	r20, r25
    22ac:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>

	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e2       	ldi	r26, 0x20	; 32
    22c0:	b1 e4       	ldi	r27, 0x41	; 65
    22c2:	8b 87       	std	Y+11, r24	; 0x0b
    22c4:	9c 87       	std	Y+12, r25	; 0x0c
    22c6:	ad 87       	std	Y+13, r26	; 0x0d
    22c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a e7       	ldi	r20, 0x7A	; 122
    22d8:	53 e4       	ldi	r21, 0x43	; 67
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8f 83       	std	Y+7, r24	; 0x07
    22e4:	98 87       	std	Y+8, r25	; 0x08
    22e6:	a9 87       	std	Y+9, r26	; 0x09
    22e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <LCD_enuSetCurser+0x172>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	3f c0       	rjmp	.+126    	; 0x238a <LCD_enuSetCurser+0x1f0>
	else if (__tmp > 65535)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <LCD_enuSetCurser+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6b 85       	ldd	r22, Y+11	; 0x0b
    2326:	7c 85       	ldd	r23, Y+12	; 0x0c
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	0f c0       	rjmp	.+30     	; 0x236c <LCD_enuSetCurser+0x1d2>
    234e:	89 e1       	ldi	r24, 0x19	; 25
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_enuSetCurser+0x1c0>
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <LCD_enuSetCurser+0x1b4>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <LCD_enuSetCurser+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_enuSetCurser+0x1fc>
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>


	return Local_enuErrorState;
    23a8:	88 89       	ldd	r24, Y+16	; 0x10
}
    23aa:	62 96       	adiw	r28, 0x12	; 18
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <LCD_enuClearLCD>:
ES_t LCD_enuClearLCD(void)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	2f 97       	sbiw	r28, 0x0f	; 15
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	62 e0       	ldi	r22, 0x02	; 2
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_LOW);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(RW_Port,RW_Pin,DIO_LOW);
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB0_Port,DB0_Pin,DIO_HIGH);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB1_Port,DB1_Pin,DIO_LOW);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB2_Port,DB2_Pin,DIO_LOW);
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	62 e0       	ldi	r22, 0x02	; 2
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB3_Port,DB3_Pin,DIO_LOW);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	63 e0       	ldi	r22, 0x03	; 3
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB4_Port,DB4_Pin,DIO_LOW);
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	64 e0       	ldi	r22, 0x04	; 4
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB5_Port,DB5_Pin,DIO_LOW);
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	65 e0       	ldi	r22, 0x05	; 5
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB6_Port,DB6_Pin,DIO_LOW);
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	66 e0       	ldi	r22, 0x06	; 6
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		DIO_enuSetPINVAL(DB7_Port,DB7_Pin,DIO_LOW);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	67 e0       	ldi	r22, 0x07	; 7
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>

		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_HIGH);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	62 e0       	ldi	r22, 0x02	; 2
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e2       	ldi	r26, 0x20	; 32
    2452:	b1 e4       	ldi	r27, 0x41	; 65
    2454:	8b 87       	std	Y+11, r24	; 0x0b
    2456:	9c 87       	std	Y+12, r25	; 0x0c
    2458:	ad 87       	std	Y+13, r26	; 0x0d
    245a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	6b 85       	ldd	r22, Y+11	; 0x0b
    245e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2460:	8d 85       	ldd	r24, Y+13	; 0x0d
    2462:	9e 85       	ldd	r25, Y+14	; 0x0e
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a e7       	ldi	r20, 0x7A	; 122
    246a:	53 e4       	ldi	r21, 0x43	; 67
    246c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	8f 83       	std	Y+7, r24	; 0x07
    2476:	98 87       	std	Y+8, r25	; 0x08
    2478:	a9 87       	std	Y+9, r26	; 0x09
    247a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247c:	6f 81       	ldd	r22, Y+7	; 0x07
    247e:	78 85       	ldd	r23, Y+8	; 0x08
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	2c f4       	brge	.+10     	; 0x249e <LCD_enuClearLCD+0xe2>
		__ticks = 1;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	3f c0       	rjmp	.+126    	; 0x251c <LCD_enuClearLCD+0x160>
	else if (__tmp > 65535)
    249e:	6f 81       	ldd	r22, Y+7	; 0x07
    24a0:	78 85       	ldd	r23, Y+8	; 0x08
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	4c f5       	brge	.+82     	; 0x2508 <LCD_enuClearLCD+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    24bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <LCD_enuClearLCD+0x142>
    24e0:	89 e1       	ldi	r24, 0x19	; 25
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9c 83       	std	Y+4, r25	; 0x04
    24e6:	8b 83       	std	Y+3, r24	; 0x03
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <LCD_enuClearLCD+0x130>
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	69 f7       	brne	.-38     	; 0x24e0 <LCD_enuClearLCD+0x124>
    2506:	14 c0       	rjmp	.+40     	; 0x2530 <LCD_enuClearLCD+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2508:	6f 81       	ldd	r22, Y+7	; 0x07
    250a:	78 85       	ldd	r23, Y+8	; 0x08
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <LCD_enuClearLCD+0x16c>
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enuSetPINVAL(EN_Port,EN_Pin,DIO_LOW);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	62 e0       	ldi	r22, 0x02	; 2
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>


		return Local_enuErrorState;
    253a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    253c:	2f 96       	adiw	r28, 0x0f	; 15
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LCD_enuDispChar>:
ES_t LCD_enuDispChar(u8 Copy_u8Char)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	00 d0       	rcall	.+0      	; 0x2554 <LCD_enuDispChar+0x6>
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
	LCD_VidDOPRVTask(Copy_u8Char);
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidDOPRVTask>
	return Local_enuErrorState;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <LCD_enuDispString>:

ES_t LCD_enuDispString(u8 * Copy_u8String)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <LCD_enuDispString+0x6>
    2580:	00 d0       	rcall	.+0      	; 0x2582 <LCD_enuDispString+0x8>
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	9c 83       	std	Y+4, r25	; 0x04
    2588:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	8a 83       	std	Y+2, r24	; 0x02

		DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_enuSetPINVAL>
		u8 Local_iterator =0;
    2598:	19 82       	std	Y+1, r1	; 0x01
		for(Local_iterator =0;Copy_u8String[Local_iterator]!='\0';Local_iterator++)
    259a:	19 82       	std	Y+1, r1	; 0x01
    259c:	0e c0       	rjmp	.+28     	; 0x25ba <LCD_enuDispString+0x40>
		{
			LCD_VidDOPRVTask(Copy_u8String[Local_iterator]);
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	fc 01       	movw	r30, r24
    25aa:	e2 0f       	add	r30, r18
    25ac:	f3 1f       	adc	r31, r19
    25ae:	80 81       	ld	r24, Z
    25b0:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_VidDOPRVTask>
{
	ES_t Local_enuErrorState = ES_NOK;

		DIO_enuSetPINVAL(RS_Port,RS_Pin,DIO_HIGH);
		u8 Local_iterator =0;
		for(Local_iterator =0;Copy_u8String[Local_iterator]!='\0';Local_iterator++)
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	fc 01       	movw	r30, r24
    25c6:	e2 0f       	add	r30, r18
    25c8:	f3 1f       	adc	r31, r19
    25ca:	80 81       	ld	r24, Z
    25cc:	88 23       	and	r24, r24
    25ce:	39 f7       	brne	.-50     	; 0x259e <LCD_enuDispString+0x24>
		{
			LCD_VidDOPRVTask(Copy_u8String[Local_iterator]);
		}
	return Local_enuErrorState;
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <main>:
#include"../HAL/LCD_int.h"
#include"../HAL/LCD_Config.h"

#include<util/delay.h>
int main()
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	e4 97       	sbiw	r28, 0x34	; 52
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61

	u8 letter1[] ={0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 ,0x00};
    25f4:	ce 01       	movw	r24, r28
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	9a a3       	std	Y+34, r25	; 0x22
    25fa:	89 a3       	std	Y+33, r24	; 0x21
    25fc:	e0 e8       	ldi	r30, 0x80	; 128
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	fc a3       	std	Y+36, r31	; 0x24
    2602:	eb a3       	std	Y+35, r30	; 0x23
    2604:	f8 e0       	ldi	r31, 0x08	; 8
    2606:	fd a3       	std	Y+37, r31	; 0x25
    2608:	eb a1       	ldd	r30, Y+35	; 0x23
    260a:	fc a1       	ldd	r31, Y+36	; 0x24
    260c:	00 80       	ld	r0, Z
    260e:	8b a1       	ldd	r24, Y+35	; 0x23
    2610:	9c a1       	ldd	r25, Y+36	; 0x24
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	9c a3       	std	Y+36, r25	; 0x24
    2616:	8b a3       	std	Y+35, r24	; 0x23
    2618:	e9 a1       	ldd	r30, Y+33	; 0x21
    261a:	fa a1       	ldd	r31, Y+34	; 0x22
    261c:	00 82       	st	Z, r0
    261e:	89 a1       	ldd	r24, Y+33	; 0x21
    2620:	9a a1       	ldd	r25, Y+34	; 0x22
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	9a a3       	std	Y+34, r25	; 0x22
    2626:	89 a3       	std	Y+33, r24	; 0x21
    2628:	9d a1       	ldd	r25, Y+37	; 0x25
    262a:	91 50       	subi	r25, 0x01	; 1
    262c:	9d a3       	std	Y+37, r25	; 0x25
    262e:	ed a1       	ldd	r30, Y+37	; 0x25
    2630:	ee 23       	and	r30, r30
    2632:	51 f7       	brne	.-44     	; 0x2608 <main+0x28>
	u8 letter2[] ={0x00, 0x00,0x00,0x00,0x00, 0x15, 0x1f, 0x00};
    2634:	ce 01       	movw	r24, r28
    2636:	09 96       	adiw	r24, 0x09	; 9
    2638:	9f a3       	std	Y+39, r25	; 0x27
    263a:	8e a3       	std	Y+38, r24	; 0x26
    263c:	e8 e7       	ldi	r30, 0x78	; 120
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	f9 a7       	std	Y+41, r31	; 0x29
    2642:	e8 a7       	std	Y+40, r30	; 0x28
    2644:	f8 e0       	ldi	r31, 0x08	; 8
    2646:	fa a7       	std	Y+42, r31	; 0x2a
    2648:	e8 a5       	ldd	r30, Y+40	; 0x28
    264a:	f9 a5       	ldd	r31, Y+41	; 0x29
    264c:	00 80       	ld	r0, Z
    264e:	88 a5       	ldd	r24, Y+40	; 0x28
    2650:	99 a5       	ldd	r25, Y+41	; 0x29
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	99 a7       	std	Y+41, r25	; 0x29
    2656:	88 a7       	std	Y+40, r24	; 0x28
    2658:	ee a1       	ldd	r30, Y+38	; 0x26
    265a:	ff a1       	ldd	r31, Y+39	; 0x27
    265c:	00 82       	st	Z, r0
    265e:	8e a1       	ldd	r24, Y+38	; 0x26
    2660:	9f a1       	ldd	r25, Y+39	; 0x27
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	9f a3       	std	Y+39, r25	; 0x27
    2666:	8e a3       	std	Y+38, r24	; 0x26
    2668:	9a a5       	ldd	r25, Y+42	; 0x2a
    266a:	91 50       	subi	r25, 0x01	; 1
    266c:	9a a7       	std	Y+42, r25	; 0x2a
    266e:	ea a5       	ldd	r30, Y+42	; 0x2a
    2670:	ee 23       	and	r30, r30
    2672:	51 f7       	brne	.-44     	; 0x2648 <main+0x68>
	u8 letter3[] = {0x00, 0x01, 0x01, 0x05, 0x05, 0x05, 0x0f, 0x00};
    2674:	ce 01       	movw	r24, r28
    2676:	41 96       	adiw	r24, 0x11	; 17
    2678:	9c a7       	std	Y+44, r25	; 0x2c
    267a:	8b a7       	std	Y+43, r24	; 0x2b
    267c:	e0 e7       	ldi	r30, 0x70	; 112
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	fe a7       	std	Y+46, r31	; 0x2e
    2682:	ed a7       	std	Y+45, r30	; 0x2d
    2684:	f8 e0       	ldi	r31, 0x08	; 8
    2686:	ff a7       	std	Y+47, r31	; 0x2f
    2688:	ed a5       	ldd	r30, Y+45	; 0x2d
    268a:	fe a5       	ldd	r31, Y+46	; 0x2e
    268c:	00 80       	ld	r0, Z
    268e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2690:	9e a5       	ldd	r25, Y+46	; 0x2e
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	9e a7       	std	Y+46, r25	; 0x2e
    2696:	8d a7       	std	Y+45, r24	; 0x2d
    2698:	eb a5       	ldd	r30, Y+43	; 0x2b
    269a:	fc a5       	ldd	r31, Y+44	; 0x2c
    269c:	00 82       	st	Z, r0
    269e:	8b a5       	ldd	r24, Y+43	; 0x2b
    26a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	9c a7       	std	Y+44, r25	; 0x2c
    26a6:	8b a7       	std	Y+43, r24	; 0x2b
    26a8:	9f a5       	ldd	r25, Y+47	; 0x2f
    26aa:	91 50       	subi	r25, 0x01	; 1
    26ac:	9f a7       	std	Y+47, r25	; 0x2f
    26ae:	ef a5       	ldd	r30, Y+47	; 0x2f
    26b0:	ee 23       	and	r30, r30
    26b2:	51 f7       	brne	.-44     	; 0x2688 <main+0xa8>
	u8 letter4[] = {0x00, 0x00, 0x1f, 0x15, 0x17, 0x10, 0x10, 0x00};
    26b4:	ce 01       	movw	r24, r28
    26b6:	49 96       	adiw	r24, 0x19	; 25
    26b8:	99 ab       	std	Y+49, r25	; 0x31
    26ba:	88 ab       	std	Y+48, r24	; 0x30
    26bc:	e8 e6       	ldi	r30, 0x68	; 104
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	fb ab       	std	Y+51, r31	; 0x33
    26c2:	ea ab       	std	Y+50, r30	; 0x32
    26c4:	f8 e0       	ldi	r31, 0x08	; 8
    26c6:	fc ab       	std	Y+52, r31	; 0x34
    26c8:	ea a9       	ldd	r30, Y+50	; 0x32
    26ca:	fb a9       	ldd	r31, Y+51	; 0x33
    26cc:	00 80       	ld	r0, Z
    26ce:	8a a9       	ldd	r24, Y+50	; 0x32
    26d0:	9b a9       	ldd	r25, Y+51	; 0x33
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	9b ab       	std	Y+51, r25	; 0x33
    26d6:	8a ab       	std	Y+50, r24	; 0x32
    26d8:	e8 a9       	ldd	r30, Y+48	; 0x30
    26da:	f9 a9       	ldd	r31, Y+49	; 0x31
    26dc:	00 82       	st	Z, r0
    26de:	88 a9       	ldd	r24, Y+48	; 0x30
    26e0:	99 a9       	ldd	r25, Y+49	; 0x31
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	99 ab       	std	Y+49, r25	; 0x31
    26e6:	88 ab       	std	Y+48, r24	; 0x30
    26e8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ea:	91 50       	subi	r25, 0x01	; 1
    26ec:	9c ab       	std	Y+52, r25	; 0x34
    26ee:	ec a9       	ldd	r30, Y+52	; 0x34
    26f0:	ee 23       	and	r30, r30
    26f2:	51 f7       	brne	.-44     	; 0x26c8 <main+0xe8>
	LCD_enuINIT();
    26f4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_enuINIT>
	 LCD_enuCreateLetter(1,letter1);
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	9e 01       	movw	r18, r28
    26fc:	2f 5f       	subi	r18, 0xFF	; 255
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	b9 01       	movw	r22, r18
    2702:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_enuCreateLetter>
	 LCD_enuCreateLetter(2,letter2);
    2706:	9e 01       	movw	r18, r28
    2708:	27 5f       	subi	r18, 0xF7	; 247
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	b9 01       	movw	r22, r18
    2710:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_enuCreateLetter>
	 LCD_enuCreateLetter(3,letter3);
    2714:	9e 01       	movw	r18, r28
    2716:	2f 5e       	subi	r18, 0xEF	; 239
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	b9 01       	movw	r22, r18
    271e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_enuCreateLetter>
	 LCD_enuCreateLetter(4,letter4);
    2722:	9e 01       	movw	r18, r28
    2724:	27 5e       	subi	r18, 0xE7	; 231
    2726:	3f 4f       	sbci	r19, 0xFF	; 255
    2728:	84 e0       	ldi	r24, 0x04	; 4
    272a:	b9 01       	movw	r22, r18
    272c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_enuCreateLetter>
	 LCD_enuSetCurser(16,1);
    2730:	80 e1       	ldi	r24, 0x10	; 16
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_enuSetCurser>
	 LCD_enuWriteFrmRI8toLFT();
    2738:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_enuWriteFrmRI8toLFT>
	 LCD_enuDispChar(1);
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_enuDispChar>
	 LCD_enuDispChar(2);
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_enuDispChar>
	 LCD_enuDispChar(3);
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_enuDispChar>
	 LCD_enuDispChar(4);
    274e:	84 e0       	ldi	r24, 0x04	; 4
    2750:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_enuDispChar>
    2754:	ff cf       	rjmp	.-2      	; 0x2754 <main+0x174>

00002756 <__prologue_saves__>:
    2756:	2f 92       	push	r2
    2758:	3f 92       	push	r3
    275a:	4f 92       	push	r4
    275c:	5f 92       	push	r5
    275e:	6f 92       	push	r6
    2760:	7f 92       	push	r7
    2762:	8f 92       	push	r8
    2764:	9f 92       	push	r9
    2766:	af 92       	push	r10
    2768:	bf 92       	push	r11
    276a:	cf 92       	push	r12
    276c:	df 92       	push	r13
    276e:	ef 92       	push	r14
    2770:	ff 92       	push	r15
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	ca 1b       	sub	r28, r26
    2780:	db 0b       	sbc	r29, r27
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	09 94       	ijmp

0000278e <__epilogue_restores__>:
    278e:	2a 88       	ldd	r2, Y+18	; 0x12
    2790:	39 88       	ldd	r3, Y+17	; 0x11
    2792:	48 88       	ldd	r4, Y+16	; 0x10
    2794:	5f 84       	ldd	r5, Y+15	; 0x0f
    2796:	6e 84       	ldd	r6, Y+14	; 0x0e
    2798:	7d 84       	ldd	r7, Y+13	; 0x0d
    279a:	8c 84       	ldd	r8, Y+12	; 0x0c
    279c:	9b 84       	ldd	r9, Y+11	; 0x0b
    279e:	aa 84       	ldd	r10, Y+10	; 0x0a
    27a0:	b9 84       	ldd	r11, Y+9	; 0x09
    27a2:	c8 84       	ldd	r12, Y+8	; 0x08
    27a4:	df 80       	ldd	r13, Y+7	; 0x07
    27a6:	ee 80       	ldd	r14, Y+6	; 0x06
    27a8:	fd 80       	ldd	r15, Y+5	; 0x05
    27aa:	0c 81       	ldd	r16, Y+4	; 0x04
    27ac:	1b 81       	ldd	r17, Y+3	; 0x03
    27ae:	aa 81       	ldd	r26, Y+2	; 0x02
    27b0:	b9 81       	ldd	r27, Y+1	; 0x01
    27b2:	ce 0f       	add	r28, r30
    27b4:	d1 1d       	adc	r29, r1
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	ed 01       	movw	r28, r26
    27c2:	08 95       	ret

000027c4 <_exit>:
    27c4:	f8 94       	cli

000027c6 <__stop_program>:
    27c6:	ff cf       	rjmp	.-2      	; 0x27c6 <__stop_program>
