
EXTI_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001072  00001106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800066  00800066  0000110c  2**0
                  ALLOC
  3 .stab         00001350  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000737  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_1>
       8:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_2>
       c:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 08 	call	0x1006	; 0x1006 <main>
      8a:	0c 94 37 08 	jmp	0x106e	; 0x106e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enuInit>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	ea e3       	ldi	r30, 0x3A	; 58
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	8f ef       	ldi	r24, 0xFF	; 255
      a6:	80 83       	st	Z, r24
      a8:	e7 e3       	ldi	r30, 0x37	; 55
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	86 eb       	ldi	r24, 0xB6	; 182
      ae:	80 83       	st	Z, r24
      b0:	e4 e3       	ldi	r30, 0x34	; 52
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	86 eb       	ldi	r24, 0xB6	; 182
      b6:	80 83       	st	Z, r24
      b8:	e1 e3       	ldi	r30, 0x31	; 49
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	86 eb       	ldi	r24, 0xB6	; 182
      be:	80 83       	st	Z, r24
      c0:	eb e3       	ldi	r30, 0x3B	; 59
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	10 82       	st	Z, r1
      c6:	e8 e3       	ldi	r30, 0x38	; 56
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	8a e3       	ldi	r24, 0x3A	; 58
      cc:	80 83       	st	Z, r24
      ce:	e5 e3       	ldi	r30, 0x35	; 53
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	8a e3       	ldi	r24, 0x3A	; 58
      d4:	80 83       	st	Z, r24
      d6:	e2 e3       	ldi	r30, 0x32	; 50
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	8a e3       	ldi	r24, 0x3A	; 58
      dc:	80 83       	st	Z, r24
      de:	19 82       	std	Y+1, r1	; 0x01
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	0f 90       	pop	r0
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <DIO_enuSetPortDir>:




ES_t DIO_enuSetPortDir(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	00 d0       	rcall	.+0      	; 0xf0 <DIO_enuSetPortDir+0x6>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <DIO_enuSetPortDir+0x8>
      f2:	0f 92       	push	r0
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	8a 83       	std	Y+2, r24	; 0x02
      fa:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     100:	8a 81       	ldd	r24, Y+2	; 0x02
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	a0 f5       	brcc	.+104    	; 0x16e <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
     106:	8a 81       	ldd	r24, Y+2	; 0x02
     108:	28 2f       	mov	r18, r24
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	3d 83       	std	Y+5, r19	; 0x05
     10e:	2c 83       	std	Y+4, r18	; 0x04
     110:	8c 81       	ldd	r24, Y+4	; 0x04
     112:	9d 81       	ldd	r25, Y+5	; 0x05
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	91 05       	cpc	r25, r1
     118:	d1 f0       	breq	.+52     	; 0x14e <DIO_enuSetPortDir+0x64>
     11a:	2c 81       	ldd	r18, Y+4	; 0x04
     11c:	3d 81       	ldd	r19, Y+5	; 0x05
     11e:	22 30       	cpi	r18, 0x02	; 2
     120:	31 05       	cpc	r19, r1
     122:	2c f4       	brge	.+10     	; 0x12e <DIO_enuSetPortDir+0x44>
     124:	8c 81       	ldd	r24, Y+4	; 0x04
     126:	9d 81       	ldd	r25, Y+5	; 0x05
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	61 f0       	breq	.+24     	; 0x144 <DIO_enuSetPortDir+0x5a>
     12c:	1e c0       	rjmp	.+60     	; 0x16a <DIO_enuSetPortDir+0x80>
     12e:	2c 81       	ldd	r18, Y+4	; 0x04
     130:	3d 81       	ldd	r19, Y+5	; 0x05
     132:	22 30       	cpi	r18, 0x02	; 2
     134:	31 05       	cpc	r19, r1
     136:	81 f0       	breq	.+32     	; 0x158 <DIO_enuSetPortDir+0x6e>
     138:	8c 81       	ldd	r24, Y+4	; 0x04
     13a:	9d 81       	ldd	r25, Y+5	; 0x05
     13c:	83 30       	cpi	r24, 0x03	; 3
     13e:	91 05       	cpc	r25, r1
     140:	81 f0       	breq	.+32     	; 0x162 <DIO_enuSetPortDir+0x78>
     142:	13 c0       	rjmp	.+38     	; 0x16a <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA:
					DDRA = Copy_u8PortValue;break;
     144:	ea e3       	ldi	r30, 0x3A	; 58
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	8b 81       	ldd	r24, Y+3	; 0x03
     14a:	80 83       	st	Z, r24
     14c:	0e c0       	rjmp	.+28     	; 0x16a <DIO_enuSetPortDir+0x80>
		case DIO_PORTB:
					DDRB = Copy_u8PortValue;break;
     14e:	e7 e3       	ldi	r30, 0x37	; 55
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	80 83       	st	Z, r24
     156:	09 c0       	rjmp	.+18     	; 0x16a <DIO_enuSetPortDir+0x80>
		case DIO_PORTC:
					DDRC= Copy_u8PortValue;break;
     158:	e4 e3       	ldi	r30, 0x34	; 52
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	8b 81       	ldd	r24, Y+3	; 0x03
     15e:	80 83       	st	Z, r24
     160:	04 c0       	rjmp	.+8      	; 0x16a <DIO_enuSetPortDir+0x80>
		case DIO_PORTD:
					DDRD = Copy_u8PortValue;break;
     162:	e1 e3       	ldi	r30, 0x31	; 49
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	80 83       	st	Z, r24
		}
		Local_enuErrorStates = ES_OK;
     16a:	19 82       	std	Y+1, r1	; 0x01
     16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_enuSetPortDir+0x88>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     16e:	83 e0       	ldi	r24, 0x03	; 3
     170:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     172:	89 81       	ldd	r24, Y+1	; 0x01
}
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	08 95       	ret

00000184 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 Copy_u8PortID ,u8 Copy_u8PortValue)
{
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	00 d0       	rcall	.+0      	; 0x18a <DIO_enuSetPortVAL+0x6>
     18a:	00 d0       	rcall	.+0      	; 0x18c <DIO_enuSetPortVAL+0x8>
     18c:	0f 92       	push	r0
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	8a 83       	std	Y+2, r24	; 0x02
     194:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
     19a:	8a 81       	ldd	r24, Y+2	; 0x02
     19c:	84 30       	cpi	r24, 0x04	; 4
     19e:	a0 f5       	brcc	.+104    	; 0x208 <DIO_enuSetPortVAL+0x84>
		{
			switch(Copy_u8PortID)
     1a0:	8a 81       	ldd	r24, Y+2	; 0x02
     1a2:	28 2f       	mov	r18, r24
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	3d 83       	std	Y+5, r19	; 0x05
     1a8:	2c 83       	std	Y+4, r18	; 0x04
     1aa:	8c 81       	ldd	r24, Y+4	; 0x04
     1ac:	9d 81       	ldd	r25, Y+5	; 0x05
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	91 05       	cpc	r25, r1
     1b2:	d1 f0       	breq	.+52     	; 0x1e8 <DIO_enuSetPortVAL+0x64>
     1b4:	2c 81       	ldd	r18, Y+4	; 0x04
     1b6:	3d 81       	ldd	r19, Y+5	; 0x05
     1b8:	22 30       	cpi	r18, 0x02	; 2
     1ba:	31 05       	cpc	r19, r1
     1bc:	2c f4       	brge	.+10     	; 0x1c8 <DIO_enuSetPortVAL+0x44>
     1be:	8c 81       	ldd	r24, Y+4	; 0x04
     1c0:	9d 81       	ldd	r25, Y+5	; 0x05
     1c2:	00 97       	sbiw	r24, 0x00	; 0
     1c4:	61 f0       	breq	.+24     	; 0x1de <DIO_enuSetPortVAL+0x5a>
     1c6:	1e c0       	rjmp	.+60     	; 0x204 <DIO_enuSetPortVAL+0x80>
     1c8:	2c 81       	ldd	r18, Y+4	; 0x04
     1ca:	3d 81       	ldd	r19, Y+5	; 0x05
     1cc:	22 30       	cpi	r18, 0x02	; 2
     1ce:	31 05       	cpc	r19, r1
     1d0:	81 f0       	breq	.+32     	; 0x1f2 <DIO_enuSetPortVAL+0x6e>
     1d2:	8c 81       	ldd	r24, Y+4	; 0x04
     1d4:	9d 81       	ldd	r25, Y+5	; 0x05
     1d6:	83 30       	cpi	r24, 0x03	; 3
     1d8:	91 05       	cpc	r25, r1
     1da:	81 f0       	breq	.+32     	; 0x1fc <DIO_enuSetPortVAL+0x78>
     1dc:	13 c0       	rjmp	.+38     	; 0x204 <DIO_enuSetPortVAL+0x80>
			{
			case DIO_PORTA:
						PORTA = Copy_u8PortValue;break;
     1de:	eb e3       	ldi	r30, 0x3B	; 59
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	8b 81       	ldd	r24, Y+3	; 0x03
     1e4:	80 83       	st	Z, r24
     1e6:	0e c0       	rjmp	.+28     	; 0x204 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTB:
						PORTB = Copy_u8PortValue;break;
     1e8:	e8 e3       	ldi	r30, 0x38	; 56
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	80 83       	st	Z, r24
     1f0:	09 c0       	rjmp	.+18     	; 0x204 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTC:
						PORTC= Copy_u8PortValue;break;
     1f2:	e5 e3       	ldi	r30, 0x35	; 53
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	8b 81       	ldd	r24, Y+3	; 0x03
     1f8:	80 83       	st	Z, r24
     1fa:	04 c0       	rjmp	.+8      	; 0x204 <DIO_enuSetPortVAL+0x80>
			case DIO_PORTD:
						PORTD = Copy_u8PortValue;break;
     1fc:	e2 e3       	ldi	r30, 0x32	; 50
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     204:	19 82       	std	Y+1, r1	; 0x01
     206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_enuSetPortVAL+0x88>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorStates;
     20c:	89 81       	ldd	r24, Y+1	; 0x01
}
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	cf 91       	pop	r28
     21a:	df 91       	pop	r29
     21c:	08 95       	ret

0000021e <DIO_enuToggelPort>:
ES_t DIO_enuToggelPort(u8 Copy_u8PortID)
{
     21e:	df 93       	push	r29
     220:	cf 93       	push	r28
     222:	00 d0       	rcall	.+0      	; 0x224 <DIO_enuToggelPort+0x6>
     224:	00 d0       	rcall	.+0      	; 0x226 <DIO_enuToggelPort+0x8>
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     230:	8a 81       	ldd	r24, Y+2	; 0x02
     232:	84 30       	cpi	r24, 0x04	; 4
     234:	08 f0       	brcs	.+2      	; 0x238 <DIO_enuToggelPort+0x1a>
     236:	40 c0       	rjmp	.+128    	; 0x2b8 <DIO_enuToggelPort+0x9a>
			{
				switch(Copy_u8PortID)
     238:	8a 81       	ldd	r24, Y+2	; 0x02
     23a:	28 2f       	mov	r18, r24
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	3c 83       	std	Y+4, r19	; 0x04
     240:	2b 83       	std	Y+3, r18	; 0x03
     242:	8b 81       	ldd	r24, Y+3	; 0x03
     244:	9c 81       	ldd	r25, Y+4	; 0x04
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	91 05       	cpc	r25, r1
     24a:	e9 f0       	breq	.+58     	; 0x286 <DIO_enuToggelPort+0x68>
     24c:	2b 81       	ldd	r18, Y+3	; 0x03
     24e:	3c 81       	ldd	r19, Y+4	; 0x04
     250:	22 30       	cpi	r18, 0x02	; 2
     252:	31 05       	cpc	r19, r1
     254:	2c f4       	brge	.+10     	; 0x260 <DIO_enuToggelPort+0x42>
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	9c 81       	ldd	r25, Y+4	; 0x04
     25a:	00 97       	sbiw	r24, 0x00	; 0
     25c:	61 f0       	breq	.+24     	; 0x276 <DIO_enuToggelPort+0x58>
     25e:	2a c0       	rjmp	.+84     	; 0x2b4 <DIO_enuToggelPort+0x96>
     260:	2b 81       	ldd	r18, Y+3	; 0x03
     262:	3c 81       	ldd	r19, Y+4	; 0x04
     264:	22 30       	cpi	r18, 0x02	; 2
     266:	31 05       	cpc	r19, r1
     268:	b1 f0       	breq	.+44     	; 0x296 <DIO_enuToggelPort+0x78>
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	9c 81       	ldd	r25, Y+4	; 0x04
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	91 05       	cpc	r25, r1
     272:	c9 f0       	breq	.+50     	; 0x2a6 <DIO_enuToggelPort+0x88>
     274:	1f c0       	rjmp	.+62     	; 0x2b4 <DIO_enuToggelPort+0x96>
				{
				case DIO_PORTA:
							PORTA = ~PORTA ;break;
     276:	ab e3       	ldi	r26, 0x3B	; 59
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	eb e3       	ldi	r30, 0x3B	; 59
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	80 95       	com	r24
     282:	8c 93       	st	X, r24
     284:	17 c0       	rjmp	.+46     	; 0x2b4 <DIO_enuToggelPort+0x96>
				case DIO_PORTB:
							PORTB = ~PORTB ;break;
     286:	a8 e3       	ldi	r26, 0x38	; 56
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e8 e3       	ldi	r30, 0x38	; 56
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	80 95       	com	r24
     292:	8c 93       	st	X, r24
     294:	0f c0       	rjmp	.+30     	; 0x2b4 <DIO_enuToggelPort+0x96>
				case DIO_PORTC:
							PORTC = ~PORTC ;break;
     296:	a5 e3       	ldi	r26, 0x35	; 53
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e5 e3       	ldi	r30, 0x35	; 53
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	80 95       	com	r24
     2a2:	8c 93       	st	X, r24
     2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <DIO_enuToggelPort+0x96>
				case DIO_PORTD:
							PORTD = ~PORTD ;break;
     2a6:	a2 e3       	ldi	r26, 0x32	; 50
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	e2 e3       	ldi	r30, 0x32	; 50
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	80 95       	com	r24
     2b2:	8c 93       	st	X, r24
				}
				Local_enuErrorStates = ES_OK;
     2b4:	19 82       	std	Y+1, r1	; 0x01
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_enuToggelPort+0x9e>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	89 83       	std	Y+1, r24	; 0x01
			}
	return Local_enuErrorStates;
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
}
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	cf 91       	pop	r28
     2c8:	df 91       	pop	r29
     2ca:	08 95       	ret

000002cc <DIO_enuGetPortVAL>:
ES_t DIO_enuGetPortVAL(u8 Copy_u8PortID,u8 * Copy_Pu8Value)
{
     2cc:	df 93       	push	r29
     2ce:	cf 93       	push	r28
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <DIO_enuGetPortVAL+0x6>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <DIO_enuGetPortVAL+0x8>
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <DIO_enuGetPortVAL+0xa>
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	8a 83       	std	Y+2, r24	; 0x02
     2dc:	7c 83       	std	Y+4, r23	; 0x04
     2de:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_enuGetPortVAL+0x22>
     2ec:	42 c0       	rjmp	.+132    	; 0x372 <DIO_enuGetPortVAL+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
     2f0:	84 30       	cpi	r24, 0x04	; 4
     2f2:	e0 f5       	brcc	.+120    	; 0x36c <DIO_enuGetPortVAL+0xa0>
		{
			switch(Copy_u8PortID)
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	28 2f       	mov	r18, r24
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	3e 83       	std	Y+6, r19	; 0x06
     2fc:	2d 83       	std	Y+5, r18	; 0x05
     2fe:	8d 81       	ldd	r24, Y+5	; 0x05
     300:	9e 81       	ldd	r25, Y+6	; 0x06
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	91 05       	cpc	r25, r1
     306:	e1 f0       	breq	.+56     	; 0x340 <DIO_enuGetPortVAL+0x74>
     308:	2d 81       	ldd	r18, Y+5	; 0x05
     30a:	3e 81       	ldd	r19, Y+6	; 0x06
     30c:	22 30       	cpi	r18, 0x02	; 2
     30e:	31 05       	cpc	r19, r1
     310:	2c f4       	brge	.+10     	; 0x31c <DIO_enuGetPortVAL+0x50>
     312:	8d 81       	ldd	r24, Y+5	; 0x05
     314:	9e 81       	ldd	r25, Y+6	; 0x06
     316:	00 97       	sbiw	r24, 0x00	; 0
     318:	61 f0       	breq	.+24     	; 0x332 <DIO_enuGetPortVAL+0x66>
     31a:	26 c0       	rjmp	.+76     	; 0x368 <DIO_enuGetPortVAL+0x9c>
     31c:	2d 81       	ldd	r18, Y+5	; 0x05
     31e:	3e 81       	ldd	r19, Y+6	; 0x06
     320:	22 30       	cpi	r18, 0x02	; 2
     322:	31 05       	cpc	r19, r1
     324:	a1 f0       	breq	.+40     	; 0x34e <DIO_enuGetPortVAL+0x82>
     326:	8d 81       	ldd	r24, Y+5	; 0x05
     328:	9e 81       	ldd	r25, Y+6	; 0x06
     32a:	83 30       	cpi	r24, 0x03	; 3
     32c:	91 05       	cpc	r25, r1
     32e:	b1 f0       	breq	.+44     	; 0x35c <DIO_enuGetPortVAL+0x90>
     330:	1b c0       	rjmp	.+54     	; 0x368 <DIO_enuGetPortVAL+0x9c>
			{
				case DIO_PORTA:
					*Copy_Pu8Value = PINA ;break;
     332:	e9 e3       	ldi	r30, 0x39	; 57
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	eb 81       	ldd	r30, Y+3	; 0x03
     33a:	fc 81       	ldd	r31, Y+4	; 0x04
     33c:	80 83       	st	Z, r24
     33e:	14 c0       	rjmp	.+40     	; 0x368 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTB:
					*Copy_Pu8Value = PINB ;break;
     340:	e6 e3       	ldi	r30, 0x36	; 54
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	eb 81       	ldd	r30, Y+3	; 0x03
     348:	fc 81       	ldd	r31, Y+4	; 0x04
     34a:	80 83       	st	Z, r24
     34c:	0d c0       	rjmp	.+26     	; 0x368 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTC:
					*Copy_Pu8Value = PINC ;break;
     34e:	e3 e3       	ldi	r30, 0x33	; 51
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	eb 81       	ldd	r30, Y+3	; 0x03
     356:	fc 81       	ldd	r31, Y+4	; 0x04
     358:	80 83       	st	Z, r24
     35a:	06 c0       	rjmp	.+12     	; 0x368 <DIO_enuGetPortVAL+0x9c>
				case DIO_PORTD:
					*Copy_Pu8Value = PIND ;break;
     35c:	e0 e3       	ldi	r30, 0x30	; 48
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	eb 81       	ldd	r30, Y+3	; 0x03
     364:	fc 81       	ldd	r31, Y+4	; 0x04
     366:	80 83       	st	Z, r24
			}
			Local_enuErrorStates = ES_OK;
     368:	19 82       	std	Y+1, r1	; 0x01
     36a:	05 c0       	rjmp	.+10     	; 0x376 <DIO_enuGetPortVAL+0xaa>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_enuGetPortVAL+0xaa>
		}

	}
	else
	{
		 Local_enuErrorStates = ES_NULLPOINTER;
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     376:	89 81       	ldd	r24, Y+1	; 0x01
}
     378:	26 96       	adiw	r28, 0x06	; 6
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	08 95       	ret

0000038a <DIO_enuSetPINDir>:




ES_t DIO_enuSetPINDir(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	00 d0       	rcall	.+0      	; 0x390 <DIO_enuSetPINDir+0x6>
     390:	00 d0       	rcall	.+0      	; 0x392 <DIO_enuSetPINDir+0x8>
     392:	00 d0       	rcall	.+0      	; 0x394 <DIO_enuSetPINDir+0xa>
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	8a 83       	std	Y+2, r24	; 0x02
     39a:	6b 83       	std	Y+3, r22	; 0x03
     39c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	84 30       	cpi	r24, 0x04	; 4
     3a6:	08 f0       	brcs	.+2      	; 0x3aa <DIO_enuSetPINDir+0x20>
     3a8:	d0 c0       	rjmp	.+416    	; 0x54a <DIO_enuSetPINDir+0x1c0>
     3aa:	8b 81       	ldd	r24, Y+3	; 0x03
     3ac:	88 30       	cpi	r24, 0x08	; 8
     3ae:	08 f0       	brcs	.+2      	; 0x3b2 <DIO_enuSetPINDir+0x28>
     3b0:	cc c0       	rjmp	.+408    	; 0x54a <DIO_enuSetPINDir+0x1c0>
     3b2:	8c 81       	ldd	r24, Y+4	; 0x04
     3b4:	82 30       	cpi	r24, 0x02	; 2
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <DIO_enuSetPINDir+0x30>
     3b8:	c8 c0       	rjmp	.+400    	; 0x54a <DIO_enuSetPINDir+0x1c0>
	{

			switch(Copy_u8PortID)
     3ba:	8a 81       	ldd	r24, Y+2	; 0x02
     3bc:	28 2f       	mov	r18, r24
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	3e 83       	std	Y+6, r19	; 0x06
     3c2:	2d 83       	std	Y+5, r18	; 0x05
     3c4:	6d 81       	ldd	r22, Y+5	; 0x05
     3c6:	7e 81       	ldd	r23, Y+6	; 0x06
     3c8:	61 30       	cpi	r22, 0x01	; 1
     3ca:	71 05       	cpc	r23, r1
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <DIO_enuSetPINDir+0x46>
     3ce:	41 c0       	rjmp	.+130    	; 0x452 <DIO_enuSetPINDir+0xc8>
     3d0:	8d 81       	ldd	r24, Y+5	; 0x05
     3d2:	9e 81       	ldd	r25, Y+6	; 0x06
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	91 05       	cpc	r25, r1
     3d8:	34 f4       	brge	.+12     	; 0x3e6 <DIO_enuSetPINDir+0x5c>
     3da:	2d 81       	ldd	r18, Y+5	; 0x05
     3dc:	3e 81       	ldd	r19, Y+6	; 0x06
     3de:	21 15       	cp	r18, r1
     3e0:	31 05       	cpc	r19, r1
     3e2:	71 f0       	breq	.+28     	; 0x400 <DIO_enuSetPINDir+0x76>
     3e4:	b0 c0       	rjmp	.+352    	; 0x546 <DIO_enuSetPINDir+0x1bc>
     3e6:	6d 81       	ldd	r22, Y+5	; 0x05
     3e8:	7e 81       	ldd	r23, Y+6	; 0x06
     3ea:	62 30       	cpi	r22, 0x02	; 2
     3ec:	71 05       	cpc	r23, r1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <DIO_enuSetPINDir+0x68>
     3f0:	59 c0       	rjmp	.+178    	; 0x4a4 <DIO_enuSetPINDir+0x11a>
     3f2:	8d 81       	ldd	r24, Y+5	; 0x05
     3f4:	9e 81       	ldd	r25, Y+6	; 0x06
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	91 05       	cpc	r25, r1
     3fa:	09 f4       	brne	.+2      	; 0x3fe <DIO_enuSetPINDir+0x74>
     3fc:	7c c0       	rjmp	.+248    	; 0x4f6 <DIO_enuSetPINDir+0x16c>
     3fe:	a3 c0       	rjmp	.+326    	; 0x546 <DIO_enuSetPINDir+0x1bc>
			{
				case DIO_PORTA:
							DDRA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     400:	aa e3       	ldi	r26, 0x3A	; 58
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	ea e3       	ldi	r30, 0x3A	; 58
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	48 2f       	mov	r20, r24
     40c:	8b 81       	ldd	r24, Y+3	; 0x03
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_enuSetPINDir+0x92>
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	2a 95       	dec	r18
     41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_enuSetPINDir+0x8e>
     420:	80 95       	com	r24
     422:	84 23       	and	r24, r20
     424:	8c 93       	st	X, r24
							DDRA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     426:	aa e3       	ldi	r26, 0x3A	; 58
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	ea e3       	ldi	r30, 0x3A	; 58
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	48 2f       	mov	r20, r24
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	28 2f       	mov	r18, r24
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	88 2f       	mov	r24, r24
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	b9 01       	movw	r22, r18
     440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_enuSetPINDir+0xbc>
     442:	66 0f       	add	r22, r22
     444:	77 1f       	adc	r23, r23
     446:	8a 95       	dec	r24
     448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_enuSetPINDir+0xb8>
     44a:	cb 01       	movw	r24, r22
     44c:	84 2b       	or	r24, r20
     44e:	8c 93       	st	X, r24
     450:	7a c0       	rjmp	.+244    	; 0x546 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTB:
							DDRB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     452:	a7 e3       	ldi	r26, 0x37	; 55
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	e7 e3       	ldi	r30, 0x37	; 55
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	48 2f       	mov	r20, r24
     45e:	8b 81       	ldd	r24, Y+3	; 0x03
     460:	28 2f       	mov	r18, r24
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_enuSetPINDir+0xe4>
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	2a 95       	dec	r18
     470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_enuSetPINDir+0xe0>
     472:	80 95       	com	r24
     474:	84 23       	and	r24, r20
     476:	8c 93       	st	X, r24
							DDRB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     478:	a7 e3       	ldi	r26, 0x37	; 55
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	e7 e3       	ldi	r30, 0x37	; 55
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	48 2f       	mov	r20, r24
     484:	8c 81       	ldd	r24, Y+4	; 0x04
     486:	28 2f       	mov	r18, r24
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	8b 81       	ldd	r24, Y+3	; 0x03
     48c:	88 2f       	mov	r24, r24
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	b9 01       	movw	r22, r18
     492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_enuSetPINDir+0x10e>
     494:	66 0f       	add	r22, r22
     496:	77 1f       	adc	r23, r23
     498:	8a 95       	dec	r24
     49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_enuSetPINDir+0x10a>
     49c:	cb 01       	movw	r24, r22
     49e:	84 2b       	or	r24, r20
     4a0:	8c 93       	st	X, r24
     4a2:	51 c0       	rjmp	.+162    	; 0x546 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTC:
							DDRC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     4a4:	a4 e3       	ldi	r26, 0x34	; 52
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e4 e3       	ldi	r30, 0x34	; 52
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	48 2f       	mov	r20, r24
     4b0:	8b 81       	ldd	r24, Y+3	; 0x03
     4b2:	28 2f       	mov	r18, r24
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_enuSetPINDir+0x136>
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	2a 95       	dec	r18
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_enuSetPINDir+0x132>
     4c4:	80 95       	com	r24
     4c6:	84 23       	and	r24, r20
     4c8:	8c 93       	st	X, r24
							DDRC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     4ca:	a4 e3       	ldi	r26, 0x34	; 52
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	e4 e3       	ldi	r30, 0x34	; 52
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	48 2f       	mov	r20, r24
     4d6:	8c 81       	ldd	r24, Y+4	; 0x04
     4d8:	28 2f       	mov	r18, r24
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	8b 81       	ldd	r24, Y+3	; 0x03
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	b9 01       	movw	r22, r18
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_enuSetPINDir+0x160>
     4e6:	66 0f       	add	r22, r22
     4e8:	77 1f       	adc	r23, r23
     4ea:	8a 95       	dec	r24
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_enuSetPINDir+0x15c>
     4ee:	cb 01       	movw	r24, r22
     4f0:	84 2b       	or	r24, r20
     4f2:	8c 93       	st	X, r24
     4f4:	28 c0       	rjmp	.+80     	; 0x546 <DIO_enuSetPINDir+0x1bc>
							break;
				case DIO_PORTD:
							DDRD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     4f6:	a1 e3       	ldi	r26, 0x31	; 49
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	e1 e3       	ldi	r30, 0x31	; 49
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	48 2f       	mov	r20, r24
     502:	8b 81       	ldd	r24, Y+3	; 0x03
     504:	28 2f       	mov	r18, r24
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_enuSetPINDir+0x188>
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	2a 95       	dec	r18
     514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_enuSetPINDir+0x184>
     516:	80 95       	com	r24
     518:	84 23       	and	r24, r20
     51a:	8c 93       	st	X, r24
							DDRD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     51c:	a1 e3       	ldi	r26, 0x31	; 49
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	e1 e3       	ldi	r30, 0x31	; 49
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	48 2f       	mov	r20, r24
     528:	8c 81       	ldd	r24, Y+4	; 0x04
     52a:	28 2f       	mov	r18, r24
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	88 2f       	mov	r24, r24
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	b9 01       	movw	r22, r18
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_enuSetPINDir+0x1b2>
     538:	66 0f       	add	r22, r22
     53a:	77 1f       	adc	r23, r23
     53c:	8a 95       	dec	r24
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_enuSetPINDir+0x1ae>
     540:	cb 01       	movw	r24, r22
     542:	84 2b       	or	r24, r20
     544:	8c 93       	st	X, r24
							break;
			}
			Local_enuErrorStates = ES_OK;
     546:	19 82       	std	Y+1, r1	; 0x01
     548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_enuSetPINDir+0x1c4>
	}
	else
	{
		Local_enuErrorStates = ES_Out_Of_Range;
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
}
     550:	26 96       	adiw	r28, 0x06	; 6
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	cf 91       	pop	r28
     55e:	df 91       	pop	r29
     560:	08 95       	ret

00000562 <DIO_enuSetPINVAL>:
ES_t DIO_enuSetPINVAL(u8 Copy_u8PortID ,u8 Copy_u8PINID,u8 Copy_u8PINVAL)
{
     562:	df 93       	push	r29
     564:	cf 93       	push	r28
     566:	00 d0       	rcall	.+0      	; 0x568 <DIO_enuSetPINVAL+0x6>
     568:	00 d0       	rcall	.+0      	; 0x56a <DIO_enuSetPINVAL+0x8>
     56a:	00 d0       	rcall	.+0      	; 0x56c <DIO_enuSetPINVAL+0xa>
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	8a 83       	std	Y+2, r24	; 0x02
     572:	6b 83       	std	Y+3, r22	; 0x03
     574:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7 && Copy_u8PINVAL<=OUTPUT)
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	84 30       	cpi	r24, 0x04	; 4
     57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_enuSetPINVAL+0x20>
     580:	d0 c0       	rjmp	.+416    	; 0x722 <DIO_enuSetPINVAL+0x1c0>
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	88 30       	cpi	r24, 0x08	; 8
     586:	08 f0       	brcs	.+2      	; 0x58a <DIO_enuSetPINVAL+0x28>
     588:	cc c0       	rjmp	.+408    	; 0x722 <DIO_enuSetPINVAL+0x1c0>
     58a:	8c 81       	ldd	r24, Y+4	; 0x04
     58c:	82 30       	cpi	r24, 0x02	; 2
     58e:	08 f0       	brcs	.+2      	; 0x592 <DIO_enuSetPINVAL+0x30>
     590:	c8 c0       	rjmp	.+400    	; 0x722 <DIO_enuSetPINVAL+0x1c0>
		{

				switch(Copy_u8PortID)
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	28 2f       	mov	r18, r24
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	3e 83       	std	Y+6, r19	; 0x06
     59a:	2d 83       	std	Y+5, r18	; 0x05
     59c:	6d 81       	ldd	r22, Y+5	; 0x05
     59e:	7e 81       	ldd	r23, Y+6	; 0x06
     5a0:	61 30       	cpi	r22, 0x01	; 1
     5a2:	71 05       	cpc	r23, r1
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <DIO_enuSetPINVAL+0x46>
     5a6:	41 c0       	rjmp	.+130    	; 0x62a <DIO_enuSetPINVAL+0xc8>
     5a8:	8d 81       	ldd	r24, Y+5	; 0x05
     5aa:	9e 81       	ldd	r25, Y+6	; 0x06
     5ac:	82 30       	cpi	r24, 0x02	; 2
     5ae:	91 05       	cpc	r25, r1
     5b0:	34 f4       	brge	.+12     	; 0x5be <DIO_enuSetPINVAL+0x5c>
     5b2:	2d 81       	ldd	r18, Y+5	; 0x05
     5b4:	3e 81       	ldd	r19, Y+6	; 0x06
     5b6:	21 15       	cp	r18, r1
     5b8:	31 05       	cpc	r19, r1
     5ba:	71 f0       	breq	.+28     	; 0x5d8 <DIO_enuSetPINVAL+0x76>
     5bc:	b0 c0       	rjmp	.+352    	; 0x71e <DIO_enuSetPINVAL+0x1bc>
     5be:	6d 81       	ldd	r22, Y+5	; 0x05
     5c0:	7e 81       	ldd	r23, Y+6	; 0x06
     5c2:	62 30       	cpi	r22, 0x02	; 2
     5c4:	71 05       	cpc	r23, r1
     5c6:	09 f4       	brne	.+2      	; 0x5ca <DIO_enuSetPINVAL+0x68>
     5c8:	59 c0       	rjmp	.+178    	; 0x67c <DIO_enuSetPINVAL+0x11a>
     5ca:	8d 81       	ldd	r24, Y+5	; 0x05
     5cc:	9e 81       	ldd	r25, Y+6	; 0x06
     5ce:	83 30       	cpi	r24, 0x03	; 3
     5d0:	91 05       	cpc	r25, r1
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <DIO_enuSetPINVAL+0x74>
     5d4:	7c c0       	rjmp	.+248    	; 0x6ce <DIO_enuSetPINVAL+0x16c>
     5d6:	a3 c0       	rjmp	.+326    	; 0x71e <DIO_enuSetPINVAL+0x1bc>
				{
					case DIO_PORTA:
								PORTA &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     5d8:	ab e3       	ldi	r26, 0x3B	; 59
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	eb e3       	ldi	r30, 0x3B	; 59
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	48 2f       	mov	r20, r24
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	28 2f       	mov	r18, r24
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_enuSetPINVAL+0x92>
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	2a 95       	dec	r18
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_enuSetPINVAL+0x8e>
     5f8:	80 95       	com	r24
     5fa:	84 23       	and	r24, r20
     5fc:	8c 93       	st	X, r24
								PORTA |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     5fe:	ab e3       	ldi	r26, 0x3B	; 59
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	eb e3       	ldi	r30, 0x3B	; 59
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	48 2f       	mov	r20, r24
     60a:	8c 81       	ldd	r24, Y+4	; 0x04
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	88 2f       	mov	r24, r24
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	b9 01       	movw	r22, r18
     618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_enuSetPINVAL+0xbc>
     61a:	66 0f       	add	r22, r22
     61c:	77 1f       	adc	r23, r23
     61e:	8a 95       	dec	r24
     620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_enuSetPINVAL+0xb8>
     622:	cb 01       	movw	r24, r22
     624:	84 2b       	or	r24, r20
     626:	8c 93       	st	X, r24
     628:	7a c0       	rjmp	.+244    	; 0x71e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTB:
								PORTB &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     62a:	a8 e3       	ldi	r26, 0x38	; 56
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	e8 e3       	ldi	r30, 0x38	; 56
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	48 2f       	mov	r20, r24
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	28 2f       	mov	r18, r24
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_enuSetPINVAL+0xe4>
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	2a 95       	dec	r18
     648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_enuSetPINVAL+0xe0>
     64a:	80 95       	com	r24
     64c:	84 23       	and	r24, r20
     64e:	8c 93       	st	X, r24
								PORTB |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     650:	a8 e3       	ldi	r26, 0x38	; 56
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	e8 e3       	ldi	r30, 0x38	; 56
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	48 2f       	mov	r20, r24
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	28 2f       	mov	r18, r24
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	88 2f       	mov	r24, r24
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	b9 01       	movw	r22, r18
     66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_enuSetPINVAL+0x10e>
     66c:	66 0f       	add	r22, r22
     66e:	77 1f       	adc	r23, r23
     670:	8a 95       	dec	r24
     672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_enuSetPINVAL+0x10a>
     674:	cb 01       	movw	r24, r22
     676:	84 2b       	or	r24, r20
     678:	8c 93       	st	X, r24
     67a:	51 c0       	rjmp	.+162    	; 0x71e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTC:
								PORTC &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     67c:	a5 e3       	ldi	r26, 0x35	; 53
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	e5 e3       	ldi	r30, 0x35	; 53
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	48 2f       	mov	r20, r24
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	28 2f       	mov	r18, r24
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_enuSetPINVAL+0x136>
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	2a 95       	dec	r18
     69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_enuSetPINVAL+0x132>
     69c:	80 95       	com	r24
     69e:	84 23       	and	r24, r20
     6a0:	8c 93       	st	X, r24
								PORTC |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     6a2:	a5 e3       	ldi	r26, 0x35	; 53
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	e5 e3       	ldi	r30, 0x35	; 53
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	48 2f       	mov	r20, r24
     6ae:	8c 81       	ldd	r24, Y+4	; 0x04
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	b9 01       	movw	r22, r18
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_enuSetPINVAL+0x160>
     6be:	66 0f       	add	r22, r22
     6c0:	77 1f       	adc	r23, r23
     6c2:	8a 95       	dec	r24
     6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_enuSetPINVAL+0x15c>
     6c6:	cb 01       	movw	r24, r22
     6c8:	84 2b       	or	r24, r20
     6ca:	8c 93       	st	X, r24
     6cc:	28 c0       	rjmp	.+80     	; 0x71e <DIO_enuSetPINVAL+0x1bc>
								break;
					case DIO_PORTD:
								PORTD &= ~(DIO_MASK_BIT<<Copy_u8PINID);
     6ce:	a2 e3       	ldi	r26, 0x32	; 50
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	e2 e3       	ldi	r30, 0x32	; 50
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	48 2f       	mov	r20, r24
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	28 2f       	mov	r18, r24
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_enuSetPINVAL+0x188>
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	2a 95       	dec	r18
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_enuSetPINVAL+0x184>
     6ee:	80 95       	com	r24
     6f0:	84 23       	and	r24, r20
     6f2:	8c 93       	st	X, r24
								PORTD |= (Copy_u8PINVAL<<Copy_u8PINID) ;
     6f4:	a2 e3       	ldi	r26, 0x32	; 50
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e2 e3       	ldi	r30, 0x32	; 50
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	48 2f       	mov	r20, r24
     700:	8c 81       	ldd	r24, Y+4	; 0x04
     702:	28 2f       	mov	r18, r24
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	b9 01       	movw	r22, r18
     70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_enuSetPINVAL+0x1b2>
     710:	66 0f       	add	r22, r22
     712:	77 1f       	adc	r23, r23
     714:	8a 95       	dec	r24
     716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_enuSetPINVAL+0x1ae>
     718:	cb 01       	movw	r24, r22
     71a:	84 2b       	or	r24, r20
     71c:	8c 93       	st	X, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_enuSetPINVAL+0x1c4>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorStates;
     726:	89 81       	ldd	r24, Y+1	; 0x01
}
     728:	26 96       	adiw	r28, 0x06	; 6
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	08 95       	ret

0000073a <DIO_enuToggelPIN>:
ES_t DIO_enuToggelPIN(u8 Copy_u8PortID,u8 Copy_u8PINID)
{
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	00 d0       	rcall	.+0      	; 0x740 <DIO_enuToggelPIN+0x6>
     740:	00 d0       	rcall	.+0      	; 0x742 <DIO_enuToggelPIN+0x8>
     742:	0f 92       	push	r0
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	8a 83       	std	Y+2, r24	; 0x02
     74a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
     750:	8a 81       	ldd	r24, Y+2	; 0x02
     752:	84 30       	cpi	r24, 0x04	; 4
     754:	08 f0       	brcs	.+2      	; 0x758 <DIO_enuToggelPIN+0x1e>
     756:	74 c0       	rjmp	.+232    	; 0x840 <DIO_enuToggelPIN+0x106>
     758:	8b 81       	ldd	r24, Y+3	; 0x03
     75a:	88 30       	cpi	r24, 0x08	; 8
     75c:	08 f0       	brcs	.+2      	; 0x760 <DIO_enuToggelPIN+0x26>
     75e:	70 c0       	rjmp	.+224    	; 0x840 <DIO_enuToggelPIN+0x106>
			{

					switch(Copy_u8PortID)
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	28 2f       	mov	r18, r24
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	3d 83       	std	Y+5, r19	; 0x05
     768:	2c 83       	std	Y+4, r18	; 0x04
     76a:	8c 81       	ldd	r24, Y+4	; 0x04
     76c:	9d 81       	ldd	r25, Y+5	; 0x05
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	91 05       	cpc	r25, r1
     772:	49 f1       	breq	.+82     	; 0x7c6 <DIO_enuToggelPIN+0x8c>
     774:	2c 81       	ldd	r18, Y+4	; 0x04
     776:	3d 81       	ldd	r19, Y+5	; 0x05
     778:	22 30       	cpi	r18, 0x02	; 2
     77a:	31 05       	cpc	r19, r1
     77c:	2c f4       	brge	.+10     	; 0x788 <DIO_enuToggelPIN+0x4e>
     77e:	8c 81       	ldd	r24, Y+4	; 0x04
     780:	9d 81       	ldd	r25, Y+5	; 0x05
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	61 f0       	breq	.+24     	; 0x79e <DIO_enuToggelPIN+0x64>
     786:	5a c0       	rjmp	.+180    	; 0x83c <DIO_enuToggelPIN+0x102>
     788:	2c 81       	ldd	r18, Y+4	; 0x04
     78a:	3d 81       	ldd	r19, Y+5	; 0x05
     78c:	22 30       	cpi	r18, 0x02	; 2
     78e:	31 05       	cpc	r19, r1
     790:	71 f1       	breq	.+92     	; 0x7ee <DIO_enuToggelPIN+0xb4>
     792:	8c 81       	ldd	r24, Y+4	; 0x04
     794:	9d 81       	ldd	r25, Y+5	; 0x05
     796:	83 30       	cpi	r24, 0x03	; 3
     798:	91 05       	cpc	r25, r1
     79a:	e9 f1       	breq	.+122    	; 0x816 <DIO_enuToggelPIN+0xdc>
     79c:	4f c0       	rjmp	.+158    	; 0x83c <DIO_enuToggelPIN+0x102>
					{
						case DIO_PORTA:
									PORTA ^=(DIO_MASK_BIT<<Copy_u8PINID);
     79e:	ab e3       	ldi	r26, 0x3B	; 59
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	eb e3       	ldi	r30, 0x3B	; 59
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	48 2f       	mov	r20, r24
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	28 2f       	mov	r18, r24
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	02 2e       	mov	r0, r18
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_enuToggelPIN+0x82>
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	0a 94       	dec	r0
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_enuToggelPIN+0x7e>
     7c0:	84 27       	eor	r24, r20
     7c2:	8c 93       	st	X, r24
     7c4:	3b c0       	rjmp	.+118    	; 0x83c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTB:
									PORTB ^=(DIO_MASK_BIT<<Copy_u8PINID);
     7c6:	a8 e3       	ldi	r26, 0x38	; 56
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e8 e3       	ldi	r30, 0x38	; 56
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	48 2f       	mov	r20, r24
     7d2:	8b 81       	ldd	r24, Y+3	; 0x03
     7d4:	28 2f       	mov	r18, r24
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 2e       	mov	r0, r18
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_enuToggelPIN+0xaa>
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	0a 94       	dec	r0
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_enuToggelPIN+0xa6>
     7e8:	84 27       	eor	r24, r20
     7ea:	8c 93       	st	X, r24
     7ec:	27 c0       	rjmp	.+78     	; 0x83c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTC:
									PORTC ^=(DIO_MASK_BIT<<Copy_u8PINID);
     7ee:	a5 e3       	ldi	r26, 0x35	; 53
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	e5 e3       	ldi	r30, 0x35	; 53
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	48 2f       	mov	r20, r24
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	28 2f       	mov	r18, r24
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	02 2e       	mov	r0, r18
     806:	02 c0       	rjmp	.+4      	; 0x80c <DIO_enuToggelPIN+0xd2>
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	0a 94       	dec	r0
     80e:	e2 f7       	brpl	.-8      	; 0x808 <DIO_enuToggelPIN+0xce>
     810:	84 27       	eor	r24, r20
     812:	8c 93       	st	X, r24
     814:	13 c0       	rjmp	.+38     	; 0x83c <DIO_enuToggelPIN+0x102>
									break;
						case DIO_PORTD:
									PORTD ^=(DIO_MASK_BIT<<Copy_u8PINID);
     816:	a2 e3       	ldi	r26, 0x32	; 50
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e2 e3       	ldi	r30, 0x32	; 50
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	48 2f       	mov	r20, r24
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	28 2f       	mov	r18, r24
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	02 2e       	mov	r0, r18
     82e:	02 c0       	rjmp	.+4      	; 0x834 <DIO_enuToggelPIN+0xfa>
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	0a 94       	dec	r0
     836:	e2 f7       	brpl	.-8      	; 0x830 <DIO_enuToggelPIN+0xf6>
     838:	84 27       	eor	r24, r20
     83a:	8c 93       	st	X, r24
									break;
					}
					Local_enuErrorStates = ES_OK;
     83c:	19 82       	std	Y+1, r1	; 0x01
     83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_enuToggelPIN+0x10a>
			}
			else
			{
				Local_enuErrorStates = ES_Out_Of_Range;
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorStates;
     844:	89 81       	ldd	r24, Y+1	; 0x01
}
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	cf 91       	pop	r28
     852:	df 91       	pop	r29
     854:	08 95       	ret

00000856 <DIO_enuGetPINVAL>:
ES_t DIO_enuGetPINVAL(u8 Copy_u8PortID,u8 Copy_u8PINID,u8 * Copy_Pu8Value)
{
     856:	df 93       	push	r29
     858:	cf 93       	push	r28
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	27 97       	sbiw	r28, 0x07	; 7
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	8a 83       	std	Y+2, r24	; 0x02
     86c:	6b 83       	std	Y+3, r22	; 0x03
     86e:	5d 83       	std	Y+5, r21	; 0x05
     870:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8Value)
     876:	8c 81       	ldd	r24, Y+4	; 0x04
     878:	9d 81       	ldd	r25, Y+5	; 0x05
     87a:	00 97       	sbiw	r24, 0x00	; 0
     87c:	09 f4       	brne	.+2      	; 0x880 <__stack+0x21>
     87e:	7d c0       	rjmp	.+250    	; 0x97a <__stack+0x11b>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PINID <= DIO_PIN7)
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	84 30       	cpi	r24, 0x04	; 4
     884:	08 f0       	brcs	.+2      	; 0x888 <__stack+0x29>
     886:	76 c0       	rjmp	.+236    	; 0x974 <__stack+0x115>
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	88 30       	cpi	r24, 0x08	; 8
     88c:	08 f0       	brcs	.+2      	; 0x890 <__stack+0x31>
     88e:	72 c0       	rjmp	.+228    	; 0x974 <__stack+0x115>
		{

				switch(Copy_u8PortID)
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	28 2f       	mov	r18, r24
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	3f 83       	std	Y+7, r19	; 0x07
     898:	2e 83       	std	Y+6, r18	; 0x06
     89a:	4e 81       	ldd	r20, Y+6	; 0x06
     89c:	5f 81       	ldd	r21, Y+7	; 0x07
     89e:	41 30       	cpi	r20, 0x01	; 1
     8a0:	51 05       	cpc	r21, r1
     8a2:	59 f1       	breq	.+86     	; 0x8fa <__stack+0x9b>
     8a4:	8e 81       	ldd	r24, Y+6	; 0x06
     8a6:	9f 81       	ldd	r25, Y+7	; 0x07
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	91 05       	cpc	r25, r1
     8ac:	34 f4       	brge	.+12     	; 0x8ba <__stack+0x5b>
     8ae:	2e 81       	ldd	r18, Y+6	; 0x06
     8b0:	3f 81       	ldd	r19, Y+7	; 0x07
     8b2:	21 15       	cp	r18, r1
     8b4:	31 05       	cpc	r19, r1
     8b6:	69 f0       	breq	.+26     	; 0x8d2 <__stack+0x73>
     8b8:	5b c0       	rjmp	.+182    	; 0x970 <__stack+0x111>
     8ba:	4e 81       	ldd	r20, Y+6	; 0x06
     8bc:	5f 81       	ldd	r21, Y+7	; 0x07
     8be:	42 30       	cpi	r20, 0x02	; 2
     8c0:	51 05       	cpc	r21, r1
     8c2:	79 f1       	breq	.+94     	; 0x922 <__stack+0xc3>
     8c4:	8e 81       	ldd	r24, Y+6	; 0x06
     8c6:	9f 81       	ldd	r25, Y+7	; 0x07
     8c8:	83 30       	cpi	r24, 0x03	; 3
     8ca:	91 05       	cpc	r25, r1
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <__stack+0x71>
     8ce:	3d c0       	rjmp	.+122    	; 0x94a <__stack+0xeb>
     8d0:	4f c0       	rjmp	.+158    	; 0x970 <__stack+0x111>
				{
					case DIO_PORTA:
						*Copy_Pu8Value = (PINA>>Copy_u8PINID)&DIO_MASK_BIT;
     8d2:	e9 e3       	ldi	r30, 0x39	; 57
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	28 2f       	mov	r18, r24
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a9 01       	movw	r20, r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
     8e6:	55 95       	asr	r21
     8e8:	47 95       	ror	r20
     8ea:	8a 95       	dec	r24
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
     8ee:	ca 01       	movw	r24, r20
     8f0:	81 70       	andi	r24, 0x01	; 1
     8f2:	ec 81       	ldd	r30, Y+4	; 0x04
     8f4:	fd 81       	ldd	r31, Y+5	; 0x05
     8f6:	80 83       	st	Z, r24
     8f8:	3b c0       	rjmp	.+118    	; 0x970 <__stack+0x111>
								break;
					case DIO_PORTB:
						*Copy_Pu8Value = (PINB>>Copy_u8PINID)&DIO_MASK_BIT;
     8fa:	e6 e3       	ldi	r30, 0x36	; 54
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	28 2f       	mov	r18, r24
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	a9 01       	movw	r20, r18
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0xb3>
     90e:	55 95       	asr	r21
     910:	47 95       	ror	r20
     912:	8a 95       	dec	r24
     914:	e2 f7       	brpl	.-8      	; 0x90e <__stack+0xaf>
     916:	ca 01       	movw	r24, r20
     918:	81 70       	andi	r24, 0x01	; 1
     91a:	ec 81       	ldd	r30, Y+4	; 0x04
     91c:	fd 81       	ldd	r31, Y+5	; 0x05
     91e:	80 83       	st	Z, r24
     920:	27 c0       	rjmp	.+78     	; 0x970 <__stack+0x111>
								break;
					case DIO_PORTC:
						*Copy_Pu8Value = (PINC>>Copy_u8PINID)&DIO_MASK_BIT;
     922:	e3 e3       	ldi	r30, 0x33	; 51
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	28 2f       	mov	r18, r24
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	8b 81       	ldd	r24, Y+3	; 0x03
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a9 01       	movw	r20, r18
     934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0xdb>
     936:	55 95       	asr	r21
     938:	47 95       	ror	r20
     93a:	8a 95       	dec	r24
     93c:	e2 f7       	brpl	.-8      	; 0x936 <__stack+0xd7>
     93e:	ca 01       	movw	r24, r20
     940:	81 70       	andi	r24, 0x01	; 1
     942:	ec 81       	ldd	r30, Y+4	; 0x04
     944:	fd 81       	ldd	r31, Y+5	; 0x05
     946:	80 83       	st	Z, r24
     948:	13 c0       	rjmp	.+38     	; 0x970 <__stack+0x111>
								break;
					case DIO_PORTD:
						*Copy_Pu8Value = (PIND>>Copy_u8PINID)&DIO_MASK_BIT;
     94a:	e0 e3       	ldi	r30, 0x30	; 48
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	28 2f       	mov	r18, r24
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	88 2f       	mov	r24, r24
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	a9 01       	movw	r20, r18
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x103>
     95e:	55 95       	asr	r21
     960:	47 95       	ror	r20
     962:	8a 95       	dec	r24
     964:	e2 f7       	brpl	.-8      	; 0x95e <__stack+0xff>
     966:	ca 01       	movw	r24, r20
     968:	81 70       	andi	r24, 0x01	; 1
     96a:	ec 81       	ldd	r30, Y+4	; 0x04
     96c:	fd 81       	ldd	r31, Y+5	; 0x05
     96e:	80 83       	st	Z, r24
								break;
				}
				Local_enuErrorStates = ES_OK;
     970:	19 82       	std	Y+1, r1	; 0x01
     972:	05 c0       	rjmp	.+10     	; 0x97e <__stack+0x11f>
		}
		else
		{
			Local_enuErrorStates = ES_Out_Of_Range;
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x11f>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULLPOINTER;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
     97e:	89 81       	ldd	r24, Y+1	; 0x01
}
     980:	27 96       	adiw	r28, 0x07	; 7
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	08 95       	ret

00000992 <EXTI_enuInit>:
#include"interrupt.h"

static volatile void(*EXTI_APFunINIT[3])(void) = {NULL,NULL,NULL};

ES_t EXTI_enuInit(EXTI_t * Copy_pstrEXTIConfig)
{
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
     99a:	2c 97       	sbiw	r28, 0x0c	; 12
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pstrEXTIConfig)
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	9c 81       	ldd	r25, Y+4	; 0x04
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <EXTI_enuInit+0x26>
     9b6:	09 c1       	rjmp	.+530    	; 0xbca <EXTI_enuInit+0x238>
	{
		u8 Local_u8Iretator = 0;
     9b8:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iretator = 0;Local_u8Iretator<3;Local_u8Iretator++)
     9ba:	19 82       	std	Y+1, r1	; 0x01
     9bc:	01 c1       	rjmp	.+514    	; 0xbc0 <EXTI_enuInit+0x22e>
		{
			if(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8State == ACTIVE)
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	9c 01       	movw	r18, r24
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	fc 01       	movw	r30, r24
     9d0:	e2 0f       	add	r30, r18
     9d2:	f3 1f       	adc	r31, r19
     9d4:	80 81       	ld	r24, Z
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	09 f0       	breq	.+2      	; 0x9dc <EXTI_enuInit+0x4a>
     9da:	ef c0       	rjmp	.+478    	; 0xbba <EXTI_enuInit+0x228>
			{
				switch(Local_u8Iretator)
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	28 2f       	mov	r18, r24
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	3c 87       	std	Y+12, r19	; 0x0c
     9e4:	2b 87       	std	Y+11, r18	; 0x0b
     9e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	91 05       	cpc	r25, r1
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <EXTI_enuInit+0x60>
     9f0:	5f c0       	rjmp	.+190    	; 0xab0 <EXTI_enuInit+0x11e>
     9f2:	2b 85       	ldd	r18, Y+11	; 0x0b
     9f4:	3c 85       	ldd	r19, Y+12	; 0x0c
     9f6:	22 30       	cpi	r18, 0x02	; 2
     9f8:	31 05       	cpc	r19, r1
     9fa:	09 f4       	brne	.+2      	; 0x9fe <EXTI_enuInit+0x6c>
     9fc:	ad c0       	rjmp	.+346    	; 0xb58 <EXTI_enuInit+0x1c6>
     9fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     a00:	9c 85       	ldd	r25, Y+12	; 0x0c
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	09 f0       	breq	.+2      	; 0xa08 <EXTI_enuInit+0x76>
     a06:	d9 c0       	rjmp	.+434    	; 0xbba <EXTI_enuInit+0x228>
				{
				case 0:
					GICR|=(1<<6);
     a08:	ab e5       	ldi	r26, 0x5B	; 91
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	eb e5       	ldi	r30, 0x5B	; 91
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	80 64       	ori	r24, 0x40	; 64
     a14:	8c 93       	st	X, r24
					MCUCR&=~(3<<0);
     a16:	a5 e5       	ldi	r26, 0x55	; 85
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e5 e5       	ldi	r30, 0x55	; 85
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	8c 7f       	andi	r24, 0xFC	; 252
     a22:	8c 93       	st	X, r24
					switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	88 2f       	mov	r24, r24
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	9c 01       	movw	r18, r24
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	9c 81       	ldd	r25, Y+4	; 0x04
     a34:	fc 01       	movw	r30, r24
     a36:	e2 0f       	add	r30, r18
     a38:	f3 1f       	adc	r31, r19
     a3a:	81 81       	ldd	r24, Z+1	; 0x01
     a3c:	28 2f       	mov	r18, r24
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	3a 87       	std	Y+10, r19	; 0x0a
     a42:	29 87       	std	Y+9, r18	; 0x09
     a44:	89 85       	ldd	r24, Y+9	; 0x09
     a46:	9a 85       	ldd	r25, Y+10	; 0x0a
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	91 05       	cpc	r25, r1
     a4c:	f1 f0       	breq	.+60     	; 0xa8a <EXTI_enuInit+0xf8>
     a4e:	29 85       	ldd	r18, Y+9	; 0x09
     a50:	3a 85       	ldd	r19, Y+10	; 0x0a
     a52:	22 30       	cpi	r18, 0x02	; 2
     a54:	31 05       	cpc	r19, r1
     a56:	2c f4       	brge	.+10     	; 0xa62 <EXTI_enuInit+0xd0>
     a58:	89 85       	ldd	r24, Y+9	; 0x09
     a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	69 f0       	breq	.+26     	; 0xa7a <EXTI_enuInit+0xe8>
     a60:	24 c0       	rjmp	.+72     	; 0xaaa <EXTI_enuInit+0x118>
     a62:	29 85       	ldd	r18, Y+9	; 0x09
     a64:	3a 85       	ldd	r19, Y+10	; 0x0a
     a66:	22 30       	cpi	r18, 0x02	; 2
     a68:	31 05       	cpc	r19, r1
     a6a:	09 f4       	brne	.+2      	; 0xa6e <EXTI_enuInit+0xdc>
     a6c:	a6 c0       	rjmp	.+332    	; 0xbba <EXTI_enuInit+0x228>
     a6e:	89 85       	ldd	r24, Y+9	; 0x09
     a70:	9a 85       	ldd	r25, Y+10	; 0x0a
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	91 05       	cpc	r25, r1
     a76:	89 f0       	breq	.+34     	; 0xa9a <EXTI_enuInit+0x108>
     a78:	18 c0       	rjmp	.+48     	; 0xaaa <EXTI_enuInit+0x118>
					{
					case FALLING_EDGE:
						MCUCR|=(1<<1);
     a7a:	a5 e5       	ldi	r26, 0x55	; 85
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e5 e5       	ldi	r30, 0x55	; 85
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	82 60       	ori	r24, 0x02	; 2
     a86:	8c 93       	st	X, r24
     a88:	98 c0       	rjmp	.+304    	; 0xbba <EXTI_enuInit+0x228>
						break;
					case RISING_EDGE:
						MCUCR|=(3<<0);
     a8a:	a5 e5       	ldi	r26, 0x55	; 85
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e5 e5       	ldi	r30, 0x55	; 85
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	83 60       	ori	r24, 0x03	; 3
     a96:	8c 93       	st	X, r24
     a98:	90 c0       	rjmp	.+288    	; 0xbba <EXTI_enuInit+0x228>
						break;
					case ANY_LOGICAL_CHANGE:
						MCUCR|=(1<<0);
     a9a:	a5 e5       	ldi	r26, 0x55	; 85
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e5 e5       	ldi	r30, 0x55	; 85
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	81 60       	ori	r24, 0x01	; 1
     aa6:	8c 93       	st	X, r24
     aa8:	88 c0       	rjmp	.+272    	; 0xbba <EXTI_enuInit+0x228>
						break;
					case LOW_LEVEL:
						break;
					default:
						Local_enuErrorState = ES_Out_Of_Range;
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	8a 83       	std	Y+2, r24	; 0x02
     aae:	85 c0       	rjmp	.+266    	; 0xbba <EXTI_enuInit+0x228>
						break;
					}
					break;
					case 1:
						GICR|=(1<<7);
     ab0:	ab e5       	ldi	r26, 0x5B	; 91
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	eb e5       	ldi	r30, 0x5B	; 91
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	80 68       	ori	r24, 0x80	; 128
     abc:	8c 93       	st	X, r24
						MCUCR&=~(3<<2);
     abe:	a5 e5       	ldi	r26, 0x55	; 85
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	e5 e5       	ldi	r30, 0x55	; 85
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	83 7f       	andi	r24, 0xF3	; 243
     aca:	8c 93       	st	X, r24
						switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	9c 01       	movw	r18, r24
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	fc 01       	movw	r30, r24
     ade:	e2 0f       	add	r30, r18
     ae0:	f3 1f       	adc	r31, r19
     ae2:	81 81       	ldd	r24, Z+1	; 0x01
     ae4:	28 2f       	mov	r18, r24
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	38 87       	std	Y+8, r19	; 0x08
     aea:	2f 83       	std	Y+7, r18	; 0x07
     aec:	8f 81       	ldd	r24, Y+7	; 0x07
     aee:	98 85       	ldd	r25, Y+8	; 0x08
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	91 05       	cpc	r25, r1
     af4:	f1 f0       	breq	.+60     	; 0xb32 <EXTI_enuInit+0x1a0>
     af6:	2f 81       	ldd	r18, Y+7	; 0x07
     af8:	38 85       	ldd	r19, Y+8	; 0x08
     afa:	22 30       	cpi	r18, 0x02	; 2
     afc:	31 05       	cpc	r19, r1
     afe:	2c f4       	brge	.+10     	; 0xb0a <EXTI_enuInit+0x178>
     b00:	8f 81       	ldd	r24, Y+7	; 0x07
     b02:	98 85       	ldd	r25, Y+8	; 0x08
     b04:	00 97       	sbiw	r24, 0x00	; 0
     b06:	69 f0       	breq	.+26     	; 0xb22 <EXTI_enuInit+0x190>
     b08:	24 c0       	rjmp	.+72     	; 0xb52 <EXTI_enuInit+0x1c0>
     b0a:	2f 81       	ldd	r18, Y+7	; 0x07
     b0c:	38 85       	ldd	r19, Y+8	; 0x08
     b0e:	22 30       	cpi	r18, 0x02	; 2
     b10:	31 05       	cpc	r19, r1
     b12:	09 f4       	brne	.+2      	; 0xb16 <EXTI_enuInit+0x184>
     b14:	52 c0       	rjmp	.+164    	; 0xbba <EXTI_enuInit+0x228>
     b16:	8f 81       	ldd	r24, Y+7	; 0x07
     b18:	98 85       	ldd	r25, Y+8	; 0x08
     b1a:	83 30       	cpi	r24, 0x03	; 3
     b1c:	91 05       	cpc	r25, r1
     b1e:	89 f0       	breq	.+34     	; 0xb42 <EXTI_enuInit+0x1b0>
     b20:	18 c0       	rjmp	.+48     	; 0xb52 <EXTI_enuInit+0x1c0>
						{
						case FALLING_EDGE:
							MCUCR|=(1<<3);
     b22:	a5 e5       	ldi	r26, 0x55	; 85
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e5 e5       	ldi	r30, 0x55	; 85
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	88 60       	ori	r24, 0x08	; 8
     b2e:	8c 93       	st	X, r24
     b30:	44 c0       	rjmp	.+136    	; 0xbba <EXTI_enuInit+0x228>
							break;
						case RISING_EDGE:
							MCUCR|=(3<<2);
     b32:	a5 e5       	ldi	r26, 0x55	; 85
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e5 e5       	ldi	r30, 0x55	; 85
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	8c 60       	ori	r24, 0x0C	; 12
     b3e:	8c 93       	st	X, r24
     b40:	3c c0       	rjmp	.+120    	; 0xbba <EXTI_enuInit+0x228>
							break;
						case ANY_LOGICAL_CHANGE:
							MCUCR|=(1<<2);
     b42:	a5 e5       	ldi	r26, 0x55	; 85
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e5 e5       	ldi	r30, 0x55	; 85
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	84 60       	ori	r24, 0x04	; 4
     b4e:	8c 93       	st	X, r24
     b50:	34 c0       	rjmp	.+104    	; 0xbba <EXTI_enuInit+0x228>
							break;
						case LOW_LEVEL:
							break;
						default:
							Local_enuErrorState = ES_Out_Of_Range;
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	31 c0       	rjmp	.+98     	; 0xbba <EXTI_enuInit+0x228>
						}
						break;


						case 2:
							GICR|=(1<<5);
     b58:	ab e5       	ldi	r26, 0x5B	; 91
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	eb e5       	ldi	r30, 0x5B	; 91
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	80 62       	ori	r24, 0x20	; 32
     b64:	8c 93       	st	X, r24
							MCUCSR&=~(1<<6);
     b66:	a4 e5       	ldi	r26, 0x54	; 84
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e4 e5       	ldi	r30, 0x54	; 84
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8f 7b       	andi	r24, 0xBF	; 191
     b72:	8c 93       	st	X, r24
							switch(Copy_pstrEXTIConfig[Local_u8Iretator].EXTI_u8StenceLevel)
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	9c 01       	movw	r18, r24
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	fc 01       	movw	r30, r24
     b86:	e2 0f       	add	r30, r18
     b88:	f3 1f       	adc	r31, r19
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	3e 83       	std	Y+6, r19	; 0x06
     b92:	2d 83       	std	Y+5, r18	; 0x05
     b94:	8d 81       	ldd	r24, Y+5	; 0x05
     b96:	9e 81       	ldd	r25, Y+6	; 0x06
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	79 f0       	breq	.+30     	; 0xbba <EXTI_enuInit+0x228>
     b9c:	2d 81       	ldd	r18, Y+5	; 0x05
     b9e:	3e 81       	ldd	r19, Y+6	; 0x06
     ba0:	21 30       	cpi	r18, 0x01	; 1
     ba2:	31 05       	cpc	r19, r1
     ba4:	41 f4       	brne	.+16     	; 0xbb6 <EXTI_enuInit+0x224>
							{
							case FALLING_EDGE:
								break;
							case RISING_EDGE:
								MCUCSR|=(1<<6);
     ba6:	a4 e5       	ldi	r26, 0x54	; 84
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e4 e5       	ldi	r30, 0x54	; 84
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	80 64       	ori	r24, 0x40	; 64
     bb2:	8c 93       	st	X, r24
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <EXTI_enuInit+0x228>
								break;
							default:
								Local_enuErrorState = ES_Out_Of_Range;
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrEXTIConfig)
	{
		u8 Local_u8Iretator = 0;
		for(Local_u8Iretator = 0;Local_u8Iretator<3;Local_u8Iretator++)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	08 f4       	brcc	.+2      	; 0xbc8 <EXTI_enuInit+0x236>
     bc6:	fb ce       	rjmp	.-522    	; 0x9be <EXTI_enuInit+0x2c>
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <EXTI_enuInit+0x23c>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_enuErrorState;
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
}
     bd0:	2c 96       	adiw	r28, 0x0c	; 12
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <EXTI_enuSetSenceMode>:
ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceLevel)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	2b 97       	sbiw	r28, 0x0b	; 11
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	8a 83       	std	Y+2, r24	; 0x02
     bf8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTI_ID)
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	3b 87       	std	Y+11, r19	; 0x0b
     c06:	2a 87       	std	Y+10, r18	; 0x0a
     c08:	8a 85       	ldd	r24, Y+10	; 0x0a
     c0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <EXTI_enuSetSenceMode+0x32>
     c12:	4d c0       	rjmp	.+154    	; 0xcae <EXTI_enuSetSenceMode+0xcc>
     c14:	2a 85       	ldd	r18, Y+10	; 0x0a
     c16:	3b 85       	ldd	r19, Y+11	; 0x0b
     c18:	22 30       	cpi	r18, 0x02	; 2
     c1a:	31 05       	cpc	r19, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <EXTI_enuSetSenceMode+0x3e>
     c1e:	89 c0       	rjmp	.+274    	; 0xd32 <EXTI_enuSetSenceMode+0x150>
     c20:	8a 85       	ldd	r24, Y+10	; 0x0a
     c22:	9b 85       	ldd	r25, Y+11	; 0x0b
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	09 f0       	breq	.+2      	; 0xc2a <EXTI_enuSetSenceMode+0x48>
     c28:	a3 c0       	rjmp	.+326    	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
	{
	case 0:
		MCUCR&=~(3<<0);
     c2a:	a5 e5       	ldi	r26, 0x55	; 85
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e5 e5       	ldi	r30, 0x55	; 85
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	8c 7f       	andi	r24, 0xFC	; 252
     c36:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	39 87       	std	Y+9, r19	; 0x09
     c40:	28 87       	std	Y+8, r18	; 0x08
     c42:	88 85       	ldd	r24, Y+8	; 0x08
     c44:	99 85       	ldd	r25, Y+9	; 0x09
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	91 05       	cpc	r25, r1
     c4a:	f1 f0       	breq	.+60     	; 0xc88 <EXTI_enuSetSenceMode+0xa6>
     c4c:	28 85       	ldd	r18, Y+8	; 0x08
     c4e:	39 85       	ldd	r19, Y+9	; 0x09
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	31 05       	cpc	r19, r1
     c54:	2c f4       	brge	.+10     	; 0xc60 <EXTI_enuSetSenceMode+0x7e>
     c56:	88 85       	ldd	r24, Y+8	; 0x08
     c58:	99 85       	ldd	r25, Y+9	; 0x09
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	69 f0       	breq	.+26     	; 0xc78 <EXTI_enuSetSenceMode+0x96>
     c5e:	24 c0       	rjmp	.+72     	; 0xca8 <EXTI_enuSetSenceMode+0xc6>
     c60:	28 85       	ldd	r18, Y+8	; 0x08
     c62:	39 85       	ldd	r19, Y+9	; 0x09
     c64:	22 30       	cpi	r18, 0x02	; 2
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <EXTI_enuSetSenceMode+0x8a>
     c6a:	82 c0       	rjmp	.+260    	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
     c6c:	88 85       	ldd	r24, Y+8	; 0x08
     c6e:	99 85       	ldd	r25, Y+9	; 0x09
     c70:	83 30       	cpi	r24, 0x03	; 3
     c72:	91 05       	cpc	r25, r1
     c74:	89 f0       	breq	.+34     	; 0xc98 <EXTI_enuSetSenceMode+0xb6>
     c76:	18 c0       	rjmp	.+48     	; 0xca8 <EXTI_enuSetSenceMode+0xc6>
		{
		case FALLING_EDGE:
			MCUCR|=(1<<1);
     c78:	a5 e5       	ldi	r26, 0x55	; 85
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e5 e5       	ldi	r30, 0x55	; 85
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	82 60       	ori	r24, 0x02	; 2
     c84:	8c 93       	st	X, r24
     c86:	74 c0       	rjmp	.+232    	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case RISING_EDGE:
			MCUCR|=(3<<0);
     c88:	a5 e5       	ldi	r26, 0x55	; 85
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e5 e5       	ldi	r30, 0x55	; 85
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	83 60       	ori	r24, 0x03	; 3
     c94:	8c 93       	st	X, r24
     c96:	6c c0       	rjmp	.+216    	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case ANY_LOGICAL_CHANGE:
			MCUCR|=(1<<0);
     c98:	a5 e5       	ldi	r26, 0x55	; 85
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e5 e5       	ldi	r30, 0x55	; 85
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	8c 93       	st	X, r24
     ca6:	64 c0       	rjmp	.+200    	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case LOW_LEVEL:
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	61 c0       	rjmp	.+194    	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		}
		break;
	case 1:
		MCUCR&=~(3<<2);
     cae:	a5 e5       	ldi	r26, 0x55	; 85
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e5 e5       	ldi	r30, 0x55	; 85
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	83 7f       	andi	r24, 0xF3	; 243
     cba:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	3f 83       	std	Y+7, r19	; 0x07
     cc4:	2e 83       	std	Y+6, r18	; 0x06
     cc6:	8e 81       	ldd	r24, Y+6	; 0x06
     cc8:	9f 81       	ldd	r25, Y+7	; 0x07
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	91 05       	cpc	r25, r1
     cce:	f1 f0       	breq	.+60     	; 0xd0c <EXTI_enuSetSenceMode+0x12a>
     cd0:	2e 81       	ldd	r18, Y+6	; 0x06
     cd2:	3f 81       	ldd	r19, Y+7	; 0x07
     cd4:	22 30       	cpi	r18, 0x02	; 2
     cd6:	31 05       	cpc	r19, r1
     cd8:	2c f4       	brge	.+10     	; 0xce4 <EXTI_enuSetSenceMode+0x102>
     cda:	8e 81       	ldd	r24, Y+6	; 0x06
     cdc:	9f 81       	ldd	r25, Y+7	; 0x07
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	69 f0       	breq	.+26     	; 0xcfc <EXTI_enuSetSenceMode+0x11a>
     ce2:	24 c0       	rjmp	.+72     	; 0xd2c <EXTI_enuSetSenceMode+0x14a>
     ce4:	2e 81       	ldd	r18, Y+6	; 0x06
     ce6:	3f 81       	ldd	r19, Y+7	; 0x07
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <EXTI_enuSetSenceMode+0x10e>
     cee:	40 c0       	rjmp	.+128    	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
     cf0:	8e 81       	ldd	r24, Y+6	; 0x06
     cf2:	9f 81       	ldd	r25, Y+7	; 0x07
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	91 05       	cpc	r25, r1
     cf8:	89 f0       	breq	.+34     	; 0xd1c <EXTI_enuSetSenceMode+0x13a>
     cfa:	18 c0       	rjmp	.+48     	; 0xd2c <EXTI_enuSetSenceMode+0x14a>
		{
		case FALLING_EDGE:
			MCUCR|=(1<<3);
     cfc:	a5 e5       	ldi	r26, 0x55	; 85
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e5 e5       	ldi	r30, 0x55	; 85
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	88 60       	ori	r24, 0x08	; 8
     d08:	8c 93       	st	X, r24
     d0a:	32 c0       	rjmp	.+100    	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case RISING_EDGE:
			MCUCR|=(3<<2);
     d0c:	a5 e5       	ldi	r26, 0x55	; 85
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e5 e5       	ldi	r30, 0x55	; 85
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8c 60       	ori	r24, 0x0C	; 12
     d18:	8c 93       	st	X, r24
     d1a:	2a c0       	rjmp	.+84     	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case ANY_LOGICAL_CHANGE:
			MCUCR|=(1<<2);
     d1c:	a5 e5       	ldi	r26, 0x55	; 85
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e5 e5       	ldi	r30, 0x55	; 85
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	84 60       	ori	r24, 0x04	; 4
     d28:	8c 93       	st	X, r24
     d2a:	22 c0       	rjmp	.+68     	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		case LOW_LEVEL:
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	1f c0       	rjmp	.+62     	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		}
		break;
	case 2:
		MCUCSR&=~(1<<6);
     d32:	a4 e5       	ldi	r26, 0x54	; 84
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e4 e5       	ldi	r30, 0x54	; 84
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7b       	andi	r24, 0xBF	; 191
     d3e:	8c 93       	st	X, r24
		switch(Copy_u8SenceLevel)
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	79 f0       	breq	.+30     	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
     d52:	2c 81       	ldd	r18, Y+4	; 0x04
     d54:	3d 81       	ldd	r19, Y+5	; 0x05
     d56:	21 30       	cpi	r18, 0x01	; 1
     d58:	31 05       	cpc	r19, r1
     d5a:	41 f4       	brne	.+16     	; 0xd6c <EXTI_enuSetSenceMode+0x18a>
		{
		case FALLING_EDGE:
			break;
		case RISING_EDGE:
			MCUCSR|=(1<<6);
     d5c:	a4 e5       	ldi	r26, 0x54	; 84
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e4 e5       	ldi	r30, 0x54	; 84
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 64       	ori	r24, 0x40	; 64
     d68:	8c 93       	st	X, r24
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <EXTI_enuSetSenceMode+0x18e>
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		break;
	}

return Local_enuErrorState;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
}
     d72:	2b 96       	adiw	r28, 0x0b	; 11
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <EXTI_enuEnableINT>:
ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <EXTI_enuEnableINT+0x6>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <EXTI_enuEnableINT+0x8>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8EXTI_ID)
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3c 83       	std	Y+4, r19	; 0x04
     d9e:	2b 83       	std	Y+3, r18	; 0x03
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	89 f0       	breq	.+34     	; 0xdcc <EXTI_enuEnableINT+0x48>
     daa:	2b 81       	ldd	r18, Y+3	; 0x03
     dac:	3c 81       	ldd	r19, Y+4	; 0x04
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	a1 f0       	breq	.+40     	; 0xddc <EXTI_enuEnableINT+0x58>
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	c1 f4       	brne	.+48     	; 0xdec <EXTI_enuEnableINT+0x68>
	{
	case 0:
		GICR|=(1<<6);
     dbc:	ab e5       	ldi	r26, 0x5B	; 91
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	eb e5       	ldi	r30, 0x5B	; 91
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 64       	ori	r24, 0x40	; 64
     dc8:	8c 93       	st	X, r24
     dca:	12 c0       	rjmp	.+36     	; 0xdf0 <EXTI_enuEnableINT+0x6c>
		break;
	case 1:
		GICR|=(1<<7);
     dcc:	ab e5       	ldi	r26, 0x5B	; 91
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	eb e5       	ldi	r30, 0x5B	; 91
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 68       	ori	r24, 0x80	; 128
     dd8:	8c 93       	st	X, r24
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <EXTI_enuEnableINT+0x6c>
		break;
	case 2:
		GICR|=(1<<5);
     ddc:	ab e5       	ldi	r26, 0x5B	; 91
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	eb e5       	ldi	r30, 0x5B	; 91
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 62       	ori	r24, 0x20	; 32
     de8:	8c 93       	st	X, r24
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <EXTI_enuEnableINT+0x6c>
		break;
	default:
		Local_enuErrorState = ES_Out_Of_Range;
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

return Local_enuErrorState;
     df0:	89 81       	ldd	r24, Y+1	; 0x01
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <EXTI_enuDisableINT>:
ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <EXTI_enuDisableINT+0x6>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <EXTI_enuDisableINT+0x8>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTI_ID)
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	3c 83       	std	Y+4, r19	; 0x04
     e1a:	2b 83       	std	Y+3, r18	; 0x03
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	91 05       	cpc	r25, r1
     e24:	89 f0       	breq	.+34     	; 0xe48 <EXTI_enuDisableINT+0x48>
     e26:	2b 81       	ldd	r18, Y+3	; 0x03
     e28:	3c 81       	ldd	r19, Y+4	; 0x04
     e2a:	22 30       	cpi	r18, 0x02	; 2
     e2c:	31 05       	cpc	r19, r1
     e2e:	a1 f0       	breq	.+40     	; 0xe58 <EXTI_enuDisableINT+0x58>
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	c1 f4       	brne	.+48     	; 0xe68 <EXTI_enuDisableINT+0x68>
		{
		case 0:
			GICR&=~(1<<6);
     e38:	ab e5       	ldi	r26, 0x5B	; 91
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	eb e5       	ldi	r30, 0x5B	; 91
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8f 7b       	andi	r24, 0xBF	; 191
     e44:	8c 93       	st	X, r24
     e46:	12 c0       	rjmp	.+36     	; 0xe6c <EXTI_enuDisableINT+0x6c>
			break;
		case 1:
			GICR&=~(1<<7);
     e48:	ab e5       	ldi	r26, 0x5B	; 91
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	eb e5       	ldi	r30, 0x5B	; 91
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8f 77       	andi	r24, 0x7F	; 127
     e54:	8c 93       	st	X, r24
     e56:	0a c0       	rjmp	.+20     	; 0xe6c <EXTI_enuDisableINT+0x6c>
			break;
		case 2:
			GICR&=~(1<<5);
     e58:	ab e5       	ldi	r26, 0x5B	; 91
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	eb e5       	ldi	r30, 0x5B	; 91
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 7d       	andi	r24, 0xDF	; 223
     e64:	8c 93       	st	X, r24
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <EXTI_enuDisableINT+0x6c>
			break;
		default:
			Local_enuErrorState = ES_Out_Of_Range;
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_enuErrorState;
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <EXTI_enuCallBackF>:

ES_t EXTI_enuCallBackF(void(*Copy_PFunApp)(void),u8 Copy_u8EXTI_ID)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <EXTI_enuCallBackF+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <EXTI_enuCallBackF+0x8>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9b 83       	std	Y+3, r25	; 0x03
     e8a:	8a 83       	std	Y+2, r24	; 0x02
     e8c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_PFunApp)
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	9b 81       	ldd	r25, Y+3	; 0x03
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	99 f0       	breq	.+38     	; 0xec0 <EXTI_enuCallBackF+0x44>
	{
		if(Copy_u8EXTI_ID<3)
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	68 f4       	brcc	.+26     	; 0xeba <EXTI_enuCallBackF+0x3e>
			EXTI_APFunINIT[Copy_u8EXTI_ID] = Copy_PFunApp;
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	2a 81       	ldd	r18, Y+2	; 0x02
     ea8:	3b 81       	ldd	r19, Y+3	; 0x03
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	fc 01       	movw	r30, r24
     eb0:	ea 59       	subi	r30, 0x9A	; 154
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	31 83       	std	Z+1, r19	; 0x01
     eb6:	20 83       	st	Z, r18
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <EXTI_enuCallBackF+0x48>
		else
			Local_enuErrorState = ES_Out_Of_Range;
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <EXTI_enuCallBackF+0x48>
	}
	else
	{
		Local_enuErrorState = ES_NULLPOINTER;
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <__vector_1>:
ISR(VECT_INT0)
{
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[0])
     efe:	80 91 66 00 	lds	r24, 0x0066
     f02:	90 91 67 00 	lds	r25, 0x0067
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	29 f0       	breq	.+10     	; 0xf14 <__vector_1+0x40>
	{
		EXTI_APFunINIT[0]();
     f0a:	e0 91 66 00 	lds	r30, 0x0066
     f0e:	f0 91 67 00 	lds	r31, 0x0067
     f12:	09 95       	icall
	}
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_2>:

ISR(VECT_INT1)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[1])
     f64:	80 91 68 00 	lds	r24, 0x0068
     f68:	90 91 69 00 	lds	r25, 0x0069
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	29 f0       	breq	.+10     	; 0xf7a <__vector_2+0x40>
		{
			EXTI_APFunINIT[1]();
     f70:	e0 91 68 00 	lds	r30, 0x0068
     f74:	f0 91 69 00 	lds	r31, 0x0069
     f78:	09 95       	icall
		}
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	0f 90       	pop	r0
     f9c:	1f 90       	pop	r1
     f9e:	18 95       	reti

00000fa0 <__vector_3>:

ISR(VECT_INT2)
{
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	11 24       	eor	r1, r1
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFunINIT[2])
     fca:	80 91 6a 00 	lds	r24, 0x006A
     fce:	90 91 6b 00 	lds	r25, 0x006B
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	29 f0       	breq	.+10     	; 0xfe0 <__vector_3+0x40>
		{
			EXTI_APFunINIT[2]();
     fd6:	e0 91 6a 00 	lds	r30, 0x006A
     fda:	f0 91 6b 00 	lds	r31, 0x006B
     fde:	09 95       	icall
		}
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	7f 91       	pop	r23
     ff2:	6f 91       	pop	r22
     ff4:	5f 91       	pop	r21
     ff6:	4f 91       	pop	r20
     ff8:	3f 91       	pop	r19
     ffa:	2f 91       	pop	r18
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <main>:
#include"EXTI_Int.h"
#define SREG  *((u8*)0x5F)
void tog(void);
extern EXTI_t EXTI_AstrEXTConfig[3] ;
int main()
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPINDir(DIO_u8PORTD,DIO_u8PIN2,DIO_INPUT);
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_enuSetPINDir>
	DIO_enuSetPINVAL(DIO_u8PORTD,DIO_u8PIN2,DIO_PULLUP);
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	62 e0       	ldi	r22, 0x02	; 2
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	0e 94 b1 02 	call	0x562	; 0x562 <DIO_enuSetPINVAL>
	DIO_enuSetPINDir(DIO_u8PORTA,DIO_u8PIN1,DIO_OUTPUT);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	41 e0       	ldi	r20, 0x01	; 1
    1028:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_enuSetPINDir>
	DIO_enuSetPINVAL(DIO_u8PORTA,DIO_u8PIN1,DIO_HIGH);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 b1 02 	call	0x562	; 0x562 <DIO_enuSetPINVAL>
	EXTI_enuCallBackF(tog,0);
    1036:	8c e2       	ldi	r24, 0x2C	; 44
    1038:	98 e0       	ldi	r25, 0x08	; 8
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <EXTI_enuCallBackF>
	EXTI_enuInit(EXTI_AstrEXTConfig);
    1040:	80 e6       	ldi	r24, 0x60	; 96
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 c9 04 	call	0x992	; 0x992 <EXTI_enuInit>
	SREG|=(1<<7);
    1048:	af e5       	ldi	r26, 0x5F	; 95
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ef e5       	ldi	r30, 0x5F	; 95
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	80 68       	ori	r24, 0x80	; 128
    1054:	8c 93       	st	X, r24
    1056:	ff cf       	rjmp	.-2      	; 0x1056 <main+0x50>

00001058 <tog>:
	while(1);
}

void tog(void)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	//*(u8*)p = 10;
	DIO_enuToggelPIN(DIO_u8PORTA,DIO_u8PIN1);
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	0e 94 9d 03 	call	0x73a	; 0x73a <DIO_enuToggelPIN>
}
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <_exit>:
    106e:	f8 94       	cli

00001070 <__stop_program>:
    1070:	ff cf       	rjmp	.-2      	; 0x1070 <__stop_program>
